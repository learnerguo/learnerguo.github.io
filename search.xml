<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>书单记录</title>
    <url>/2023/d298f472fcd1/index.html</url>
    <content><![CDATA[<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul>
<li>《Java并发编程深度解析与实战》 – 谭锋</li>
</ul>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>Next7主题自定义分类</title>
    <url>/2023/baf924a75393/index.html</url>
    <content><![CDATA[<p><a href="https://enigmatisms.github.io/2022/02/18/Hexo-NexT%E4%B8%BB%E9%A2%98-%E6%9B%B4%E5%BC%BA%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/">参考文章</a></p>
<h2 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall hexo-generator-index</span><br><span class="line"><span class="built_in">npm</span> install hexo-generator-indexed</span><br><span class="line"><span class="built_in">npm</span> install hexo-pagination --save</span><br><span class="line"><span class="built_in">npm</span> install timsort --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="添加自定义文件"><a href="#添加自定义文件" class="headerlink" title="添加自定义文件"></a>添加自定义文件</h2><ol>
<li>增加的分类是 阅读：book</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">/book/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span> <span class="comment">#这里是新添加的菜单</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在博客根目录下创建 scripts 目录并创建 <code>customcategory.js</code> 文件，内容如下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; sort &#125; = <span class="built_in">require</span>(<span class="string">&#x27;timsort&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> filteredCategory = <span class="string">&#x27;book&#x27;</span>;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;customcategory&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.<span class="property">posts</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">name</span> == filteredCategory;</span><br><span class="line">  &#125;).<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>);				<span class="comment">// 复制，而非原地操作</span></span><br><span class="line">  <span class="title function_">sort</span>(posts.<span class="property">data</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.<span class="property">sticky</span> || <span class="number">0</span>) - (a.<span class="property">sticky</span> || <span class="number">0</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pagination</span>(<span class="string">&#x27;book&#x27;</span>, posts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;customcategory&#x27;</span>],</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在主题的 layout 目录下创建文件 <code>customcategory.njk</code> 文件内容如下</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &#x27;_layout.njk&#x27; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/post-collapse.njk&#x27; <span class="keyword">as</span> post_template with context %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/sidebar.njk&#x27; <span class="keyword">as</span> sidebar_template with context %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-variable">&#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125;</span><span class="language-xml">: </span><span class="template-variable">&#123;&#123; page.category &#125;&#125;</span><span class="language-xml"> | </span><span class="template-variable">&#123;&#123; title &#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> class %&#125;</span><span class="language-xml">index posts-expand</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">include</span></span> &#x27;_partials/pagination.njk&#x27; -%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> sidebar %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; sidebar_template.render(false) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next8版本主题优化修改的文件</title>
    <url>/2023/44b973fe011c/index.html</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/252983030">参考文章</a></p>
<span id="more"></span>

<p>首页每篇文章变成圆角，只需要在 <code>styles.styl</code> 中添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加首页每篇文章圆角独立 start ------------</span><br><span class="line">.post-block&#123;</span><br><span class="line">        background-color: rgba(255, 255, 255, 1);</span><br><span class="line">        //margin-top: 24px;</span><br><span class="line">        margin-bottom: 24px;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        border-radius: 30px 50px 30px 50px;</span><br><span class="line">        box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line">&#125;</span><br><span class="line">// 添加首页每篇文章圆角独立 end ------------</span><br></pre></td></tr></table></figure>
<p><code>styles.styl</code> 在博客根目录下的，<code>source/_data</code> 下，若没有则需要自己创建并且在 <code>next</code> 主题的 <code>_config.yml</code> 中打开下面的注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly主题多级分类折叠与展开</title>
    <url>/2023/acbd53e5de56/index.html</url>
    <content><![CDATA[<ol>
<li>引入 <code>jquery</code> 和 自定义的 js 文件</li>
</ol>
<p>打开 <code>_config.butterfly.yml</code> 文件，添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/cusconfig/css/hidemermaid.css?1&quot;&gt;</span></span><br><span class="line">    <span class="comment"># 引入jquery</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 引入自定义文件，自定义文件放在博客根目录的 /cusconfig/js 目录下，名称是 category.js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/cusconfig/js/category.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>category.js 文件内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">categoryUnfold</span>();</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">categoryUnfold</span>(<span class="params"></span>) &#123;</span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 这里引入了向下展开的图标，可以直接从本站下载放入对应目录即可</span></span><br><span class="line">				$(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;list-style-image&quot;</span>,<span class="string">&quot;url(&#x27;/cusconfig/img/category-unfold-16x16.png&#x27;&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//点击含有子标签category-list-child的category-list-link标签时，不进行跳转</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">		&#125;).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;javascript:void(0)&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//含有子标签category-list-child的category-list-link标签将自动隐藏子标签</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">				$(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">		&#125;);	</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//点击含有子标签category-list-child的category-list-link标签时，将隐藏子标签展开</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			$(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly主题归档分类页面展示成双栏</title>
    <url>/2023/e641424208d5/index.html</url>
    <content><![CDATA[<ol>
<li>在 博客根目录的 <code>source</code> 目录下创建文件夹 <code>cusconfig/css</code>, 并创建文件, <code>cus_butterfly.css</code>, 添加如下内容</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 归档，分类文档页面设置双栏展示， 增加边框 */</span></span><br><span class="line"><span class="selector-class">.no-article-cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed lightblue;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">241</span>, <span class="number">242</span>, <span class="number">246</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-sort-item</span><span class="selector-class">.year</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引入自定义 <code>css</code> 文件， 打开主题配置文件 <code>_config.butterfly.yml</code>, 添加如下内容</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># 添加下面这行内容引入自定义 js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/cusconfig/css/cus_butterfly.css?1&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="去掉文档前面的点和竖线"><a href="#去掉文档前面的点和竖线" class="headerlink" title="去掉文档前面的点和竖线"></a>去掉文档前面的点和竖线</h1><p>修改 <code>archives.styl</code> 文件，该文件路径为 <code>博客根目录/themes/butterfly/source/css_page</code> 下面， 有注释的地方代表修改过</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">.article-sort</span></span><br><span class="line"><span class="attribute">  margin-left</span><span class="punctuation">:</span> <span class="string">10px</span></span><br><span class="line">  <span class="attribute">padding-left</span><span class="punctuation">:</span> <span class="string">20px</span></span><br><span class="line">  <span class="attribute">// border-left</span><span class="punctuation">:</span> <span class="string">2px solid lighten($light-blue, 20)   这一行注释掉，这里去掉竖线</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">&amp;-title</span></span><br><span class="line"><span class="attribute">    position</span><span class="punctuation">:</span> <span class="string">relative</span></span><br><span class="line">    <span class="attribute">margin-left</span><span class="punctuation">:</span> <span class="string">10px</span></span><br><span class="line">    <span class="attribute">padding-bottom</span><span class="punctuation">:</span> <span class="string">20px</span></span><br><span class="line">    <span class="attribute">padding-left</span><span class="punctuation">:</span> <span class="string">20px</span></span><br><span class="line">    <span class="attribute">font-size</span><span class="punctuation">:</span> <span class="string">1.72em</span></span><br><span class="line"></span><br><span class="line">    &amp;:hover</span><br><span class="line">      &amp;:before</span><br><span class="line">        <span class="attribute">border-color</span><span class="punctuation">:</span> <span class="string">var(--pseudo-hover)</span></span><br><span class="line"></span><br><span class="line">    &amp;:before</span><br><span class="line">      <span class="attribute">position</span><span class="punctuation">:</span> <span class="string">absolute</span></span><br><span class="line">      <span class="attribute">top</span><span class="punctuation">:</span> <span class="string">calc(((100% - 36px) / 2))</span></span><br><span class="line">      <span class="attribute">left</span><span class="punctuation">:</span> <span class="string">-9px</span></span><br><span class="line">      <span class="attribute">z-index</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line">      <span class="attribute">width</span><span class="punctuation">:</span> <span class="string">w = 10px</span></span><br><span class="line">      <span class="attribute">height</span><span class="punctuation">:</span> <span class="string">h = w</span></span><br><span class="line">      <span class="attribute">border</span><span class="punctuation">:</span> <span class="string">.5 * w solid $light-blue</span></span><br><span class="line">      <span class="attribute">border-radius</span><span class="punctuation">:</span> <span class="string">w</span></span><br><span class="line">      <span class="attribute">background</span><span class="punctuation">:</span> <span class="string">var(--card-bg)</span></span><br><span class="line">      <span class="attribute">content</span><span class="punctuation">:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attribute">line-height</span><span class="punctuation">:</span> <span class="string">h</span></span><br><span class="line">      <span class="attribute">transition</span><span class="punctuation">:</span> <span class="string">all .2s ease-in-out</span></span><br><span class="line"></span><br><span class="line">    &amp;:after</span><br><span class="line">      <span class="attribute">position</span><span class="punctuation">:</span> <span class="string">absolute</span></span><br><span class="line">      <span class="attribute">bottom</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line">      <span class="attribute">left</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line">      <span class="attribute">z-index</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line">      <span class="attribute">width</span><span class="punctuation">:</span> <span class="string">2px</span></span><br><span class="line">      <span class="attribute">height</span><span class="punctuation">:</span> <span class="string">1.5em</span></span><br><span class="line">      <span class="attribute">background</span><span class="punctuation">:</span> <span class="string">lighten($light-blue, 20)</span></span><br><span class="line">      <span class="attribute">content</span><span class="punctuation">:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">&amp;-item</span></span><br><span class="line"><span class="attribute">    position</span><span class="punctuation">:</span> <span class="string">relative</span></span><br><span class="line">    <span class="attribute">display</span><span class="punctuation">:</span> <span class="string">flex</span></span><br><span class="line">    <span class="attribute">align-items</span><span class="punctuation">:</span> <span class="string">center</span></span><br><span class="line">    <span class="attribute">margin</span><span class="punctuation">:</span> <span class="string">0 0 20px 10px</span></span><br><span class="line">    <span class="attribute">transition</span><span class="punctuation">:</span> <span class="string">all .2s ease-in-out</span></span><br><span class="line"></span><br><span class="line">    &amp;:hover</span><br><span class="line">      &amp;:before</span><br><span class="line">        <span class="attribute">border-color</span><span class="punctuation">:</span> <span class="string">var(--pseudo-hover)</span></span><br><span class="line"></span><br><span class="line">    /* &amp;:before   这一整块都注释掉，这里是去掉文章前面的点</span><br><span class="line">      <span class="attribute">$w = 6px</span></span><br><span class="line"><span class="attribute">      position</span><span class="punctuation">:</span> <span class="string">absolute</span></span><br><span class="line">      <span class="attribute">left</span><span class="punctuation">:</span> <span class="string">calc(-20px - 17px)</span></span><br><span class="line">      <span class="attribute">width</span><span class="punctuation">:</span> <span class="string">w = $w</span></span><br><span class="line">      <span class="attribute">height</span><span class="punctuation">:</span> <span class="string">h = w</span></span><br><span class="line">      <span class="attribute">border</span><span class="punctuation">:</span> <span class="string">.5 * w solid $light-blue</span></span><br><span class="line">      <span class="attribute">border-radius</span><span class="punctuation">:</span> <span class="string">w</span></span><br><span class="line">      <span class="attribute">background</span><span class="punctuation">:</span> <span class="string">var(--card-bg)</span></span><br><span class="line">      <span class="attribute">content</span><span class="punctuation">:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attribute">transition</span><span class="punctuation">:</span> <span class="string">all .2s ease-in-out */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">&amp;.no-article-cover</span></span><br><span class="line"><span class="attribute">      height</span><span class="punctuation">:</span> <span class="string">80px</span></span><br><span class="line"></span><br><span class="line">      <span class="attribute">.article-sort-item-info</span></span><br><span class="line"><span class="attribute">        padding</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">&amp;.year</span></span><br><span class="line"><span class="attribute">      font-size</span><span class="punctuation">:</span> <span class="string">1.43em</span></span><br><span class="line"></span><br><span class="line">      &amp;:hover</span><br><span class="line">        &amp;:before</span><br><span class="line">          <span class="attribute">border-color</span><span class="punctuation">:</span> <span class="string">$light-blue</span></span><br><span class="line"></span><br><span class="line">      &amp;:before</span><br><span class="line">        <span class="attribute">border-color</span><span class="punctuation">:</span> <span class="string">var(--pseudo-hover)</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">&amp;-time</span></span><br><span class="line"><span class="attribute">      color</span><span class="punctuation">:</span> <span class="string">$theme-meta-color</span></span><br><span class="line">      <span class="attribute">font-size</span><span class="punctuation">:</span> <span class="string">95%</span></span><br><span class="line"></span><br><span class="line">      <span class="attribute">time</span></span><br><span class="line"><span class="attribute">        padding-left</span><span class="punctuation">:</span> <span class="string">6px</span></span><br><span class="line">        <span class="attribute">cursor</span><span class="punctuation">:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">&amp;-title</span></span><br><span class="line"><span class="attribute">      @extend .limit-more-line</span></span><br><span class="line"><span class="attribute">      color</span><span class="punctuation">:</span> <span class="string">var(--font-color)</span></span><br><span class="line">      <span class="attribute">font-size</span><span class="punctuation">:</span> <span class="string">1.1em</span></span><br><span class="line">      <span class="attribute">transition</span><span class="punctuation">:</span> <span class="string">all .3s</span></span><br><span class="line">      <span class="attribute">-webkit-line-clamp</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"></span><br><span class="line">      &amp;:hover</span><br><span class="line">        <span class="attribute">color</span><span class="punctuation">:</span> <span class="string">$text-hover</span></span><br><span class="line">        <span class="attribute">transform</span><span class="punctuation">:</span> <span class="string">translateX(10px)</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">&amp;-img</span></span><br><span class="line"><span class="attribute">      overflow</span><span class="punctuation">:</span> <span class="string">hidden</span></span><br><span class="line">      <span class="attribute">width</span><span class="punctuation">:</span> <span class="string">80px</span></span><br><span class="line">      <span class="attribute">height</span><span class="punctuation">:</span> <span class="string">80px</span></span><br><span class="line"></span><br><span class="line">      :first-child</span><br><span class="line">        <span class="attribute">@extend .imgHover</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    &amp;-info</span></span><br><span class="line"><span class="attribute">      flex</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line">      <span class="attribute">padding</span><span class="punctuation">:</span> <span class="string">0 16px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly标签页固定每行个数</title>
    <url>/2023/1099169ec3c6/index.html</url>
    <content><![CDATA[<ol>
<li><p>可以先参考如下文章添加自定义 <code>css</code> 文件</p>
<ol><li><a href="/2023/e641424208d5/index.html" title="butterfly主题归档分类页面展示成双栏">butterfly主题归档分类页面展示成双栏</a></li></ol>
</li>
<li><p>在 <code>cus_butterfly.css</code> 文件中添加如下内容</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改标签页，每个标签宽度固定  start -------------- */</span></span><br><span class="line"><span class="selector-class">.tag-cloud-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 每行放5个标签 */</span></span><br><span class="line"><span class="selector-class">.tag-cloud-list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改标签页，每个标签宽度固定  end -------------- */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用插入本地图片路径问题</title>
    <url>/2023/563e23df91d3/index.html</url>
    <content><![CDATA[<p>Hexo version: 7.0<br>Next version: 8.18</p>
<span id="more"></span>
<ol>
<li>安装插件</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改 hexo 配置文件 <code>_config.yml</code> (不是next 主题的配置文件)</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这样文章生成的路径会是年/月/日/hash值形式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:hash/</span></span><br><span class="line"><span class="comment"># 开启资源文件夹功能</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="comment"># 这两个值都配置为false，网上很多文章配置成true，可能是不同版本效果不同，在 Next8.18, hexo7 这个版本若配置成true，图片路径会多了日期导致显示失败 </span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 md 文章目录中创建同名的文件夹，比如当前这篇文章的名称是 <code>hexo插入本地图片路径问题</code>， 那就需要在这篇文章的同级目录中创建一个同名的文件夹，然后图片就放在这个文件夹中</li>
<li>在使用 md 语法引入图片的时候，因为图片是放在目录中（和文章同名的那个目录），但是如果在本地 vscode 中将目录也加上，虽然本地可以访问，但是 hexo g 生成之后，访问博客地址是无法访问的，所以本地引入图片的时候只能写图片的文件名，不要路径，这样虽然本地无法预览，但是 hexo s 和 hexo d 之后的结果都可以正常查看</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo和Next主题修改</title>
    <url>/2023/52739010ef7c/index.html</url>
    <content><![CDATA[<h1 id="hexo中-Next主题相关修改"><a href="#hexo中-Next主题相关修改" class="headerlink" title="hexo中 Next主题相关修改"></a>hexo中 Next主题相关修改</h1><h2 id="文章目录默认展开"><a href="#文章目录默认展开" class="headerlink" title="文章目录默认展开"></a>文章目录默认展开</h2><p>基于 Next7.x 版本</p>
<ol>
<li>主题配置文件 _config.yml 中搜索 custom_file_path,看到如下内容，打开 style 那一行的注释</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol start="2">
<li>在项目根目录(注意这里不是在主题目录下新建)下的 source 目录下新建 _data 目录，并且创建 style.styl 文件，内容如下</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章目录默认展开</span></span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文章目录字体大小调整</span></span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-tag">ol</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span> : <span class="number">14px</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改主题配置文件 _config.yml, 搜索 toc 修改内容如下</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章目录</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><ol>
<li>安装依赖</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在全局配置文件 _config.yml 中添加如下内容</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改主题配置文件 _config.yml，这里使用的是 Next 主题, 搜索 local_search 将 enable: false 改成 true</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重新生成</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>



<h2 id="新建菜单以及添加菜单图标"><a href="#新建菜单以及添加菜单图标" class="headerlink" title="新建菜单以及添加菜单图标"></a>新建菜单以及添加菜单图标</h2><p><a href="http://theme-next.iissnan.com/getting-started.html#menu-settings">next官网</a></p>
<p>在官网中查看主题设定-&gt;菜单那部分，当我们新添加一个菜单是(比如我要添加阅读)，在<code>next</code>的配置文件中(<code>_config.yml</code>)里面找到下面的配置：</p>
<p>Next8.x 版本</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">/book/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span> <span class="comment">#这里是新添加的菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">book（这里是图标）</span></span><br></pre></td></tr></table></figure>

<p>然后在开启的对应的语言文件中，比如我使用的是中文，那么就是在<code>zh-CN.yml</code>文件中找到<code>menu</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">阅读</span></span><br></pre></td></tr></table></figure>

<p>后面的book那一栏是后来添加的。需要注意的是在上面的第一个配置文件中所写的<code>book</code>是<a href="http://fontawesome.io/">Font Awesome</a>中<code>icon</code>的名称，这样才可以在我们自己的页面显示出图标。</p>
<p>在 <code>source/</code> 目录下创建目录 <code>book</code>,  然后在 <code>source/book</code> 目录下创建 <code>index.md</code>, 内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">book</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-11-10 21:12:59</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">book</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="添加社交功能之邮箱"><a href="#添加社交功能之邮箱" class="headerlink" title="添加社交功能之邮箱"></a>添加社交功能之邮箱</h2><p>在next主题配置文件搜索social:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:1744709138@qq.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br></pre></td></tr></table></figure>

<p>这里只是显示了邮箱，这些原来都是注释掉的，自己去掉前面的注释即可，需要注意的是邮箱前面的<code>mailto</code>是必须要保留的，还有最后面的<code>envelope</code>则是图标名字，也是不能修改的。</p>
<h2 id="友情链接的配置"><a href="#友情链接的配置" class="headerlink" title="友情链接的配置"></a>友情链接的配置</h2><p>在<code>next</code>主题配置文件中查找标签<code>links</code>并进行如下配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># title</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">MacTalk:</span> <span class="string">http://macshuo.com/</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">http://example.com/</span></span><br></pre></td></tr></table></figure>

<h2 id="Next8-增加评论功能（valine）"><a href="#Next8-增加评论功能（valine）" class="headerlink" title="Next8 增加评论功能（valine）"></a>Next8 增加评论功能（valine）</h2><p>在 Next8.1.0 中移除了 valine, <a href="https://github.com/next-theme/hexo-theme-next/issues/4">参考网址</a><br>如果还需要继续使用，官方有提供插件，具体操作如下</p>
<ol>
<li>安装插件 <code>npm install hexo-next-valine --save</code></li>
<li>编辑 Next 主题 _config.yml 文件，找到 <code>comments:</code> 标签，在下面添加 valine 相关设置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">valine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">设置apiId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">设置apiKey</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="string">https://leancloud.cn</span> <span class="comment"># When the custom domain name is enabled, fill it in here</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">期待与您的交流</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># Whether to enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> []</span><br></pre></td></tr></table></figure>

<h2 id="添加近期文章展示"><a href="#添加近期文章展示" class="headerlink" title="添加近期文章展示"></a>添加近期文章展示</h2><p><a href="https://blog.csdn.net/wugenqiang/article/details/88581218">查看转载文章</a></p>
<h2 id="显示文章的更新时间"><a href="#显示文章的更新时间" class="headerlink" title="显示文章的更新时间"></a>显示文章的更新时间</h2><p>在主题的配置文件中找到<code>updated_at</code>，然后将其值修改为<code>true</code>即可(这种方式应该是适用于5以后的版本)</p>
<p>对于以前的方式可以看这篇<a href="https://blog.csdn.net/ganzhilin520/article/details/79053399">别人写的文章</a></p>
<h2 id="字数统计与阅读时长"><a href="#字数统计与阅读时长" class="headerlink" title="字数统计与阅读时长"></a>字数统计与阅读时长</h2><p><a href="https://www.cnblogs.com/php-linux/p/8418518.html">查看转载文章</a></p>
<h2 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h2><p>在站点配置文件搜索<code>post_copyright</code>，将<code>enable</code>修改为<code>true</code>，添加<code>author</code>即可。<br><a href="https://zhuanlan.zhihu.com/p/463548944#:~:text=%E4%BA%8C%E3%80%81hexo%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%202.1%20%E5%BC%80%E5%90%AF%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE%20%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6themes%2Fnext%2F_config.yml%EF%BC%8C%E5%B0%86creative_commons%E4%B8%8B%E9%9D%A2%E7%9A%84post%E5%80%BC%E7%94%B1false%E6%94%B9%E4%B8%BAtrue%E3%80%82%20creative_commons%3A%20license%3A%20by-nc-sa,sidebar%3A%20false%20post%3A%20true%20language%3A%202.2%20%E6%9B%B4%E6%96%B0%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E%20%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6themes%2Fnext%2Flayout%2F_partials%2Fpost%2Fpost-copyright.swig%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E%E6%96%87%E5%AD%97%EF%BC%8C%E4%BF%9D%E5%AD%98%E3%80%82">参考文章</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">咖啡杯里的茶</span></span><br></pre></td></tr></table></figure>

<h2 id="修改文章底部的标签"><a href="#修改文章底部的标签" class="headerlink" title="修改文章底部的标签"></a>修改文章底部的标签</h2><p>基于 Next7 修改<br>在主题配置文件 <code>_config.yml</code> 中将下面配置设置为 true 即可（该配置默认值为false）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><p><a href="https://www.jianshu.com/p/ea78bdd0551f">显示图片</a></p>
<h2 id="添加搜索功能-1"><a href="#添加搜索功能-1" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><p><a href="https://blog.csdn.net/qq_40265501/article/details/80030627">添加搜索</a></p>
<h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p>在<code>next</code>主题的配置文件文件中加上下面的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /images/微信支付.jpg</span><br><span class="line">alipay: /images/支付宝支付.jpg</span><br></pre></td></tr></table></figure>

<p>其中<code>wechatpay</code>和<code>alipay</code>对应的是微信支付收款码和支付宝支付收款码的图片地址，我这里是存放在 <code>主题\source\images\</code>下面</p>
<h2 id="生成永久链接"><a href="#生成永久链接" class="headerlink" title="生成永久链接"></a>生成永久链接</h2><p><a href="https://zhuanlan.zhihu.com/p/134492757">Hexo 生成永久文章链接 - 知乎 (zhihu.com)</a><br>对于Heox7 版本可以有更简单的方式，直接使用 hash 即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:hash/</span></span><br></pre></td></tr></table></figure>

<h2 id="文章收录"><a href="#文章收录" class="headerlink" title="文章收录"></a>文章收录</h2><p><a href="https://zhuanlan.zhihu.com/p/651590960">关于Hexo博客收录与SEO那些事 - 知乎 (zhihu.com)</a><br>文章中验证网站的步骤中使用的是下载 html 验证文件，有可能这种方式验证不成功，可以选择第二种方式，在网站首页添加 meta 标签中的内容，将 meta 中的内容复制到<br><code>themes\nextlayout\_partials\head\head.njk</code> 文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里添加的是百度的验证头文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;baidu-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里添加的是bing验证的头文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msvalidate.01&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h2><p><a href="https://guoguocai.github.io/2022/06/05/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7-Hexo-%E7%89%88%E6%9C%AC/">升级hexo</a></p>
<h2 id="Next7-多级目录折叠"><a href="#Next7-多级目录折叠" class="headerlink" title="Next7 多级目录折叠"></a>Next7 多级目录折叠</h2><p><a href="https://alex-mcavoy.github.io/hexo/41b257b8.html">多级目录折叠</a><br>按照上面参考的文档开启 Jquery, 页面依然报错 <code>$ 符号未定义</code>, 此时可以按照如下方式修改,在进入 category.js 之前先引入一次 Jquery</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多级目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/category.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Hexo-Next主题支持-mermaid"><a href="#Hexo-Next主题支持-mermaid" class="headerlink" title="Hexo Next主题支持 mermaid"></a>Hexo Next主题支持 mermaid</h2><ol>
<li>进入博客根目录，执行安装插件命令 <code>npm install hexo-filter-mermaid-diagrams --save</code></li>
<li>打开 Next 主题下的 _config.yml 文件，将 mermaid 的配置改成 true</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在站点配置文件中修改如下(去除图形的高亮)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 增加下面的内容</span></span><br><span class="line">  <span class="attr">exclude_languages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mermaid</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重新生成部署即可</li>
</ol>
<h2 id="增加图片背景和透明度"><a href="#增加图片背景和透明度" class="headerlink" title="增加图片背景和透明度"></a>增加图片背景和透明度</h2><ol>
<li>将背景图片放在主题目录下 <code>themes/next/source/images/</code> 下面</li>
<li>修改 Next 主题配置文件 <code>_config.yml</code>, 将下面的注释打开</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在博客根目录下的 <code>source/</code> 下面创建 <code>_data/styles.styl</code> 文件（默认在 source 目录下没有 _data 目录，若没有也需要创建）</li>
<li>在上面创建的 <code>styles.styl</code> 文件中增加如下内容</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片背景 start------------</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:url(<span class="string">/images/background.jpg</span>);		<span class="comment">//图片路径，默认</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;			<span class="comment">//图片无法铺满时，是否重复及重复方式</span></span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;		<span class="comment">//图片是否跟随滚动</span></span><br><span class="line">    <span class="attribute">background-size</span>:cover;				<span class="comment">//覆盖</span></span><br><span class="line">    <span class="attribute">background-position</span>:center;		<span class="comment">//图片显示起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片背景 end------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透明度start----------------------------</span></span><br><span class="line"><span class="comment">// 文章内容透明度设置</span></span><br><span class="line"><span class="comment">// 7 版本有效</span></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8版本有效</span></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索框的透明度</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 透明度end----------------------------</span></span><br></pre></td></tr></table></figure>

<h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><p><a href="https://github.com/rozbo/hexo-neat">参考github hexo-neat 插件</a></p>
<ol>
<li>安装插件</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 hexo 配置文件 <code>_config.yml</code> 中添加如下配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态文件压缩 start-----------------</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line"><span class="comment"># 静态文件压缩 end-----------------</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重新生成推送即可</li>
</ol>
<h2 id="引用自己的文章"><a href="#引用自己的文章" class="headerlink" title="引用自己的文章"></a>引用自己的文章</h2><p><code>&#123;% post_path filename %&#125;</code><br>filename 就是引用文章的名称</p>
<h2 id="阻止点击more时跳转到more位置"><a href="#阻止点击more时跳转到more位置" class="headerlink" title="阻止点击more时跳转到more位置"></a>阻止点击more时跳转到more位置</h2><ol>
<li>如果给文章添加了 <code>&lt;!--more--&gt;</code> 点击阅读更多时会跳转到 <code>more</code> 锚点位置，可以通过下面方式修改</li>
<li>找到 <code>themes\next-8.18.2\layout\_macro\post.njk</code> 文件， 搜索 <code>elif post.excerpt</code>，相关部分原来的代码如下</li>
</ol>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#123;% elif post.excerpt %&#125;</span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; <span class="name">post.excerpt</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;%- if theme.read_more_btn %&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">post.path</span>) &#125;&#125;</span><span class="template-variable">&#123;&#123;<span class="name">suffix</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.read_more&#x27;</span>) &#125;&#125;</span><span class="language-xml"> <span class="symbol">&amp;raquo;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;%- endif %&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--/noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;% else %&#125;</span></span><br></pre></td></tr></table></figure>
<p>添加部分内容后变成如下内容</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> post.excerpt %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; post.excerpt &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.read_more_btn %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 此处是添加的内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name">set</span> suffix = &quot;&quot;%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.read_more_anchor %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name">set</span> suffix = &quot;#more&quot;%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 添加结束 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 这里有修改，将 #more 改成了 </span></span><span class="template-variable">&#123;&#123;suffix&#125;&#125;</span><span class="language-xml"><span class="comment"> --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="template-variable">&#123;&#123;suffix&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125;</span><span class="language-xml"> <span class="symbol">&amp;raquo;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--/noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在 next 的 <code>_config.yml</code> 文件中添加如下内容即可，配置为true时依然跳转到more</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_more_anchor:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的butterfly主题更换waline系统cdn地址</title>
    <url>/2023/0fd7aa9951f7/index.html</url>
    <content><![CDATA[<ol>
<li><p>butterfly主题默认使用 cdn.jsdelivr.net，在国内使用很慢，有时候加载不出来，可以替换成国内源，比如下面这两个</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//www.staticfile.org/</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//cdn.onmicrosoft.cn/</span></span><br></pre></td></tr></table></figure>
<p>这里我使用的是第一个，打开 <code>http://www.staticfile.org/</code> 后，会出现搜索框，搜索 <code>waline</code>， 然后选择对应的版本就好了，如果不知道自己的版本，可以在切换前先打开自己的 <code>wailne</code> 系统，在评论框下面会显示版本</p>
</li>
<li><p>找到对应的版本后复制出对应的 <code>css</code> 和 <code>js</code> 地址，添加到 <code>_config.butterfly.yml</code> 文件中,比如我使用的是3.0版本，则打开 <code>wailne_css</code> 和 <code>waline_js</code> 注释并添加如下内容</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="attr">waline_css:</span> <span class="string">https://cdn.staticfile.org/waline/3.0.0-alpha.2/waline.min.css</span></span><br><span class="line">    <span class="attr">waline_js:</span> <span class="string">https://cdn.staticfile.org/waline/3.0.0-alpha.2/waline.min.js</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>比较</title>
    <url>/2023/2084759b2332/index.html</url>
    <content><![CDATA[<blockquote>
<p>人感到不幸福大多来源于比较，感到满足也源于比较</p>
</blockquote>
<span id="more"></span>
<p>在微信读书看到一位书友写到，作为农村出来的孩子，应该如何改变自己的命运，因为周围的一切在告诉我们，就算你努力了二十几年，才勉强达到了别人的起跑线，但是我们的出身是自己无法决定的，那我们应该如何更进一步呢？</p>
<p>看到另外一位书友的回答很有感触，且记录在此，和有缘人共勉</p>
<blockquote>
<p>回头看，轻舟已过万重山<br>向前看，长路漫漫亦灿灿<br>平常看，人间烟火甚灿烂<br>低头看，万里黄山皆脚下  </p>
</blockquote>
]]></content>
      <categories>
        <category>record</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>宝贵的人生建议</title>
    <url>/2023/5792ca8e5e27/index.html</url>
    <content><![CDATA[<ul>
<li>书名：《宝贵的人生建议》</li>
<li>作者：凯文凯利</li>
</ul>
<p>看过了，觉得有道理，想要改变都不代表你真的认同并理解，”做出来”就是对”认同”最好的回复</p>
<span id="more"></span>

<blockquote>
<p>把”创造”和”改进”这两个过程分开，你不能边写作边编辑，边雕刻边打磨，边制作边分析。如果你这么做，编辑就会阻遏创造，发明时，不要选择。画草图时，不要检查。写初稿时，不要反思。一开始，创造性思维必须是自由的，不受批判的干扰。</p>
</blockquote>
<p>无论是技术类文章还是其他类型的记录，重点是写，而不是先学习各种各样的套路(套路也很重要，但内容是前提)，后续在写内容之前不要追求完美，先写出来才会有后续的故事</p>
<blockquote>
<p>养成习惯的好处是，在行动时，不必再进行内心的权衡。不再消耗能量去思考是否要做这件事。你只管去做。好习惯很多，从说真话到使用牙线。</p>
</blockquote>
<p>不要使用意志力去坚持做一件事，慢慢养成习惯，让做某件事成为身体的本能</p>
<blockquote>
<p>恐惧是因为缺乏想象力。恐惧的解药不是勇敢，而更可能是想象力</p>
</blockquote>
<ul>
<li>恐惧是因为经历的太少，知道的太少，懂得的太少</li>
</ul>
<blockquote>
<p>你并不需要更多时间，因为你已经拥有了你的所有时间</p>
</blockquote>
<blockquote>
<p>你最近一次改变是在什么年纪，你就是多少岁</p>
</blockquote>
<blockquote>
<p>不要管别人怎么看待你，因为他们根本没看你</p>
</blockquote>
<blockquote>
<p>任何有价值的事都需要无尽的工作。你无法给工作设定上限，所以你必须给工作时间设限。你唯一能管理的是时间，而不是工作</p>
</blockquote>
<blockquote>
<p>如果你想超越你心目中的英雄，那就放下自尊心，像学生一样模仿他们，直到你能超越他们。这是所有大师的成功之道</p>
</blockquote>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>微信读书阅读挑战</title>
    <url>/2023/c4c074b722a1/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>参与微信阅读挑战</p>
<ol>
<li>365 天不间断</li>
<li>期间最少阅读 300 小时</li>
<li>每月更新进度</li>
</ol>
<pre class="mermaid">pie title 总天数(365)
    "已读" : 4
    "未读" : 361</pre>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>解决vscode找不到Python自定义模块报错no module named</title>
    <url>/2023/05b28e23ee5b/index.html</url>
    <content><![CDATA[<p>在 <code>.vscode</code> 目录下（若没有则新建）的 <code>launch.json</code> 中添加 <code>env</code> 相关内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;update_package&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;timeline\\ssh\\win_command.py&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;justMyCode&quot;</span>: true,</span><br><span class="line">            <span class="comment"># 下面这部分是新增的内容</span></span><br><span class="line">            <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;PYTHONPATH&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap详解</title>
    <url>/2023/834224a16039/index.html</url>
    <content><![CDATA[<h2 id="HashMap的底层数据结构是什么？"><a href="#HashMap的底层数据结构是什么？" class="headerlink" title="HashMap的底层数据结构是什么？"></a>HashMap的底层数据结构是什么？</h2><ol>
<li>之前 <code>Jdk1.7</code> 的存储结构是数组+链表，到了 <code>Jdk1.8</code> 变成了数组+链表+红黑树。</li>
</ol>
<h2 id="HashMap-是如何定位索引下标的"><a href="#HashMap-是如何定位索引下标的" class="headerlink" title="HashMap 是如何定位索引下标的"></a>HashMap 是如何定位索引下标的</h2><p>定位 <code>index</code> 分成两步</p>
<ol>
<li><p>根据 hash 函数获取 hash 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可以看到上面代码获取到 hashCode 之后还右移 16 位，具体原因在下面分析</strong></p>
</li>
<li><p>根据第一步计算的 <code>hash</code> 值获取数组位置（一般是对数组长度取模，<code>HashMap</code> 中是对长度 -1 进行 <code>&amp;</code> 运算）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// 获取下标的操作是  i = (n-1) &amp; hash</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>获取下标为什么是对 n-1 进行与操作而不是取模？具体原因下面分析</strong></p>
<h2 id="为什么需要对key的-hash-值右移-16位"><a href="#为什么需要对key的-hash-值右移-16位" class="headerlink" title="为什么需要对key的 hash 值右移 16位"></a>为什么需要对key的 hash 值右移 16位</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HashMap</span> <span class="string">中使用的</span> <span class="string">hash</span> <span class="string">函数是</span> <span class="string">key.hash</span> <span class="string">^</span> <span class="string">(key.hash</span> <span class="string">&gt;&gt;</span> <span class="number">16</span><span class="string">)</span>  <span class="string">而不是直接使用</span> <span class="string">key.hash,</span> <span class="string">这么做的原因是增加了扰动计算，使得</span> <span class="string">hash</span> <span class="string">分布的尽可能的均匀，</span> <span class="string">让元素的高16</span> <span class="string">位和低16</span> <span class="string">位都参与运算</span></span><br><span class="line"><span class="string">示例：</span></span><br><span class="line"><span class="string">比如有一个元素1换成二进制如下</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span>  <span class="string">（右移16位的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="string">另外一个元素2换成二进制如下</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110</span>  <span class="string">（右移16位的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="string">在计算数组位置的时候使用的是</span> <span class="string">hash</span> <span class="string">&amp;</span> <span class="string">(n</span> <span class="number">-1</span><span class="string">),</span>  <span class="string">要知道</span> <span class="string">n-1</span> <span class="string">肯定是一个相对来说比较小的数字（32个bit</span> <span class="string">只会使用比较少的低位），</span> <span class="string">比如长度是</span> <span class="number">32</span><span class="string">，</span> <span class="string">对应的二进制是</span> <span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用没有右移的元素1和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111     </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1010</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用没有右移的元素2和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100     </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1010</span></span><br><span class="line"><span class="string">可以看到元素1和元素2计算出来下标是相同的，这个不同是因为元素1和元素2的低16位是完全相同的，不同之处只在于高16位，但是当我们对</span> <span class="string">（n-1）进行与操作的时候，由于</span> <span class="string">n-1</span> <span class="string">的值比较小，绝大部分情况下，只有低16位会进行运算的</span></span><br><span class="line"></span><br><span class="line"><span class="string">接下来再看一下如果使用右移的hash进行计算会有什么不同</span></span><br><span class="line"><span class="string">使用右移的元素1和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000  </span><span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="string">用右移的元素2和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000  </span><span class="number">1110</span></span><br><span class="line"><span class="string">可以看到计算出来的</span> <span class="string">index</span> <span class="string">值是不同的，这就是右移带来的让高16位有参与运算的效果</span></span><br></pre></td></tr></table></figure>

<h2 id="为什么不对长度取模而是使用与运算"><a href="#为什么不对长度取模而是使用与运算" class="headerlink" title="为什么不对长度取模而是使用与运算"></a>为什么不对长度取模而是使用与运算</h2><ol>
<li><code>X % 2^n = X &amp; (2^n – 1)</code>  这两种运算等价，所以这也是 <code>HashMap</code> 长度取 <code>2^n</code> 的原因<br>也可以从数据角度记住，当 <code>n</code> 是 2 的倍数时， <code>X % 2^n = X &amp; (2^n – 1)</code>  等价</li>
</ol>
<p><a href="https://www.cnblogs.com/ysocean/p/9054804.html">公式计算参考链接</a></p>
<h2 id="HashMap是如何实现扩容的"><a href="#HashMap是如何实现扩容的" class="headerlink" title="HashMap是如何实现扩容的"></a>HashMap是如何实现扩容的</h2><p>扩容后索引其实也是使用 <code>hash &amp; （newLength -1）</code>, 这样计算出来的位置要是和原来的元素在相同的位置，要么是 原来的位置+旧数组长度&#x3D;新索引位置</p>
<h2 id="HashMap是如何解决hash冲突的"><a href="#HashMap是如何解决hash冲突的" class="headerlink" title="HashMap是如何解决hash冲突的"></a>HashMap是如何解决hash冲突的</h2><ol>
<li>对 <code>hash</code> 的计算进行优化，不是直接使用 <code>hashcode</code>,  而是右移16位，让高16位也参与运算，减少<code>hash</code> 冲突</li>
<li>如果遇到冲突，使用拉链法解决</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java的io模型</title>
    <url>/2023/180f5b629f58/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><ol>
<li><code>bio</code> 是同步阻塞 <code>io</code>，每一个连接都需要一个线程去处理</li>
<li><code>bio</code> 会有资源浪费问题，一个线程只能处理一个连接，如果某个客户端并没有发送数据，对应的服务端线程也只能阻塞</li>
</ol>
<span id="more"></span>
<h3 id="阻塞的含义"><a href="#阻塞的含义" class="headerlink" title="阻塞的含义"></a>阻塞的含义</h3><ol>
<li>服务端 <code>ServerSocket</code> 调用 <code>accept()</code> 方法会阻塞（如果没有客户端进行连接，调用这个方法后不会继续往下执行）</li>
<li>线程从Socket的输入流读入数据时,如果输入流没有足够的数据，就会进入阻塞状态</li>
</ol>
<h3 id="java-bio-代码实现"><a href="#java-bio-代码实现" class="headerlink" title="java bio 代码实现"></a>java bio 代码实现</h3><p><strong>服务端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                <span class="comment">//连接成功后新开一个线程去处理这个连接</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// read() 方法上的注释 If no byte is available because the stream is at the end of the file, the value -1 is returned</span></span><br><span class="line">                            <span class="keyword">while</span> ((length = socket.getInputStream().read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;thredId:&quot;</span> + Thread.currentThread().getName() + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, length));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端关闭, 当前线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>客户端实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusClientSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 外层循环会创建多个 socket，用来模拟多个 socket 客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8080</span>)) &#123;</span><br><span class="line">                <span class="comment">// 内存循环用来模拟一个客户端的多次通信</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    socket.getOutputStream().write((<span class="string">&quot;客户端&quot;</span> + j + <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次通信&quot;</span>).getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thredId:Thread-<span class="number">0</span>客户端<span class="number">0</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">0</span>客户端<span class="number">0</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">0</span></span><br><span class="line">thredId:Thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">1</span></span><br><span class="line">thredId:Thread-<span class="number">2</span>客户端<span class="number">2</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">2</span>客户端<span class="number">2</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ol>
<li>执行完成之后，服务端程序并不会关闭，会一直在运行</li>
<li>从上面结果看，一共创建了三个线程来执行</li>
</ol>
<h3 id="使用线程池优化-bio-实现"><a href="#使用线程池优化-bio-实现" class="headerlink" title="使用线程池优化 bio 实现"></a>使用线程池优化 bio 实现</h3><p>客户端代码不需要改动，只需要更改服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                <span class="comment">//连接成功后新开一个线程去处理这个连接</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> <span class="title class_">ClientTask</span>(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ClientTask</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// read() 方法上的注释 If no byte is available because the stream is at the end of the file, the value -1 is returned</span></span><br><span class="line">                <span class="keyword">while</span> ((length = socket.getInputStream().read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;thredId:&quot;</span> + Thread.currentThread().getName() + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, length));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端关闭, 当前线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">0</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">0</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">2</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">2</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>即使使用线程池进行了优化，本地还是阻塞io，只有当一个客户端通信完成（socket关闭了），另外一个 socket 才可以开始进行通信</p>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><ol>
<li>nio 是非阻塞 io（Non-block io）</li>
<li>非阻塞 io 的重点是 <strong>事件</strong> 和 <strong>通知或轮询</strong></li>
<li><code>java.nio.channerls</code> 包提供了支持非阻塞通信的类<ol>
<li><code>ServerSocketChannel</code>: <code>ServerSocket</code> 的替代类，支持阻塞通信与非阻塞通信</li>
<li><code>SocketChannerl</code>： <code>Socket</code> 的替代类，支持阻塞通信与非阻塞通信</li>
<li><code>Selector</code>： 为<code>ServerSocketChannel</code>监控接收连接就绪事件，为<code>SocketChannel</code>监控连接就绪、读就绪和写就绪事件</li>
<li><code>SelectionKey</code>：代表<code>ServerSocketChannel</code>以及<code>SocketChannel</code>向<code>Selector</code>注册事件的句柄。当一个<code>SelectionKey</code>对象位于<code>Selector</code>对象的<code>selected-keys</code>集合中，就表示与这个<code>SelectionKey</code>对象相关的事件发生了</li>
</ol>
</li>
</ol>
<h3 id="NIO-执行流程"><a href="#NIO-执行流程" class="headerlink" title="NIO 执行流程"></a>NIO 执行流程</h3><pre class="mermaid">sequenceDiagram
    participant A as ServerSocketChannel
    participant B as Selector
    participant C as socketChannel
    A->>A: open()
    B-->>B: open()
    A-->>B: register(SelectionKey.OP_ACCEPT)
    C-->>C: open()
    C-->>B: register(SelectionKey.OP_CONNECT)
    B-->>A: selectionKey.isAcceptable()==true
    A-->>A: accept()
    A-->>B: register(SelectionKey.OP_READ)
    C-->>B: write(byte[])
    B-->>A: selectionKey.isReadable()==true
    A-->>A: read()
    A-->>B: register(SelectionKey.OP_WRITE)</pre>


<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>代码执行流程</p>
<ol>
<li>服务端启动</li>
<li>客户端启动连接服务端（注册 <strong>可读</strong>和 <strong>可写</strong>事件）</li>
<li>客户端发生可写事件，开始写数据到服务端并且 <strong>取消可写事件</strong></li>
<li>服务端发生可读事件，读取数据并注册可写事件</li>
<li>服务端写数据到用户端并 <strong>取消可写事件</strong></li>
<li>客户端发生可读事件，读取数据后注册可写事件</li>
<li>重复3-6步骤</li>
</ol>
<p>上面有一个核心的步骤是，不论是管理端还是服务端，在写完数据之后都要取消可写事件，当想要写数据的时候，再进行注册写事件即可</p>
<ol>
<li>如果注册完写事件并且写完数据之后，没有进行取消，那么 <code>selectionKey.isWritable()</code> 会一直返回true， 原因请看第二点</li>
<li><code>SocketChannel</code> 在如下情况下都是可写的状态<ol>
<li>当连接建立后，可以向 <code>SocketChannel</code> 中写入数据</li>
<li>当 <code>SocketChannel</code> 中的输出缓冲区有空间时，可以写入数据, 所处只要缓冲区有空间，就会一直可写</li>
</ol>
</li>
</ol>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*缓冲区大小*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">BLOCK</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/*接受数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ByteBuffer</span> <span class="variable">sendBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="comment">/*发送数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ByteBuffer</span> <span class="variable">receiveBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CusServerSocket</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 打开服务器套接字通道</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 服务器配置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">// 注册到selector，等待连接</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务启动----8080:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 选择一组键，并且相应的通道已经打开</span></span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">// 返回此选择器的已选择键集。</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                handleEvent(selectionKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(SelectionKey selectionKey)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        String receiveText;</span><br><span class="line">        String sendText;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 可连接</span></span><br><span class="line">        <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            <span class="comment">// 设置该通道非阻塞</span></span><br><span class="line">            client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 注册可读和可写事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 返回为之创建此键的通道。</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="comment">//将缓冲区清空以备下次读取</span></span><br><span class="line">            receiveBuffer.clear();</span><br><span class="line">            <span class="comment">//读取服务器发送来的数据到缓冲区中</span></span><br><span class="line">            count = client.read(receiveBuffer);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                receiveText = <span class="keyword">new</span> <span class="title class_">String</span>(receiveBuffer.array(), <span class="number">0</span>, count);</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器端接受客户端数据--:&quot;</span> + receiveText);</span><br><span class="line">            &#125;</span><br><span class="line">            client.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isWritable()) &#123;</span><br><span class="line">            sendBuffer.clear();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">            sendText = <span class="string">&quot;服务端--》客户端  &quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond();</span><br><span class="line">            sendBuffer.put(sendText.getBytes());</span><br><span class="line">            <span class="comment">//将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位</span></span><br><span class="line">            sendBuffer.flip();</span><br><span class="line">            <span class="comment">//输出到通道</span></span><br><span class="line">            client.write(sendBuffer);</span><br><span class="line">            selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">CusServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CusServerSocket</span>(port);</span><br><span class="line">        server.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusClientSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*缓冲区大小*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">BLOCK</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/*接受数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ByteBuffer</span> <span class="variable">sendBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="comment">/*发送数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ByteBuffer</span> <span class="variable">receiveBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys;</span><br><span class="line">        Iterator&lt;SelectionKey&gt; iterator;</span><br><span class="line">        SelectionKey selectionKey;</span><br><span class="line">        SocketChannel client;</span><br><span class="line">        String receiveText;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">//返回此选择器的已选择键集。</span></span><br><span class="line">            selectionKeys = selector.selectedKeys();</span><br><span class="line">            iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                selectionKey = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isConnectable()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;client connect&quot;</span>);</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 判断此通道上是否正在进行连接操作。</span></span><br><span class="line">                    <span class="comment">// 完成套接字通道的连接过程。</span></span><br><span class="line">                    <span class="keyword">if</span> (client.isConnectionPending()) &#123;</span><br><span class="line">                        client.finishConnect();</span><br><span class="line">                        System.out.println(<span class="string">&quot;完成连接!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 连接成功之后注册可读和可写事件</span></span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">//将缓冲区清空以备下次读取</span></span><br><span class="line">                    receiveBuffer.clear();</span><br><span class="line">                    <span class="comment">//读取服务器发送来的数据到缓冲区中</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> client.read(receiveBuffer);</span><br><span class="line">                    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        receiveText = <span class="keyword">new</span> <span class="title class_">String</span>(receiveBuffer.array(), <span class="number">0</span>, count);</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端接受服务器端数据--:&quot;</span> + receiveText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    client.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isWritable()) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    sendBuffer.clear();</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">sendText</span> <span class="operator">=</span> <span class="string">&quot;客户端发送的数据--&gt;&quot;</span> + localTime.getMinute() + <span class="string">&quot;:&quot;</span> + localTime.getSecond();</span><br><span class="line">                    sendBuffer.put(sendText.getBytes());</span><br><span class="line">                    <span class="comment">//将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位</span></span><br><span class="line">                    sendBuffer.flip();</span><br><span class="line">                    client.write(sendBuffer);</span><br><span class="line">                    <span class="comment">// 写完之后需要注销写事件，否则会一直判断成可写, 这里表是对读事件感兴趣，就是移除写事件的意思</span></span><br><span class="line">                    selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="执行结果"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="执行结果-1">服务端结果</button><button type="button" class="tab " data-href="执行结果-2">用户端结果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="执行结果-1"><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">服务启动</span><span class="literal">----</span><span class="comment">8080:</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:45</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:47</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:49</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:51</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:53</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:55</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:57</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:59</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="执行结果-2"><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">client connect</span></span><br><span class="line"><span class="comment">完成连接!</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:45</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:47</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:49</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:51</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:53</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:55</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:57</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:59</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>


]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java输出运行过程中的代理类</title>
    <url>/2023/d513f5c497bd/index.html</url>
    <content><![CDATA[<h2 id="输出-jdk-动态代理类到文件"><a href="#输出-jdk-动态代理类到文件" class="headerlink" title="输出 jdk 动态代理类到文件"></a>输出 jdk 动态代理类到文件</h2><p>在测试代码的第一行增加下面这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>不同 <code>jdk</code> 版本的使用 <code>key</code> 可能不同，具体的 <code>key</code> 是什么可以查看 <code>ProxyGenerator</code> 类的 <code>saveGeneratedFiles</code> 属性， 比如 <code>jdk17</code> 版本 <code>ProxyGenerator</code> 类的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ProxyGenerator</span> <span class="keyword">extends</span> <span class="title class_">ClassWriter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">saveGeneratedFiles</span> <span class="operator">=</span></span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">GetBooleanAction</span>(</span><br><span class="line">                            <span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行完代码后在项目的根目录会输出动态代理类</p>
<p><a href="https://arthas.aliyun.com/doc/">arthas官方文档</a></p>
<h2 id="使用-arthas-输出-javaassist-生成的代理类"><a href="#使用-arthas-输出-javaassist-生成的代理类" class="headerlink" title="使用 arthas 输出 javaassist 生成的代理类"></a>使用 arthas 输出 javaassist 生成的代理类</h2><ol>
<li>先打端点，确定代理类的名称，比如有一个代理类名称是 <code>Hello$Adaptive</code></li>
<li>打开 <code>arthas</code> 选择对应的进程进入后，使用下面命令输出代理类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面命令找到对应代理类的全路径， 比如输出结果是 com.example.dubbodemo.spi.Hello$Adaptive</span></span><br><span class="line">sc *Hello$Adaptive*</span><br><span class="line"><span class="comment">// 根据上面找到的代理类的全路径，解析出源代码兵输出到特定的文件</span></span><br><span class="line">jad com.example.dubbodemo.spi.Hello$Adaptive &gt; D:\\Hello$Adaptive.java</span><br></pre></td></tr></table></figure>

<h2 id="输出-cglib-代理类到文件"><a href="#输出-cglib-代理类到文件" class="headerlink" title="输出 cglib 代理类到文件"></a>输出 cglib 代理类到文件</h2><p>在测试方法的第一行加上如下代码, 第二个参数就是指定输出的文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;D:\\temp\\cglib&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java内存模型</title>
    <url>/2023/08549388833c/index.html</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p><code>java</code>内存模型实际上是一个抽象的概念，是一套规范，而不是一个实际的东西，而<code>java</code>内存结构就是根据这一套规范来进行划分的。</p>
<span id="more"></span>

<p>对于<code>java</code>内存模型我们主要需要了解以下几个内容：</p>
<ul>
<li>硬件内存架构</li>
<li>线程和<code>jvm</code></li>
<li><code>java</code>内存模型</li>
<li><code>java</code>内存模型对并发编程的支持</li>
</ul>
<h2 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h2><blockquote>
<p>物理机遇到的并发问题与虚拟机中的情况有很多相似之处，物理机对并发的处理方案对虚拟机的实现也有相当大的参考意义</p>
</blockquote>
<p>在计算机模型中主要是有五个部分来组成的</p>
<ol>
<li>输入</li>
<li>寄存器</li>
<li>cpu<ol>
<li>处理器</li>
<li>控制器</li>
</ol>
</li>
<li>输出</li>
</ol>
<p>其中<strong>处理器</strong>和<strong>控制器</strong>合起来就是我们所示的<code>cpu</code></p>
<p>运算器的运算速度都是很快的，但是我们的数据存储不可能所有数据都存放在寄存器中，所以数据的<code>io</code>操作都是很有必要 的，这样就不能充分利用<code>cpu</code>的运算能力，此时就需要<strong>加上读写速度和处理器运算速度差不多的的高速缓存</strong>来作为<strong>内存和处理器之间</strong>的缓冲。将运算需要使用的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。</p>
<h3 id="缓存一致性问题"><a href="#缓存一致性问题" class="headerlink" title="缓存一致性问题"></a>缓存一致性问题</h3><p>上面加上了缓存可以解决内存的读写速度赶不上处理器的运算速度问题，但是又出现了另外一个问题。<strong>缓存一致性问题</strong></p>
<p>因为 在多处理器中，每一个处理器都有自己的高速缓存，但是内存是只有一个。对于缓存一致性问题在硬件层面主要有两个解决方式</p>
<ul>
<li><p>总线加锁</p>
<ul>
<li>所谓的总线加锁就每一次都会锁定一个<code>cpu</code>，只有这个锁定的<code>cpu</code>才可以执行，其余的<code>cpu</code>是不能执行的。这种方式会降低<code>cpu</code>的吞吐量。</li>
</ul>
</li>
<li><p>使用缓存一致性协议，所谓使用缓存一致性协议也就是在缓存和主内存之间加上一个访问规则，通过这种规则来解决缓存一致性问题。</p>
</li>
</ul>
<pre class="mermaid">graph LR
  A-->B
  subgraph A[处理器]
    direction TB
    A1[处理器1]~~~A2[处理器2]~~~A3[处理器3]
  end
  subgraph B[高速缓存]
    direction TB
    B1[缓存1]~~~B2[缓存2]~~~B3[缓存3]
  end
  B-->C
  C[缓存一致性]-->D[主内存]</pre>
<p>这里的<strong>缓存一致性其实是一个协议</strong>，是处理缓存一致性问题的一个协议(也可以任认为是处理缓存一致性问题的一个理论基础)。</p>
<h2 id="java内存模型-java-memory-mode"><a href="#java内存模型-java-memory-mode" class="headerlink" title="java内存模型(java memory mode)"></a>java内存模型(java memory mode)</h2><h3 id="什么是java内存模型-JMM规范"><a href="#什么是java内存模型-JMM规范" class="headerlink" title="什么是java内存模型(JMM规范)"></a>什么是<code>java</code>内存模型(JMM规范)</h3><p><strong><code>java</code>内存模型其实也是一个理论上的东西，是一个规范，这个规范的主要目的是定义程序中各种变量的访问规则，也就是关注的是虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。</strong>此处的变量和<code>java</code>编程中的变量是不同的，这里的变量包含了实例字段，静态字段和构成数组对象的元素，但是不包括局部变量和方法参数。（上面这段话是《深入理解java虚拟机》这本书中的）</p>
<p><code>jvm</code>将内存组织结构主要划分为两个部分</p>
<ul>
<li>主内存</li>
<li>工作内存</li>
</ul>
<pre class="mermaid">graph LR
  A-->B
  subgraph A[java线程]
    direction TB
    A1[线程1]~~~A2[线程2]~~~A3[线程3]
  end
  subgraph B[工作内存]
    direction TB
    B1[工作内存1]~~~B2[工作内存2]~~~B3[工作内存3]
  end
  B-->C
  C[save和load操作]-->D[主内存]</pre>

<h4 id="主内存"><a href="#主内存" class="headerlink" title="主内存"></a>主内存</h4><ul>
<li>主要包含本地方法区和堆</li>
<li>所有变量都要存储在主内存中，这些变量对于所有线程都是共享的</li>
</ul>
<h4 id="工作内存"><a href="#工作内存" class="headerlink" title="工作内存"></a>工作内存</h4><ul>
<li>每一个线程都有自己独立工作的地方，也就是工作内存</li>
<li>工作内存中保存的是主内存中某些变量的拷贝，线程堆变量的所有操作都必须在工作内存中进行，不能直接操作主内存</li>
<li><strong>如果是基本数据类型，那么直接分配到工作内存，如果是引用类型，引用的地址存在在工作空间中，但是具体的对象是存在在堆中(也就是主内存中)，是可以共享的</strong></li>
</ul>
<pre class="mermaid">graph LR
  subgraph B[java线程]
    direction BT
    B1[线程2]-->B2[工作内存2]
    B2-->B1
  end
  subgraph A[java线程]
    direction BT
    A1[线程1]-->A2[工作内存1]
    A2-->A1
  end
  C[主内存]
  A & B --> C
  C --> A & B</pre>

<p>看上图，之所以存在<code>java</code>内存模型一说是因为<code>java</code>虚拟机的工作机制。当有多个线程的时候，每一个线程可以操作的数据有两种类型</p>
<ul>
<li>线程私有的数据，也就是这个数据就算改变了也不会影响其余线程，比如说局部变量就是线程私有的数据</li>
<li>线程共享的数据，这样的数据多个线程都可以访问，就会出现线程安全的问题</li>
</ul>
<p>因为线程操作的数据有不同类型，所以在<code>java</code>中一个线程去操作数据的时候不是在主内存中直接操作，其实还有一个属于线程自己的内存(工作内存)，当操作线程私有的数据比较好理解，直接在工作内存中完成就可以咯，如果是操作共享的数据，那么就在主内存中拿一份数据到自己工作内存中操作，操作完了再将数据给到主内存中。</p>
<h3 id="内存结构和内存模型的关系"><a href="#内存结构和内存模型的关系" class="headerlink" title="内存结构和内存模型的关系"></a>内存结构和内存模型的关系</h3><p>上面说了什么是<code>java</code>的内存模型，知道<code>java</code>内存模型是一个规范，定义的是程序中变量的访问规则，那么这个内存模型和我们平时所有的内存结构有什么关系呢？先看一下<code>java</code>内存结构</p>
<h4 id="java内存结构"><a href="#java内存结构" class="headerlink" title="java内存结构"></a>java内存结构</h4><p><code>java</code>中内存结构主要是有五个部分</p>
<ul>
<li>程序计数器</li>
<li>堆</li>
<li>虚拟机栈<ul>
<li>存放方法运行时所需的数据，成为栈帧</li>
</ul>
</li>
<li>本地方法栈</li>
<li>方法区<ul>
<li>存储运行时常量池、已被虚拟机加载的类信息、常量、静态变量，即时编译后的代码等</li>
</ul>
</li>
</ul>
<p>上面<code>java</code>的五个部分其实就是根据<code>JMM</code>规范(<code>java</code>内存模型)来划分的一个内存结构。</p>
<h2 id="并发编程的三个特性"><a href="#并发编程的三个特性" class="headerlink" title="并发编程的三个特性"></a>并发编程的三个特性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>执行的操作不可分割，可以理解为就是一步操作，因为只有一步所以肯定是不能分割的</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>线程都是有自己的工作空间的，每一个线程都只能操作自己工作空间的数据，别的线程是看不到自己线程的工作空间的数据的</p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>程序中代码的顺序不一定就是在<code>cpu</code>中执行的顺序，因为存在两种重排</p>
<ul>
<li>编译重排序(编译期)</li>
<li>指令重排序(运行期)</li>
</ul>
<h2 id="JMM规范是如何保证并发编程的三个特征的呢"><a href="#JMM规范是如何保证并发编程的三个特征的呢" class="headerlink" title="JMM规范是如何保证并发编程的三个特征的呢"></a>JMM规范是如何保证并发编程的三个特征的呢</h2><h3 id="JMM和原子性"><a href="#JMM和原子性" class="headerlink" title="JMM和原子性"></a><code>JMM</code>和原子性</h3><h4 id="原子性案例1"><a href="#原子性案例1" class="headerlink" title="原子性案例1"></a>原子性案例1</h4><p><code>X = 10</code>这样一个操作具有原子性么？</p>
<ul>
<li>如果<code>X</code>是私有数据，是分配到工作空间的，那么就是有原子性的，因为只有一个写的操作</li>
<li>如果<code>X</code>是共享的数据，就是在主内存中，这样就需要先在主内存中读取(复制)到工作空间中，修改完成后再将数据通过到主内存中，这样就是两步，也就是没有原子性</li>
</ul>
<h4 id="原子性案例2"><a href="#原子性案例2" class="headerlink" title="原子性案例2"></a>原子性案例2</h4><p><code>i++</code>这个操作具有原子性么？</p>
<p><code>i++</code>这个操作其实是需要分为下面这几个步骤的</p>
<ul>
<li>读取<code>i</code>的值</li>
<li>将<code>i</code>的值加一</li>
<li>将修改后的值赋值给<code>i</code></li>
</ul>
<p>可以看到每一步都是原子操作，但是这三个原子操作合在一起之后去不是原子操作了</p>
<h4 id="JMM如何保证原子性的"><a href="#JMM如何保证原子性的" class="headerlink" title="JMM如何保证原子性的"></a>JMM如何保证原子性的</h4><ul>
<li>使用<code>Synchronized</code>关键字</li>
<li>使用<code>JUC</code>的<code>lock</code>和<code>unlock</code>关键字</li>
</ul>
<h3 id="JMM和可见性"><a href="#JMM和可见性" class="headerlink" title="JMM和可见性"></a><code>JMM</code>和可见性</h3><p>线程是不能操作主内存中的数据的，只能操作自己的工作空间的数据，所以需要数据时会先去工作空间找，如果找到了就会使用工作空间中的数据，找不到才会从主内存中找，但是如果一个线程在工作空间找到了，不过这个数据在别的线程中已经修改了，并且刷新到主内中了，由于当前线程的工作空间中有这个数据，没有在主内存中拿，这样当前线程拿到的就不是最新的数据。<code>JMM</code>是如何解决这个问题的呢？</p>
<h4 id="JMM如何保证可见性的"><a href="#JMM如何保证可见性的" class="headerlink" title="JMM如何保证可见性的"></a><code>JMM</code>如何保证可见性的</h4><ul>
<li><code>Volatile</code>关键字，使用这个关键字后，当线程需要使用这个关键字修饰的数据时，每一次都会从主内存中去找数据，而不是从工作空间中找。</li>
<li><code>JUC</code>  可以使用<code>JUC</code>的<code>lock</code>和<code>unlock</code></li>
</ul>
<h3 id="JMM和有序性-重排序"><a href="#JMM和有序性-重排序" class="headerlink" title="JMM和有序性(重排序)"></a><code>JMM</code>和有序性(重排序)</h3><p>对于有序性问题可以使用下面两种方式来解决</p>
<ul>
<li>使用<code>Volatile</code>关键字</li>
<li>使用<code>Synchronized</code>来加锁</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm垃圾回收</title>
    <url>/2023/63d242ce6cb3/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>以下内容参考《剑指JVM:虚拟机实践与性能调优》</p>
<blockquote>
<p>Java使用的是自动内存管理机制，有内存分配器和垃圾收集器来代为分配和回收内存。自动内存管理机制使开发人员无须参与内存的分配和回收,自动内存管理就像一个黑匣子,所以了解JVM的自动内存分配和垃圾收集机制就显得非常重要</p>
</blockquote>
<h2 id="哪些对象是垃圾"><a href="#哪些对象是垃圾" class="headerlink" title="哪些对象是垃圾"></a>哪些对象是垃圾</h2><p>既然是讲解垃圾回收，自然需要先弄清楚什么样的对象才是垃圾</p>
<h3 id="对象存活判断–引用计数法"><a href="#对象存活判断–引用计数法" class="headerlink" title="对象存活判断–引用计数法"></a>对象存活判断–引用计数法</h3><ol>
<li>引用计数算法比较简单，对每个对象保存一个整型的引用计数器属性，用于记录对象被引用的次数（实现方式）</li>
<li>引用计数算法的优点是实现简单，垃圾对象便于辨识，判定效率高，回收没有延迟性（优点）</li>
<li>每个对象需要单独的字段存储计数器，这样的做法增加了存储空间的开销（缺点）</li>
<li>引用计数器有一个严重的问题，即无法处理循环引用的情况（严重的缺点）</li>
</ol>
<h4 id="循环引用示例"><a href="#循环引用示例" class="headerlink" title="循环引用示例"></a>循环引用示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjOne</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ObjTwo objTwo;</span><br><span class="line">    <span class="comment">// 省略set，get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjTwo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ObjOne objOne;</span><br><span class="line">    <span class="comment">// 省略set，get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test &#123;</span><br><span class="line">    <span class="type">ObjOne</span> <span class="variable">objOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjOne</span>();</span><br><span class="line">    <span class="type">ObjTwo</span> <span class="variable">objTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjTwo</span>();</span><br><span class="line">    objOne.setObjTwo(objTwo);</span><br><span class="line">    objTwo.setObjOne(objOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码执行完成堆栈如果所示</p>
<pre class="mermaid">flowchart LR
  subgraph A[栈]
    A1["objOne"]
    A2["objTwo"]
  end
  subgraph B[堆]
    subgraph B1["ObjOne"]
      style B1 fill:#70b224
      B11[objTwo]
      style B11 fill:#f9f
    end
    subgraph B2["ObjTwo"]
      style B2 fill:#70b224
      B21[objOne]
      style B21 fill:#f9f
    end
    
    B11-->B21
    B21-->B11
  end
  A1-->B1
  A2-->B2</pre>
<p>当执行如下代码，堆栈引用情况会改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test &#123;</span><br><span class="line">    <span class="type">ObjOne</span> <span class="variable">objOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjOne</span>();</span><br><span class="line">    <span class="type">ObjTwo</span> <span class="variable">objTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjTwo</span>();</span><br><span class="line">    objOne.setObjTwo(objTwo);</span><br><span class="line">    objTwo.setObjOne(objOne);</span><br><span class="line">    objOne = <span class="literal">null</span>;</span><br><span class="line">    objTwo = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">flowchart LR
  subgraph A[栈]
    A1["objOne"]
    A2["objTwo"]
  end
  subgraph B[堆]
    subgraph B1["ObjOne"]
      style B1 fill:#70b224
      B11[objTwo]
      style B11 fill:#f9f
    end
    subgraph B2["ObjTwo"]
      style B2 fill:#70b224
      B21[objOne]
      style B21 fill:#f9f
    end
    
    B11-->B21
    B21-->B11
  end
  A1-. "X" .->B1
  A2-. "X" .->B2</pre>
<p>可以看到栈到堆中的引用虽然断开了，但是各自对象属性上面的连接依然没有断开</p>
<h3 id="对象存活判断–可达性分析算法"><a href="#对象存活判断–可达性分析算法" class="headerlink" title="对象存活判断–可达性分析算法"></a>对象存活判断–可达性分析算法</h3><ol>
<li>可达性分析算法是以 <code>GC Root</code> 为起始点，暗藏从上到下的方式搜索被跟对象集合所连接的对象是否可达</li>
</ol>
<h3 id="GC-Root-包含以下内容"><a href="#GC-Root-包含以下内容" class="headerlink" title="GC Root 包含以下内容"></a>GC Root 包含以下内容</h3><ol>
<li>虚拟机栈中对象的引用，比如，各个线程被调用的方法中使用到的引用数据类型的参数、局部变量等</li>
<li>本地方法栈内JNI（本地方法）对象的引用</li>
<li>方法区中引用数据类型的静态变量</li>
<li>方法区中常量对象的引用，比如字符串常量池<code>(String Table)</code>里的引用</li>
<li>所有被同步锁<code>synchronized</code>持有的对象引用</li>
<li><code>JVM</code>内部的引用。基本数据类型对应的Class对象引用，一些常驻的异常对象引用（如<code>NullPointerException</code>、<code>OutOfMemoryError</code>），系统类加载器对象引用等</li>
</ol>
<h2 id="垃圾回收的区域"><a href="#垃圾回收的区域" class="headerlink" title="垃圾回收的区域"></a>垃圾回收的区域</h2><p>根据 <ol><li><a href="/2023/70e7b048ccf4/index.html" title="jvm运行时内存区域">jvm运行时内存区域</a></li></ol> 可知，<code>jvm</code>运行时数据区主要包含两大类</p>
<ol>
<li>线程私有的区域： 程序计数器，本地方法栈，虚拟机栈</li>
<li>线程共享的区域： 方法区，堆<br>对于线程私有的区域是不需要垃圾回收的，因为当线程执行完成之后，线程中使用的内存会自动回收掉，<code>jvm</code>垃圾回收只需要关注 <strong>方法区</strong>和 <strong>堆</strong>即可，重点是 <strong>堆</strong></li>
</ol>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>在 <code>jvm</code> 中，垃圾收集算法主要包含以下三种</p>
<ol>
<li>标记-清除算法</li>
<li>复制算法</li>
<li>标记压缩算法</li>
</ol>
<p>三种算法主要解决了将垃圾标记出来之后如何清除的问题，三种算法各有利弊，单独采用其中任何一种算法，都不能取得很好的效果。所以在JVM中，会针对内存的不同区域采用不同的垃圾收集算法，这就是分代算法</p>
<h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><ol>
<li>标记：垃圾收集器从引用根节点开始遍历，标记所有被引用的对象</li>
<li>清除：垃圾收集器对堆内存从头到尾进行线性遍历，如果发现某个对象为不可达对象，则将其回收</li>
</ol>
<p>优点：</p>
<ol>
<li>标记-清除算法的优点是简单、容易实现，而且不需要移动对象</li>
</ol>
<p>缺点：</p>
<ol>
<li>在进行<code>GC</code>的时候，需要停止整个应用程序，导致用户体验差</li>
<li>这种方式清理出来的空闲内存是不连续的，会产生内存碎片</li>
<li>该算法清除对象并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里，下次有新对象申请内存时，判断某块内存空间是否充足，如果充足，新的对象将会覆盖原来标记为垃圾的对象，从而实现内存的重复使用。但是因为可用内存不连续问题，在大对象申请内存时，需要花费更多时间去找寻合适的位置，甚至失败。所以标记-清除算法效率不高，且内存利用率低下，甚至有些内存碎片无法重复利用</li>
</ol>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ol>
<li>核心思想是将内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象。两块内存交替使用，从而完成垃圾对象的回收</li>
<li>复制算法没有标记和清除过程，实现简单，运行高效。内存从一块空间复制到另一块空间可以保证空间的连续性，不会出现内存碎片问题。但是复制算法需要双倍内存空间</li>
<li>复制算法需要移动对象，这就涉及修改对象引用地址值的问题</li>
<li>如果系统中的垃圾对象很少，复制算法不会很理想。因为复制算法需要复制的存活对象数量变大，使得垃圾回收器的运行效率变低</li>
</ol>
<h3 id="标记-压缩算法"><a href="#标记-压缩算法" class="headerlink" title="标记-压缩算法"></a>标记-压缩算法</h3><p>标记-压缩算法清除垃圾对象的过程</p>
<ol>
<li>第一阶段和标记–清除算法一样，从根节点开始标记所有被引用对象</li>
<li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放</li>
<li>第三阶段清理边界外所有的空间</li>
</ol>
<p>标记–压缩算法的最终效果等同于标记–清除算法执行完成后，再进行一次内存碎片整理</p>
<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><ol>
<li>在程序中，不同的对象的生命周期是不同的，有些对象的生命周期很长，有些对象是朝生夕死的，因此在 <code>HotSpot</code> 的 <code>jvm</code> 中，将 <code>Java</code> 堆分为 <strong>新生代</strong> 和 <strong>老年代</strong>，生命周期较长的对象进入老年代，生命周期较短的一般放入新生代</li>
</ol>
<h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><ol>
<li>新生代特点是区域相对老年代较小，对象生命周期短、存活率低、回收频繁</li>
<li>复制算法的效率只和当前存活对象数量大小有关，结合新生代的特点，新生代使用复制算法，速度最快、效率也最高</li>
<li><code>HotSpot</code> 将新生代空间分成三个区域<ol>
<li>Eden(默认占80%)</li>
<li>From(默认占10%)</li>
<li>To(默认占10%)</li>
</ol>
</li>
</ol>
<p>每次新生代发生<code>GC</code>时，把<code>Eden</code>区和上次幸存区中在本次<code>GC</code>仍然存活的对象复制到另一个幸存区，幸存区在<code>From</code>区和<code>To</code>区之间切换，总有一块空间为空，从而解决内存利用率低的问题</p>
<h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><ol>
<li>老年代特点是区域较大，对象生命周期长、存活率高，回收不及新生代频繁。因为存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记–清除或者标记–清除与标记–压缩的混合实现</li>
</ol>
<h2 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h2><ol>
<li>上述现有的算法，在垃圾回收过程中，应用软件将处于一种<code>STW(Stop The World)</code>的状态。在<code>STW</code>状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性</li>
<li>增量收集基本思想是如果一次性将所有的垃圾进行处理，会造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成</li>
<li>增量收集算法的基础仍是传统的标记–清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允</li>
<li>许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</li>
</ol>
<h2 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h2><ol>
<li>分代算法按照对象的生命周期长短将堆空间划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间(<code>region</code>)</li>
<li>在相同条件下，堆空间越大，一次<code>GC</code>所需要的时间就越长，有关<code>GC</code>产生的停顿也就越长。为了更好地控制<code>GC</code>产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次<code>GC</code>所产生的停顿</li>
</ol>
<h2 id="垃圾回收相关概念理解"><a href="#垃圾回收相关概念理解" class="headerlink" title="垃圾回收相关概念理解"></a>垃圾回收相关概念理解</h2><h3 id="STW-Stop-the-world"><a href="#STW-Stop-the-world" class="headerlink" title="STW(Stop the world)"></a>STW(Stop the world)</h3><ol>
<li>在垃圾回收过程中，整个应用程序都会暂停，没有任何响应，所以被形象地称为<code>“Stop-The-World”</code>，简称<code>STW</code></li>
<li>可达性分析算法中枚举根节点(<code>GC Roots</code>)造成<code>STW</code>，原因是如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证。所以分析工作必须在一个能确保一致性的快照中进行</li>
</ol>
<h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><ol>
<li>在垃圾回收过程中，应用程序会发生 <code>STW</code> 现象, 但是应用程序在执行过程中，并不是在任意位置都适合停顿下来进行<code>GC</code>的，只有在特定的位置才能停顿下来进行<code>GC</code>操作，这些特定的位置被称为安全点(<code>Safe Point</code>)</li>
</ol>
<h4 id="哪些位置是安全点"><a href="#哪些位置是安全点" class="headerlink" title="哪些位置是安全点"></a>哪些位置是安全点</h4><ol>
<li>安全点太少可能导致<code>GC</code>等待的时间太长，如果安全点太密可能导致运行时的性能问题</li>
<li>通常选择一些运行时间较长的指令位置作为安全点，例如方法调用、循环跳转等</li>
</ol>
<h4 id="GC-发生时如何保证应用线程都在安全点上"><a href="#GC-发生时如何保证应用线程都在安全点上" class="headerlink" title="GC 发生时如何保证应用线程都在安全点上"></a>GC 发生时如何保证应用线程都在安全点上</h4><p><strong>抢先式中断</strong><br><code>GC</code>抢先中断所有线程。如果发现某个线程不在安全点，就重新恢复该线程，让线程跑到安全点【这种方式不是应用程序主导，而是 <code>GC</code> 线程主导，所以没有使用】</p>
<p><strong>主动式中断</strong><br><code>GC</code>线程给自己设置一个中断标志，各个应用线程运行到安全点的时候主动轮询这个标志，如果此时<code>GC</code>线程的中断标志为真，则将自己中断挂起。这种方式的好处是由应用程序在安全点主动发起中断，而不会出现被迫在非安全点的位置先中断的情况</p>
<h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><ol>
<li>安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入<code>GC</code>的安全点, 如果应用线程被阻塞了又该如何处理？—这就需要通过引入 <strong>安全区域</strong> 来解决</li>
<li>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始<code>GC</code>都是安全的</li>
<li>当线程运行安全区域的代码时，首先标识已经进入了安全区域，如果这段时间内发生<code>GC</code>,<code>JVM</code>会忽略标识为安全区域状态的线程</li>
<li>当线程即将离开安全区域时，会检查<code>JVM</code>是否已经完成<code>GC</code>，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开安全区域的信号为止</li>
</ol>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="垃圾收集器的分类"><a href="#垃圾收集器的分类" class="headerlink" title="垃圾收集器的分类"></a>垃圾收集器的分类</h3><p>前面讲解垃圾收集算法时提到 <code>HotSpot</code> 虚拟机中使用了分代垃圾收集思想，对应的根据垃圾收集器工作的内存区间不同，可分为新生代垃圾收集器，老年代垃圾收集器和整堆垃圾收集器</p>
<pre class="mermaid">flowchart LR
    subgraph A["新生代"]
        A1["Serial GC"]
        A2["Parallel Scavenge GC"]
        A3["ParNew GC"]
        A4["G1 GC"]
    end
    subgraph B["新生代"]
        B1["Serial Old GC"]
        B2["Parallel Old GC"]
        B3["CMS GC"]
        B4["G1 GC"]
    end</pre>

<h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><ol>
<li><code>Serial</code> 采用的是<strong>复制算法</strong>、<strong>串行回收</strong>和<code>STW</code>机制的方式执行内存回收</li>
<li><code>Serial</code> 用于回收 <strong>新生代</strong></li>
<li><code>Serial</code>收集器作为<code>HotSpot</code>中<code>Client</code>模式下的默认新生代垃圾收集器</li>
</ol>
<h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><ol>
<li><code>Serial Old</code> 用于回收 <strong>老年代</strong></li>
<li><code>Serial Old</code>收集器同样采用了<strong>串行回收</strong>和<code>STW</code>机制，只不过内存回收算法使用的是<strong>标记—压缩算法</strong></li>
<li><code>Serial Old</code>是运行在<code>Client</code>模式下默认的老年代的垃圾收集器</li>
<li><code>Serial Old</code>在<code>Server</code>模式下主要有两个用途<ol>
<li>与新生代的<code>Parallel Scavenge</code>垃圾收集器搭配</li>
<li>作为老年代<code>CMS</code>收集器的后备方案</li>
</ol>
</li>
</ol>
<h3 id="Serial-Serial-Old垃圾收集器过程图"><a href="#Serial-Serial-Old垃圾收集器过程图" class="headerlink" title="Serial&#x2F;Serial Old垃圾收集器过程图"></a>Serial&#x2F;Serial Old垃圾收集器过程图</h3><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311262309313.webp" alt="Serial"></p>
<h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><ol>
<li><code>CMS</code>主要适合场景是对响应时间的需求大于对吞吐量的要求。它是HotSpot虚拟机中第一款真正意义上的并发收集器，第一次实现了让垃圾收集线程与用户线程同时工作</li>
<li><code>CMS</code>的垃圾收集算法采用<strong>标记–清除算法</strong>，也会<code>STW</code></li>
<li><code>CMS</code>作为老年代的收集器，无法与新生代收集器<code>Parallel Scavenge</code>配合工作，所以使用<code>CMS</code>收集老年代时，新生代只能选择<code>ParNew</code>或者<code>Serial</code>收集器中的一个</li>
<li><code>JDK9</code> 中 <code>G1</code> 变成了默认的垃圾收集器，替换了 <code>CMS</code></li>
<li><code>JDK14</code> 中，彻底移除了 <code>CMS</code> 垃圾收集器</li>
</ol>
<h3 id="CMS-垃圾回收过程"><a href="#CMS-垃圾回收过程" class="headerlink" title="CMS 垃圾回收过程"></a>CMS 垃圾回收过程</h3><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311262316564.webp" alt="CMS垃圾回收过程"></p>
<ol>
<li>初始标记： 该阶段的主要任务仅仅只是标记出<code>GC Roots</code>能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快</li>
<li>并发标记： 从<code>GC Roots</code>的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行</li>
<li>重新标记(<code>Remark</code>): 由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要一次重新标记操作</li>
<li>并发清除： 此阶段清理已经被标记为死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li>
</ol>
<h3 id="CMS-垃圾收集器的缺点"><a href="#CMS-垃圾收集器的缺点" class="headerlink" title="CMS 垃圾收集器的缺点"></a>CMS 垃圾收集器的缺点</h3><ol>
<li>由于使用的是标记-清除算法，因此会产生内存碎片（为什么不使用整理算法呢–因为要保证垃圾收集和用户线程同时运行，所以用户线程所需的资源就不能移动位置，标记整理算法需要移动对象位置）</li>
<li>对<code>CPU</code>资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低</li>
<li>由于在垃圾收集阶段用户线程没有中断，要是<code>CMS</code>运行期间预留的内存无法满足程序需要，就会出现一次<code>“Concurrent Mode Failure”</code>失败而导致另一次<code>Full GC</code>的产生</li>
<li>无法处理<strong>浮动垃圾</strong>,在并发清除阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发清除阶段如果产生新的垃圾对象，<code>CMS</code>将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收</li>
</ol>
<h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><p><strong>为什么需要 G1 垃圾收集器</strong><br>为了实现在应用程序运行环境内存不断扩大，处理器数量不断增加的情况下，进一步降低停顿时间，同时还能兼顾良好的吞吐量的目标</p>
<p><strong>G1 垃圾收集器的工作方式</strong><br><code>G1</code>有计划地避免在整个<code>Java</code>堆中进行全区域的垃圾收集。<code>G1</code>跟踪各个<code>Region</code>里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的<code>Region</code></p>
<p><strong>G1 垃圾收集器的使用场景</strong><br><code>G1</code>是一款面向服务端应用的垃圾收集器，主要针对配备多核<code>CPU</code>及大容量内存的机器，极大可能降低垃圾回收停顿时间的同时，还兼具高吞吐量的性能特征</p>
<h3 id="G1-垃圾收集器收集垃圾过程"><a href="#G1-垃圾收集器收集垃圾过程" class="headerlink" title="G1 垃圾收集器收集垃圾过程"></a>G1 垃圾收集器收集垃圾过程</h3><p><code>G1</code> 可以作用于整个新生代和老年代，垃圾回收过程如下</p>
<ol>
<li>新生代GC</li>
<li>老年代并发标记</li>
<li>混合回收</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm执行引擎</title>
    <url>/2023/a18206d79e08/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="执行引擎的作用"><a href="#执行引擎的作用" class="headerlink" title="执行引擎的作用"></a>执行引擎的作用</h2><pre class="mermaid">flowchart TB
    A["java源代码(.java文件)"]
    B["class字节码文件"]
    C["内存(放入jvm方法区)"]
        subgraph D["执行引擎"]
            subgraph D1["编译器"]
                D11["Client Compiler"]
                D12["Server Compiler"]
            end
        end
    E["机器码"]

    A--"javac编译器"-->B
    B--"类加载器"-->C
    C-->D
    D--解释执行-->E
    D--"编译执行(JIT)"-->E</pre>
<h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><ol>
<li><code>Java</code>程序可以通过编译器将源码编译成<code>Java</code>字节码，特定平台上的虚拟机将字节码转译为可以直接执行的机器码，也就实现了跨平台性</li>
<li>字节码主要为了实现特定软件运行和软件环境，与硬件环境无关</li>
</ol>
<h2 id="即时编译器-JIT-的作用"><a href="#即时编译器-JIT-的作用" class="headerlink" title="即时编译器(JIT)的作用"></a>即时编译器(JIT)的作用</h2><ol>
<li>即时编译器在最初的 <code>jvm</code> 中是没有的，没有的原因就是 <code>jvm</code> 设计的初衷是为了满足 <code>Java</code> 程序实现跨平台的特性，所以避免采用静态编译的方式直接生成机器码，所以采用了解释器在运行时逐行解释字节码执行程序</li>
<li><code>JIT</code>编译器的作用就是虚拟机将字节码直接编译成机器码</li>
<li><strong>无论是采用解释器进行解释执行，还是采用即时编译器进行编译执行，最终字节码都是需要被转换成对应平台的机器码</strong></li>
</ol>
<h2 id="为何HotSpot虚拟机要使用解释器与编译器并存的架构"><a href="#为何HotSpot虚拟机要使用解释器与编译器并存的架构" class="headerlink" title="为何HotSpot虚拟机要使用解释器与编译器并存的架构"></a>为何HotSpot虚拟机要使用解释器与编译器并存的架构</h2><p>因为解释器和编译器各有优势</p>
<ol>
<li>程序启动后，解释器可以立即发挥作用，省去编译的时间，立即执行。编译器想要发挥作用，将代码编译成机器码，需要一定的执行时间，但是编译为机器码之后，执行效率更高</li>
<li>当程序的运行环境中内存资源较大(比如嵌入式系统)时，解释执行可以更节约内存</li>
</ol>
<h2 id="为何HotSpot虚拟机要实现两个不同的即时编译器"><a href="#为何HotSpot虚拟机要实现两个不同的即时编译器" class="headerlink" title="为何HotSpot虚拟机要实现两个不同的即时编译器"></a>为何HotSpot虚拟机要实现两个不同的即时编译器</h2><p><code>HotSpot</code> 虚拟机包含两个即时编译器</p>
<ol>
<li><code>Client Compile</code>， 也叫做 <code>c1</code> 编译器</li>
<li><code>Server Compile</code>，也叫做 <code>c2</code> 编译器</li>
</ol>
<p><code>HotSpot</code> 虚拟机默认采用解释器和其中一个编译器配合的方式工作，程序使用哪个编译器，取决于虚拟机运行的模式</p>
<p>通过 <code>-client</code> 参数可以指定 <code>jvm</code> 运行在 <code>Client</code> 模式下，并使用 <code>c1</code> 编译器，<code>c1</code> 编译器会对字节码进行简单和可靠的优化，耗时短，达到更快的编译速度</p>
<p>通过 <code>-server</code> 参数可以指定 <code>jvm</code> 运行在 <code>Server</code> 模式下，并使用 <code>c2</code> 编译器，<code>c2</code> 会进行耗时较长的优化，以及激进优化，但优化的代码执行效率更高</p>
<p>实施分层编译后，<code>Client Compiler</code>和<code>Server Compiler</code>将会同时工作，许多代码都可能会被多次编译，用<code>Client Compiler</code>获取更高的编译速度，用<code>Server Compiler</code>来获取更好的编译质量，在解释执行的时候也无须再承担收集性能监控信息的任务</p>
<h2 id="程序何时使用解释器执行？何时使用编译器执行？"><a href="#程序何时使用解释器执行？何时使用编译器执行？" class="headerlink" title="程序何时使用解释器执行？何时使用编译器执行？"></a>程序何时使用解释器执行？何时使用编译器执行？</h2><p>在运行过程中会被即时编译器编译的 <strong>热点代码</strong>包含两类</p>
<ol>
<li>被<strong>多次</strong>调用的方法</li>
<li>被<strong>多次</strong>执行的循环体</li>
</ol>
<h3 id="热点探测"><a href="#热点探测" class="headerlink" title="热点探测"></a>热点探测</h3><p>无论是基于多次调用的方法还是多次执行的循环体，都强调多次，具体多少次算多次呢？ 在 <code>HotSpot</code> 中是使用 <strong>基于计数器的热点探测</strong> 方式来判断执行的次数的，在 <code>HotSpot</code> 虚拟机中为每个方法准备了两类计数器，这两类计数器都有确定的阈值，当技术器超过阈值了，就会触发 <code>JIT</code> 编译</p>
<ol>
<li>方法调用计数器： 用来统计方法调用的次数，可以通过参数 <code>-XX:CompileThreshold</code> 来认为设置阈值</li>
<li>回边计数器： 用来统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为 <strong>回边</strong></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm运行时内存区域</title>
    <url>/2023/70e7b048ccf4/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>
以下内容参考《剑指JVM:虚拟机实践与性能调优》

<h2 id="JVM-整体结构"><a href="#JVM-整体结构" class="headerlink" title="JVM 整体结构"></a>JVM 整体结构</h2><ol>
<li><code>JVM</code> 在程序执行期间把它所管理的内存分为若干个不同的数据区域</li>
<li><code>JVM</code> 内存布局规定了 <code>Java</code> 在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行</li>
<li>线程私有区域： 虚拟机栈，本地方法栈，程序计数器</li>
<li>线程共享区域： 堆，方法区</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311222254661.png" alt="jvm 整体结构"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><h3 id="程序计数器相关概念"><a href="#程序计数器相关概念" class="headerlink" title="程序计数器相关概念"></a>程序计数器相关概念</h3><ol>
<li>程序计数器中的寄存器并非是广义上所指的物理寄存器，JVM中的程序计数器是对物理寄存器的一种抽象模拟</li>
<li>JVM中的程序计数器英文全称是 Program Counter Register</li>
<li>程序计数器既没有垃圾回收也没有内存溢出</li>
<li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地(Native)方法，这个计数器值则应为空(Undefined)</li>
<li>每一个线程都有一个程序计数器（程序计数器和寄存器是两个概念）</li>
</ol>
<h3 id="为什么需要程序计数器"><a href="#为什么需要程序计数器" class="headerlink" title="为什么需要程序计数器"></a>为什么需要程序计数器</h3><p>因为CPU需要不停地切换各个线程，切换回来以后，就需要知道接着从哪里开始继续执行。JVM的字节码解释器通过改变程序计数器的值，来明确下一条应该执行什么样的字节码指令</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ol>
<li>每个线程在创建时都会创建一个虚拟机栈，其内部由许多栈帧(Stack Frame)构成，每个栈帧对应着一个Java方法的调用</li>
<li>每个方法被执行的时候，JVM都会同步创建一个栈帧用于存储<strong>局部变量表、操作数栈、动态链接、方法出口</strong>等信息</li>
</ol>
<h3 id="栈帧-栈的存储单位"><a href="#栈帧-栈的存储单位" class="headerlink" title="栈帧-栈的存储单位"></a>栈帧-栈的存储单位</h3><ol>
<li>每个线程上正在执行的每个方法都各自对应一个栈帧</li>
</ol>
<h3 id="栈帧中存储的内容"><a href="#栈帧中存储的内容" class="headerlink" title="栈帧中存储的内容"></a>栈帧中存储的内容</h3><pre class="mermaid">flowchart TB
  subgraph A[栈]
    subgraph B[栈帧]
      direction LR
        B1[局部变量表]
        B2[方法返回值]
        B3[操作数栈]
        B4[动态链接]
        B5["附加信息\n比如对程序调试相关信息"]
        B1~~~B2~~~B3~~~B4~~~B5
    end
    subgraph C[栈帧]
      direction LR
        C1[局部变量表]
        C2[方法返回值]
        C3[操作数栈]
        C4[动态链接]
        C5["附加信息\n比如对程序调试相关信息"]
        C1~~~C2~~~C3~~~C4~~~C5
    end
  end</pre>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ol>
<li>局部变量表是一个数组</li>
<li>局部变量表的作用是存储方法参数和定义在方法体内的局部变量<ol>
<li>局部变量数据类型可以是基本数据类型，对象引用(存储的是指向对象的引用)</li>
</ol>
</li>
<li>局部变量表的大小在编译器确定，方法运行期间不会大概局部变量表的大小</li>
</ol>
<h5 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h5><ol>
<li>局部变量表达存储单元是 <code>slot</code></li>
<li>32 位以内的类型只占用一个 <code>slot</code>， 64 位的类型（<code>long</code> 和 <code>double</code> ）占用两个 <code>slot</code></li>
<li><code>byte，short，char</code> 在存储前会被转换成 <code>int</code></li>
<li><code>JVM</code> 会为局部变量表中的每一个 <code>slot</code> 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</li>
</ol>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><ol>
<li>操作数栈主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</li>
<li>每一个操作数栈都拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 <code>Code</code> 属性中的<code>Maximum stack size</code>数据项中</li>
<li>操作数栈只能通过入栈(<code>push</code>)和出栈(<code>pop</code>)操作来完成一次数据访问</li>
</ol>
<h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><ol>
<li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接</li>
<li>动态链接的目的是在 <code>jvm</code> 加载了字节码文件，将类数据加载到内存之后，可以将字节码文件中记录的符号引用转换位为调用方法的直接引用</li>
</ol>
<h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><ol>
<li>方法返回地址存储的是调用该方法的程序计数器的值</li>
<li>方法正常退出时，调用者的程序计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址</li>
<li>方法正常退出时，调用者的程序计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址</li>
</ol>
<h2 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h2><ol>
<li>前面讲解的 <strong>栈</strong> 解决的是程序的运行问题，即程序是如何运行，如何处理数据的，但是数据从哪里来呢？ 这就涉及到下面要讲的堆</li>
<li>堆是存储的单位，堆解决的是数据存储的问题，即数据怎么放、放在哪儿</li>
</ol>
<h3 id="堆空间的划分"><a href="#堆空间的划分" class="headerlink" title="堆空间的划分"></a>堆空间的划分</h3><pre class="mermaid">flowchart LR
  subgraph A[堆]
    subgraph B[新生代]
      B1["\nEden\n\n"]
      B2["\nfrom\n\n"]
      B3["\nto\n\n"]
      B1~~~B2~~~B3
    end
    subgraph C["\n\n\n &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp老年代&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n\n\n\n"]
    end
  end</pre>

<ol>
<li>堆空间可以通过参数 <code>-Xms</code>(代表堆最小值) 和 <code>-Xmx</code> （代表堆空间最大值）来设置</li>
<li>新生代与老年代的空间比例可以通过 <code>-XX:NewRatio=4</code> 参数来设置，这个案例代表，新生代占比1，老年代占比4，新生代占整个堆的 1&#x2F;5</li>
<li><code>Eden</code> 区和两个 <code>Survivor</code> 区默认的比例是 8:1:1, 可以通过参数 <code>-XX:SurvivorRatio=8</code> 来显示设置比例， 如果 <code>-XX:SurvivorRatio=5</code> 代表 <code>Eden</code> 和两个 <code>Survivor</code> 区占比为 5:1:1</li>
</ol>
<h3 id="对象内存分配过程"><a href="#对象内存分配过程" class="headerlink" title="对象内存分配过程"></a>对象内存分配过程</h3><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311232258657.png" alt="对象内存分配过程"></p>
<h3 id="TLAB"><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h3><ol>
<li>堆中还有一部分区域是线程私有，这部分区域称为线程本地分配缓存区(<code>Thread Local Allocation Buffer,TLAB</code>)</li>
<li><code>TLAB</code> 表示<code>JVM</code>为每个线程分配了一个私有缓存区域，这块缓存区域包含在<code>Eden</code>区内</li>
<li>可以通过参数  <code>-XX:+/-UseTLAB</code> 来设置是否开启 <code>TLAB</code> 功能</li>
<li>可以通过参数 <code>-XX:TLABWasteTargetPercent</code> 开设置 <code>TLAB</code> 占用 <code>Eden</code> 区域的大小，默认是占用 1%</li>
<li>对象在<code>TLAB</code>空间分配内存失败时，<code>JVM</code>就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在<code>Eden</code>区中分配内存</li>
</ol>
<h4 id="使用-TLAB-的原因"><a href="#使用-TLAB-的原因" class="headerlink" title="使用 TLAB 的原因"></a>使用 TLAB 的原因</h4><ol>
<li>堆区是线程共享区域，对象实例的创建在<code>JVM</code>中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li>
<li>避免多个线程操作同一地址，就需要使用加锁等机制，但是加锁会影响分配速度</li>
</ol>
<h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>逃逸分析是指：当一个对象在方法中创建后，若对象只是在方法内部使用，则认为对象没有发生逃逸，若这个对象被方法外部使用，则认为发生了逃逸</p>
<h4 id="逃逸分析之同步省略"><a href="#逃逸分析之同步省略" class="headerlink" title="逃逸分析之同步省略"></a>逃逸分析之同步省略</h4><p>遇到同步代码块时，<code>JIT</code>编译器可以借助逃逸分析，来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程, 如果没有被发布到其它线程，<code>JIT</code> 编译器在编译同步代码块时会取消堆这部分代码的同步</p>
<h4 id="逃逸分析之栈上分配"><a href="#逃逸分析之栈上分配" class="headerlink" title="逃逸分析之栈上分配"></a>逃逸分析之栈上分配</h4><p><code>JIT(Just In Time)</code>编译器在编译期间根据逃逸分析的结果，发现如果一个对象没有逃逸出方法的话，就可能被优化成栈上分配</p>
<h4 id="逃逸分析之标量替换"><a href="#逃逸分析之标量替换" class="headerlink" title="逃逸分析之标量替换"></a>逃逸分析之标量替换</h4><p>标量<code>(Scalar)</code>是指一个无法再分解成更小数据的数据。<code>Java</code>中的原始数据类型就是标量。相对的，那些还可以分解的数据叫作聚合量<code>(Aggregate)</code>，<code>Java</code>中的对象就是聚合量，因为它可以分解成其他聚合量和标量。在<code>JIT</code>编译器的编译阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过<code>JIT</code>优化，就会把这个对象拆解成若干个成员变量。这个过程就是标量替换</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h3 id="方法区-栈和堆三者之间的关系"><a href="#方法区-栈和堆三者之间的关系" class="headerlink" title="方法区, 栈和堆三者之间的关系"></a>方法区, 栈和堆三者之间的关系</h3><p>以下面代码为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure>
<ol>
<li><code>Student</code> 这个 <code>class</code> 运行时会存储到方法区</li>
<li><code>student</code> 引用变量会存储在栈区</li>
<li><code>new Student()</code> 对象是存放在堆区</li>
</ol>
<h3 id="jdk-中方法区的变化"><a href="#jdk-中方法区的变化" class="headerlink" title="jdk 中方法区的变化"></a>jdk 中方法区的变化</h3><ol>
<li>在 <code>jdk7</code> 之前，将方法区称为永久代，在 <code>jdk8</code> 中，方法区变成了 <strong>元空间</strong></li>
<li>永久代在逻辑上属于堆的一部分，但是物理存储上不是在堆中，所以永久代也叫做 <strong>非堆</strong><ol>
<li>通过<code>-XX:PermSize</code>参数设置永久代初始分配空间</li>
<li>通过<code>-XX:MaxPermSize</code>参数设置永久代最大可分配空间。32位机器默认是64MB,64位机器模式是82MB</li>
<li>当空间不足时会出现 <code>java.lang.OutOfMemoryError:PermGen space</code></li>
</ol>
</li>
<li>元空间是使用本地内存实现，只要物理内存还有容量，就不会有内存溢出的问题<ol>
<li>元空间大小可以使用参数<code>-XX:MetaspaceSize</code>和<code>-XX:MaxMetaspaceSize</code>指定，替代<code>JDK7</code>中的永久代的初始值和最大值</li>
<li>当空间不足时会出现 <code>java.lang.OutOfMemoryError:Metaspace</code></li>
</ol>
</li>
</ol>
<h3 id="方法区中存储的内容"><a href="#方法区中存储的内容" class="headerlink" title="方法区中存储的内容"></a>方法区中存储的内容</h3><ol>
<li><code>java</code> 源代码编译之后会生成 <code>class</code> 文件，经过类加载器把 <code>class</code> 文件中内容加载到 <code>jvm</code> 运行时数据区</li>
<li><code>class</code> 文件中的一部分信息会加载到方法区，主要包含的内容如下图</li>
</ol>
<pre class="mermaid">flowchart TB
  subgraph A[方法区存储的内容]
    A1[类型信息]
    A11["类class，接口interface,枚举enmu，annotaion"]
    A1-->A11

    A2[运行时常量池]
    A21["class文件中有个constant pool,\n当class文件被加载到内存之后，方法区也\n会存放class文件的常量池相关信息，\n此时class文件的常量池就变成了方法区的运行时常量池"]
    A22["运行时常量池相对于class文件常量池的\n另外一个重要特征是具备动态性,\n运行期间也可以将新的常量使用intern()放入池中"]
    A2-->A21 & A22

    A3[静态变量]
    A31["jdk7之前类变量也是方法区的一部分"]
    A32["jdk7及以后类变量放在了堆空间"]
    A3-->A31 & A32

    A4[JIT代码缓存]

    A5[域信息]
    A51["域相关信息包含域名称，类型，\n域修饰符(public，private，proteced,static,final,volatile)"]
    A5-->A51

    A6["方法信息,包含以下内容"]
    A61["方法的返回类型（或void）"]
    A62["方法参数的数量和类型"]
    A63["方法的修饰符(public，private等)"]
    A64["方法的字节码，操作数栈深度，局部变量表大小"]
    A65["异常表"]
    A6-->A61 & A62 & A63 & A64 & A65
  end</pre>
<h3 id="不同版本jdk方法区的内容"><a href="#不同版本jdk方法区的内容" class="headerlink" title="不同版本jdk方法区的内容"></a>不同版本jdk方法区的内容</h3><h4 id="jdk6-方法区"><a href="#jdk6-方法区" class="headerlink" title="jdk6 方法区"></a>jdk6 方法区</h4><pre class="mermaid">flowchart LR
    subgraph A[方法区和堆]
        subgraph A1["方法区(永久代PermGen实现)"]
            subgraph A11["运行时常量池"]
                A111["字符串常量池"]
            end
            A12["类型信息"]
            A13["域信息"]
            A14["方法信息"]
            A15["JIT代码缓存"]
            A16["静态变量"]
            A11~~~A12~~~A13~~~A14~~~A15~~~A16
        end
        A2["\n\n\n &nbsp;&nbsp; 堆 &nbsp;&nbsp; \n\n\n"]
    end</pre>

<h4 id="jdk7-方法区"><a href="#jdk7-方法区" class="headerlink" title="jdk7 方法区"></a>jdk7 方法区</h4><pre class="mermaid">flowchart LR
    subgraph A[方法区和堆]
        subgraph A1["方法区(永久代PermGen实现)"]
            A11["运行时常量池"]
            A12["类型信息"]
            A13["域信息"]
            A14["方法信息"]
            A15["JIT代码缓存"]
            A11~~~A12~~~A13~~~A14~~~A15
        end
        subgraph A2["堆"]
            A21["字符串常量池"]
            A22["静态变量"]
            A21~~~A22
        end
    end</pre>
<h4 id="jdk8-方法区"><a href="#jdk8-方法区" class="headerlink" title="jdk8 方法区"></a>jdk8 方法区</h4><pre class="mermaid">flowchart LR
    subgraph A[方法区和堆]
        subgraph A1["方法区(元空间Metaspace实现)"]
            A11["运行时常量池"]
            A12["类型信息"]
            A13["域信息"]
            A14["方法信息"]
            A15["JIT代码缓存"]
            A11~~~A12~~~A13~~~A14~~~A15
        end
        subgraph A2[堆]
            A21["方法区(逻辑上\n是堆的一部分，\n实际不在堆里面)"]
            subgraph A22[实际堆]
                A221["静态变量"]
                A222["字符串常量池"]
            end
            A21~~~A22
        end
        A21-->A1
    end</pre>

<h3 id="方法区中为什么使用元空间替代永久代"><a href="#方法区中为什么使用元空间替代永久代" class="headerlink" title="方法区中为什么使用元空间替代永久代"></a>方法区中为什么使用元空间替代永久代</h3><ol>
<li><code>JRockit</code> 虚拟机和<code>HotSpot</code>虚拟机j进行融合，而<code>JRockit</code>不需要配置永久代</li>
<li>为永久代设置空间大小是很难确定的,如果动态加载类过多，容易产生永久代的<code>OOM</code></li>
<li>元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制</li>
<li><code>JDK7</code>之前的版本中，<code>HotSpot</code>虚拟机将类型信息、内部字符串和类静态变量存储在永久代中，垃圾收集器也会对该区域进行垃圾回收。<code>JDK7</code>将<code>HotSpot</code>虚拟机中永久代内部字符串和类静态变量数据移动到<code>Java</code>堆中，但是依然存在永久代,将元数据从永久代剥离出来放到元空间中，不仅实现了对元数据的无缝管理，而且因为元空间大小仅受本地内存限制，也简化了<code>Full GC</code>，并且可以在<code>GC</code>不暂停的情况下并发地释放元数据</li>
</ol>
<h3 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h3><p>方法区主要回收两部分内容</p>
<ol>
<li>常量池中废弃的常量<ol>
<li>常量池中的字面量：比如文本字符串，被声明为 <code>final</code>的常量值等</li>
<li>符号引用：类和接口的全限定名，字段的名称和描述符，方法的名称和描述符</li>
</ol>
</li>
<li>不再使用的类型信息</li>
</ol>
<p>常量池中判断字面量是否不再使用简单一些，但是判断一个类型是否属于不再被使用的类，则需要满足下面的条件</p>
<ol>
<li>该类的所有示例都已经被回收</li>
<li>加载该类的类加载器已经被回收</li>
<li>该类的 <code>java.lang.Class</code> 对象没有在任何地方被引用</li>
</ol>
<p><strong>满足了上面的条件只是代表可以会回收，并不是一定会被回收</strong></p>
]]></content>
      <categories>
        <category>java</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>BeanFacotry的后置处理器详解</title>
    <url>/2023/e7d5d1305e5d/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p><strong>Spring 版本： 6.0.6</strong></p>
<h2 id="BeanFactory-的后置处理器的作用"><a href="#BeanFactory-的后置处理器的作用" class="headerlink" title="BeanFactory 的后置处理器的作用"></a>BeanFactory 的后置处理器的作用</h2><p><code>BeanFactory</code> 的后置处理器（<code>PostProcessor</code>）是用于在 <code>BeanFactory</code> 加载和创建 <code>bean</code> 过程中对 <code>bean</code> 进行进一步处理的接口。它提供了一种机制，可以在 <code>Spring</code> 容器实例化 <code>bean</code> 之前对 <code>bean</code> 进行定制、修改或扩展</p>
<h2 id="两种-BeanFactory-的接口类型"><a href="#两种-BeanFactory-的接口类型" class="headerlink" title="两种 BeanFactory 的接口类型"></a>两种 BeanFactory 的接口类型</h2><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>可以通过 <code>ConfigurableListableBeanFactory</code> 对 <code>BeanDefinition</code> 进行修改，这样就会改变 <code>bean</code> 的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p><code>BeanDefinitionRegistryPostProcessor</code> 继承了 <code>BeanFactoryPostProcessor</code> 接口，同时增加了一个接口，该接口提供了 <code>BeanDefinitionRegistry</code> 参数，也就是可以动态注入一些 <code>BeanDefinition</code>， 在 <code>Spring</code> 中典型的应用是 <code>ConfigurationClassPostProcessor</code>，后面会分析这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BeanFactory-后置处理器的使用示例"><a href="#BeanFactory-后置处理器的使用示例" class="headerlink" title="BeanFactory 后置处理器的使用示例"></a>BeanFactory 后置处理器的使用示例</h2><h3 id="使用示例类说明"><a href="#使用示例类说明" class="headerlink" title="使用示例类说明"></a>使用示例类说明</h3><ol>
<li><code>CusBeanFactoryPostProcessor</code> 该类实现了 <code>BeanFactoryPostProcessor</code> 接口并且标有 <code>@Component</code> 注解</li>
<li><code>CusBeanDefinitionRegistryPostProcessor</code> 该类实现了 <code>BeanDefinitionRegistryPostProcessor</code> 接口并且标有 <code>@Component</code> 注解</li>
<li><code>RegisterComponent</code> 普通类，会通过 <code>CusBeanDefinitionRegistryPostProcessor</code> 注入到 <code>Spring</code> 容器</li>
<li><code>ScanComponent</code> 标有 <code>@Component</code> 和 <code>@Scope(&quot;prototype&quot;)</code>, 会通过 <code>CusBeanFactoryPostProcessor</code> 将 <code>scope</code> 从 <code>prototype</code> 改为 <code>singleton</code></li>
<li><code>BeanFactoryPostProcessMain</code> 主类，标有 <code>@Configuration</code> 和 <code>@ComponentScan</code></li>
</ol>
<p>上述所有类都放在同一个包中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  普通类，并没有增加spring注解，会通过 CusBeanDefinitionRegistryPostProcessor 注入到 Spring 容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterComponent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RegisterComponent.sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了BeanDefinitionRegistryPostProcessor接口，会被spring扫描，并且注入了普通类 RegisterComponent</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(RegisterComponent.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;registerComponent&quot;</span>, beanDefinition);</span><br><span class="line">        System.out.println(<span class="string">&quot;CusBeanDefinitionRegistryPostProcessor postProcessBeanDefinitionRegistry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CusBeanDefinitionRegistryPostProcessor postProcessBeanFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  被spring管理的类，如果没有任何处理会是 prototype 作用域， 这里会通过 CusBeanFactoryPostProcessor 将 scope 改为 singleton</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScanComponent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanFactoryDemo1 sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了BeanFactoryPostProcessor接口，会将scanComponent类的scope从prototype改为singleton</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">scanComponent</span> <span class="operator">=</span> beanFactory.getBeanDefinition(<span class="string">&quot;scanComponent&quot;</span>);</span><br><span class="line">        scanComponent.setScope(<span class="string">&quot;singleton&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CusBeanFactoryPostProcessor postProcessBeanFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置主类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryPostProcessMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanFactoryPostProcessMain.class);</span><br><span class="line">        <span class="comment">// BeanFactoryPostProcessor 的测试（修改了 ScanComponent 类的 scope 属性）</span></span><br><span class="line">        <span class="type">ScanComponent</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(ScanComponent.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="type">ScanComponent</span> <span class="variable">bean2</span> <span class="operator">=</span> context.getBean(ScanComponent.class);</span><br><span class="line">        System.out.println(bean2);</span><br><span class="line"></span><br><span class="line">        <span class="type">RegisterComponent</span> <span class="variable">registerComponent</span> <span class="operator">=</span> context.getBean(RegisterComponent.class);</span><br><span class="line">        registerComponent.sayHello(); <span class="comment">// 会打印 &quot;RegisterComponent.sayHello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CusBeanDefinitionRegistryPostProcessor postProcessBeanDefinitionRegistry</span><br><span class="line">CusBeanDefinitionRegistryPostProcessor postProcessBeanFactory</span><br><span class="line">CusBeanFactoryPostProcessor postProcessBeanFactory</span><br><span class="line">org.example.beanfactorypost.ScanComponent@5e1fa5b1</span><br><span class="line">org.example.beanfactorypost.ScanComponent@5e1fa5b1</span><br><span class="line">RegisterComponent.sayHello</span><br></pre></td></tr></table></figure>

<p>从上面执行结果可以得出如下几个结论：</p>
<ol>
<li>先执行实现了 <code>BeanDefinitionRegistryPostProcessor</code> 接口的类，然后才是执行的 <code>BeanFactoryPostProcessor</code> 接口实现类</li>
<li><code>BeanDefinitionRegistryPostProcessor</code> 实现类确实可以注册普通对象成为 <code>bean</code>, 比如上面注册了普通对象 <code>RegisterComponent</code></li>
<li><code>CusBeanFactoryPostProcessor</code> 类已经将 <code>ScanComponent</code> 的 <code>scope</code> 属性改成 <code>singleton</code>, 因为两次 <code>getBean</code> 获取的是同一个对象</li>
</ol>
<h2 id="BeanFactory-后置处理器的执行时机"><a href="#BeanFactory-后置处理器的执行时机" class="headerlink" title="BeanFactory 后置处理器的执行时机"></a>BeanFactory 后置处理器的执行时机</h2><p>参考 <ol><li><a href="/2023/b93a520f6ddc/index.html" title="Spring上下文refresh方法解析">Spring上下文refresh方法解析</a></li></ol> 中写到的 <code>refresh()</code> 方法的第五步，就是执行后置处理器</p>
<p>执行流程如下</p>
<pre class="mermaid">sequenceDiagram
    participant A as AnnotationConfigApplicationContext
    participant B as AbstractApplicationContext
    participant C as PostProcessorRegistrationDelegate
    A->>A: new AnnotationConfigApplicationContext(classes)
    A->>B: refresh()
    B->>C: invokeBeanFactoryPostProcessors()
    C->>C: invokeBeanFactoryPostProcessors()</pre>

<p>所以最终是执行到 <code>public PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors()</code> 方法 ， 代码这里就不贴了，这里总结一下</p>
<ol>
<li>执行实现了 <code>BeanDefinitionRegistryPostProcessors</code> 和 <code>PriorityOrdered</code> 的类的<code>postProcessBeanDefinitionRegistry()</code> 方法</li>
<li>执行实现了 <code>BeanDefinitionRegistryPostProcessors</code> 和 <code>Ordered</code> 的类的<code>postProcessBeanDefinitionRegistry()</code> 方法</li>
<li>执行实现了 <code>BeanDefinitionRegistryPostProcessors</code> 并且在 <strong>前面两步中没有执行过的类</strong></li>
<li>对于实现了 <code>BeanFactoryPostProcessor</code> 的类，调用流程也是类似，执行实现了 <code>PriorityOrdered</code> 的类 -&gt; 执行实现了 <code>Ordered</code> 的类 -&gt; 执行剩下的类</li>
</ol>
<h2 id="BeanDefinitionRegistryPostProcessor-典型实现类-ConfigurationClassPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor-典型实现类-ConfigurationClassPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor 典型实现类 ConfigurationClassPostProcessor"></a>BeanDefinitionRegistryPostProcessor 典型实现类 ConfigurationClassPostProcessor</h2><p>在 <code>Spring</code> 内部也是有很多实现了 <code>BeanDefinitionRegistryPostProcessor</code> 接口的类，比如 <code>ConfigurationClassPostProcessor</code> 类，下面就来看看这个类</p>
<ol>
<li>先说明一下 <code>ConfigurationClassPostProcessor</code> 这个类做的事情，在 <code>Spring</code> 中 <code>@ComponentScan</code> 注解可以批量扫描类被 <code>Spring</code> 管理，但是注解只是起到一个标记的作用，需要有地方来解析这个注解才行，而这个解析的源头就是 <code>ConfigurationClassPostProcessor</code>，真正解析是在 <code>ConfigurationClassParser</code> 中</li>
<li>前面有说过 <code>BeanDefinitionRegistryPostProcessors</code> 接口的实现类可以批量注册 <code>BeanDefinition</code> 被 <code>Spring</code> 管理，在 <code>ConfigurationClassParser</code> 中将 <code>@ComponentScan</code> 涉及到的类都解析出来之后，刚好就可以注册到 <code>Spring</code> 容器中</li>
</ol>
<p>代码执行流程如下</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="meta">#refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="meta">#invokeBeanFactoryPostProcessors</span></span><br><span class="line">        <span class="keyword">public</span> PostProcessorRegistrationDelegate<span class="meta">#invokeBeanFactoryPostProcessors</span></span><br><span class="line">            <span class="keyword">private</span> PostProcessorRegistrationDelegate<span class="meta">#invokeBeanDefinitionRegistryPostProcessors</span></span><br><span class="line">                ConfigurationClassPostProcessor<span class="meta">#postProcessBeanDefinitionRegistry</span></span><br><span class="line">                    ConfigurationClassPostProcessor<span class="meta">#processConfigBeanDefinitions</span></span><br><span class="line">                        ConfigurationClassParser<span class="meta">#parse</span></span><br><span class="line">                            ComponentScanAnnotationParser<span class="meta">#parse</span></span><br></pre></td></tr></table></figure>

<p>上面是代码的整体执行流程， 最终是通过 <code>ComponentScanAnnotationParser</code> 来进行解析 <code>@ComponentScan</code> 注解的</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面代码执行流程中，在 <code>PostProcessorRegistrationDelegate#invokeBeanDefinitionRegistryPostProcessors</code> 中可以得到 <code>ConfigurationClassPostProcessor</code> 类，但是这个类我们并没有手动进行注册。</p>
<p>在 <code>AbstractApplicationContext</code> 中有 <code>addBeanFactoryPostProcessor()</code> 可以手动注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span></span><br><span class="line">		<span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBeanFactoryPostProcessor</span><span class="params">(BeanFactoryPostProcessor postProcessor)</span> &#123;</span><br><span class="line">		Assert.notNull(postProcessor, <span class="string">&quot;BeanFactoryPostProcessor must not be null&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.beanFactoryPostProcessors.add(postProcessor);</span><br><span class="line">	&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以肯定是 <code>Spring</code> 在哪个步骤中自己注册了，要想找到在哪里注册的也不难，那就是在 <code>ConfigurationClassPostProcessor</code> 类的 <code>postProcessBeanDefinitionRegistry()</code> 方法中打断点，然后看调用栈，就可以知道 <code>ConfigurationClassPostProcessor</code> 对象是从哪里获取的，不同的上下文设置的方式可能不同，在给出结论之前再看一下我们的主类测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryPostProcessMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanFactoryPostProcessMain.class);</span><br><span class="line">        <span class="comment">// BeanFactoryPostProcessor 的测试（修改了 ScanComponent 类的 scope 属性）</span></span><br><span class="line">        <span class="type">ScanComponent</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(ScanComponent.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="type">ScanComponent</span> <span class="variable">bean2</span> <span class="operator">=</span> context.getBean(ScanComponent.class);</span><br><span class="line">        System.out.println(bean2);</span><br><span class="line"></span><br><span class="line">        <span class="type">RegisterComponent</span> <span class="variable">registerComponent</span> <span class="operator">=</span> context.getBean(RegisterComponent.class);</span><br><span class="line">        registerComponent.sayHello(); <span class="comment">// 会打印 &quot;RegisterComponent.sayHello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从测试代码中看到上下文对象是 <code>AnnotationConfigApplicationContext</code>, 所以下面给出的结论也是基于这个上下文对象, 下面代码执行流程使用序号进行标记</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new AnnotationConfigApplicationContext(classes) </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationConfigApplicationContext</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();  <span class="comment">// 1</span></span><br><span class="line">    register(componentClasses);</span><br><span class="line">    refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnnotationConfigApplicationContext 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationConfigApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StartupStep</span> <span class="variable">createAnnotatedBeanDefReader</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.context.annotated-bean-reader.create&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(<span class="built_in">this</span>); <span class="comment">// 2</span></span><br><span class="line">    createAnnotatedBeanDefReader.end();</span><br><span class="line">    <span class="built_in">this</span>.scanner = <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnnotatedBeanDefinitionReader 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(registry, getOrCreateEnvironment(registry)); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// AnnotatedBeanDefinitionReader 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> &#123;</span><br><span class="line">    Assert.notNull(registry, <span class="string">&quot;BeanDefinitionRegistry must not be null&quot;</span>);</span><br><span class="line">    Assert.notNull(environment, <span class="string">&quot;Environment must not be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.registry = registry;</span><br><span class="line">    <span class="built_in">this</span>.conditionEvaluator = <span class="keyword">new</span> <span class="title class_">ConditionEvaluator</span>(registry, environment, <span class="literal">null</span>);</span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="built_in">this</span>.registry); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnnotationConfigUtils 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    registerAnnotationConfigProcessors(registry, <span class="literal">null</span>); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnnotationConfigUtils 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">			BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> &#123;</span><br><span class="line">    <span class="comment">// public static final String CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME = &quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;;</span></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="keyword">return</span> beanDefs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnnotationConfigUtils 类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinitionHolder <span class="title function_">registerPostProcessor</span><span class="params">(</span></span><br><span class="line"><span class="params">			BeanDefinitionRegistry registry, RootBeanDefinition definition, String beanName)</span> &#123;</span><br><span class="line">    definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    registry.registerBeanDefinition(beanName, definition); <span class="comment">// 7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(definition, beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenericApplicationContext 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">        <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="built_in">this</span>.beanFactory.registerBeanDefinition(beanName, beanDefinition); <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultListableBeanFactory 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="built_in">this</span>.beanDefinitionNames.add(beanName); <span class="comment">// 9 </span></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此已经知道 <code>ConfigurationClassPostProcessor</code> 是在何处添加的，而且 <code>ConfigurationClassPostProcessor</code> 类对应的 <code>beanName</code> 是 <code>org.springframework.context.annotation.internalConfigurationAnnotationProcessor</code></p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring上下文refresh方法解析</title>
    <url>/2023/b93a520f6ddc/index.html</url>
    <content><![CDATA[<p>本文主要记录 <code>AbstractApplicationContext#refresh()</code> 方法中每个步骤的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">contextRefresh</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.refresh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 1. 准备刷新上下文方法,用于设置准备刷新前的一些参数:</span></span><br><span class="line"><span class="comment">		 * 程序启动标志位/上下文拓展资源加载/上下文环境准备情况验证/监听器监听事件容器初始化准备</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2. 构建 BeanFactory 容器, 默认使用的 DefaultListableBeanFactory</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3. 准备 BeanFactory 容器, 主要是对 BeanFactory 进行一些初始化操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 4. 后处理 BeanFactory 容器, 主要是对 BeanFactory 进行一些后处理操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="type">StartupStep</span> <span class="variable">beanPostProcess</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5. 执行BeanFactory后置处理. <span class="doctag">@ComponentScan</span> 的解析就是通过后置处理器 ConfigurationClassPostProcessor 完成</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 6. 注册 BeanPostProcessor 到 bean 工厂中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            beanPostProcess.end();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 7. 初始化 MessageSource 资源，国际化相关的处理</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * 8. 初始化 ApplicationEventMulticaster 事件广播器</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 9. 子类实现,springbootstarterweb在此创建web容器,并提前生成容器所需的Bean及其对应生命周期</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 10. 给广播器中注册监听器,执行初期事件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 11. 初始化所有非懒加载单例Bean</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 12. 完成刷新,发布上下文刷新完毕事件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="comment">// 省略</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            resetCommonCaches();</span><br><span class="line">            contextRefresh.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中Bean的生命周期详解</title>
    <url>/2023/160e87d42e42/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>spring版本 6.x</p>
<h2 id="Spring-的-Bean-生命周期有哪几个阶段"><a href="#Spring-的-Bean-生命周期有哪几个阶段" class="headerlink" title="Spring 的 Bean 生命周期有哪几个阶段"></a>Spring 的 Bean 生命周期有哪几个阶段</h2><p>所谓的 Bean 的生命周期就是 Bean 在整个应用的生命周期中所经历的各种状态，从创建、初始化、使用、销毁等各个阶段。</p>
<pre class="mermaid">flowchart LR
    subgraph A["创建"]
        style A fill:#f9f
        direction LR
        A1["实例化Bean[createBeanInstance()方法]"]
        subgraph A2["初始化过程"]
            style A2 fill:#8ff600
            direction TB
            A21["设置属性值 populateBean() 方法"]
            A22["调用对应的 Aware 接口 "]
            A23[" BeanPostProcessor 前置处理 "]
            A24[" InitializingBean 的 afterPropertiesSet() 方法 "]
            A25[" 自定义 init-method 方法 "]
            A26[" BeanPostProcessor 后置处理 "]
            A21-->A22-->A23-->A24-->A25-->A26
        end
        A3["注册 Destruction 回调"]
        A1-->A2-->A3
    end
    B[" \n使用 \n\n"]
    subgraph C["销毁"]
        direction TB
        C1["DisposableBean#destroy()"]
        C2["自定义destroy-method"]
        C1-->C2
    end
    A-->B-->C</pre>

<h2 id="Bean-生命周期代码示例"><a href="#Bean-生命周期代码示例" class="headerlink" title="Bean 生命周期代码示例"></a>Bean 生命周期代码示例</h2><p>示例代码包含以下几个类</p>
<ol>
<li><code>LifeCycleBean</code> 主要是观察该类创建 Bean 的过程，该类实现了 <code>ApplicationContextAware</code>, <code>InitializingBean</code>, <code>DisposableBean</code> 接口</li>
<li><code>CusBeanPostProcessor</code> 该类实现了 <code>BeanPostProcessor</code> 接口</li>
<li><code>LifeCycleMain</code> 测试主类</li>
</ol>
<figure class="highlight java"><figcaption><span>LifeCycleBean类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行构造方法 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean -- destroy &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean afterPropertiesSet &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextAware setApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>CusBeanPostProcessor类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CusBeanPostProcessor before, current beanName:&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CusBeanPostProcessor after, current beanName:&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>LifeCycleMain测试主类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(LifeCycleMain.class);</span><br><span class="line">        <span class="type">LifeCycleBean</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(LifeCycleBean.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">执行构造方法 </span><br><span class="line">ApplicationContextAware setApplicationContext</span><br><span class="line">CusBeanPostProcessor <span class="keyword">before</span>, <span class="keyword">current</span> beanName:lifeCycleBean</span><br><span class="line">@PostConstruct init</span><br><span class="line">InitializingBean afterPropertiesSet </span><br><span class="line">CusBeanPostProcessor <span class="keyword">after</span>, <span class="keyword">current</span> beanName:lifeCycleBean</span><br></pre></td></tr></table></figure>

<p>从上述测试代码来看，在创建 <code>LifeCycleBean</code> 这个 Bean 过程中，执行顺序是</p>
<ol>
<li>执行对应类的构造方法</li>
<li>执行对应 Aware 接口的方法</li>
<li>执行 BeanPostProcessor 前置处理方法</li>
<li>执行 <code>@PostConstruct</code> 注解定义的方法</li>
<li>执行 InitializingBean 中的 afterPropertiesSet 方法</li>
<li>执行 BeanPostProcessor 后置处理方法</li>
</ol>
<h2 id="Spring-Bean-生命周期执行流程"><a href="#Spring-Bean-生命周期执行流程" class="headerlink" title="Spring Bean 生命周期执行流程"></a>Spring Bean 生命周期执行流程</h2><figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">finishBeanFactoryInitialization</span></span><br><span class="line">        DefaultListableBeanFactory<span class="punctuation">#</span><span class="keyword">preInstantiateSingletons</span></span><br><span class="line">            AbstractBeanFactory<span class="punctuation">#</span><span class="keyword">getBean</span><span class="params">(<span class="variable">java</span>.<span class="variable">lang</span>.<span class="variable">String</span>)</span></span><br><span class="line">                AbstractBeanFactory<span class="punctuation">#</span><span class="keyword">doGetBean</span></span><br><span class="line">                    DefaultSingletonBeanRegistry<span class="punctuation">#</span><span class="keyword">getSingleton</span><span class="params">(<span class="variable">ObjectFactory</span><span class="operator">&lt;</span>?<span class="operator">&gt;</span>)</span></span><br><span class="line">                        AbstractAutowireCapableBeanFactory<span class="punctuation">#</span><span class="keyword">createBean</span><span class="params">(<span class="variable">String</span> <span class="variable">beanName</span>, <span class="variable">RootBeanDefinition</span>, <span class="variable">java</span>.<span class="variable">lang</span>.<span class="variable">Object</span>[])</span></span><br><span class="line">                            AbstractAutowireCapableBeanFactory<span class="punctuation">#</span><span class="keyword">doCreateBean</span></span><br></pre></td></tr></table></figure>

<p>上述流程是创建 Bean 的调用过程，最终是在 <code>AbstractAutowireCapableBeanFactory</code> 中调用 <code>doCreateBean</code> 方法来创建，所以直接看下这部分代码（省略和此次流程无关代码）</p>
<figure class="highlight java"><figcaption><span>AbstractAutowireCapableBeanFactory类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate the bean.</span></span><br><span class="line">    <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 步骤1： 实例化 Bean</span></span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 步骤2： 设置属性</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="comment">// 步骤3： 调用 aware 接口 -》调用 BeanPostProcessor 前置方法</span></span><br><span class="line">        <span class="comment">// -》 调用  InitializingBean 的 afterPropertiesSet 方法</span></span><br><span class="line">        <span class="comment">// -》 调用  自定义的 init-method 方法</span></span><br><span class="line">        <span class="comment">// -》 调用  自定义的 init-method 方法</span></span><br><span class="line">        <span class="comment">// -》 调用 BeanPostProcessor 后置方法</span></span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 步骤4： 注册销毁方法</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化(<strong>步骤1</strong>)和设置属性值(<strong>步骤2</strong>) 就不看了，主要看一下 <strong>步骤3</strong>，这个步骤包含了 Bean 生命周期中整个初始化过程</p>
<figure class="highlight java"><figcaption><span>AbstractAutowireCapableBeanFactory类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤3.1 调用对应的 Aware 接口</span></span><br><span class="line">    invokeAwareMethods(beanName, bean);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// 步骤3.2 调用 BeanPostProcessor 前置方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 步骤3.3 调用 InitializingBean 的 afterPropertiesSet 方法 和 自定义的 init-method 方法</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                (mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>), beanName, ex.getMessage(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// 步骤3.4 调用 BeanPostProcessor 后置方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤3.3</strong> 中是调用 <code>InitializingBean</code> 的 <code>afterPropertiesSet</code> 方法 和 自定义的 <code>init-method</code> 方法， 调用 <code>InitializingBean</code> 接口的方法还比较好说，那么什么是自定义的 <code>init-method</code> 方法呢？看如下示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  这是一个 普通 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleBean initMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleBean destroyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleBean sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 @Bean 注入 LifeCycleBean 类，同时添加了 initMethod 和 destroyMethod 方法</span></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod=&quot;destroyMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LifeCycleBean <span class="title function_">lifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifeCycleBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(LifeCycleMain.class);</span><br><span class="line">        context.getBean(LifeCycleBean.class).sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LifeCycleBean initMethod</span></span><br><span class="line"><span class="attribute">LifeCycleBean sayHello</span></span><br></pre></td></tr></table></figure>

<p>重点执行流程导致就结束了</p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中DeferredImportSelector源码解析</title>
    <url>/2023/55186be8f39b/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>Spring版本: 6.0.6</p>
<p><code>DeferredImportSelector</code> 是 <code>ImportSelector</code> 的子接口，所以需要先了解 <code>ImportSelector</code> 的作用，可以参考 <ol><li><a href="/2023/73d35f59945c/index.html" title="Spring中Import注解源码解析">Spring中Import注解源码解析</a></li></ol></p>
<h2 id="简述-ImportSelector-的作用"><a href="#简述-ImportSelector-的作用" class="headerlink" title="简述 ImportSelector 的作用"></a>简述 ImportSelector 的作用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> Predicate&lt;String&gt; <span class="title function_">getExclusionFilter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里直接总结一下 <code>ImportSelector</code> 的作用，<code>selectImports()</code> 方法返回值是需要导入的类的全限定类名组成的数组，也就是可以批量注册普通类给 <code>Spring</code> 进行管理， <code>getExclusionFilter()</code> 则是可以过滤掉不想要注册的类</p>
<h2 id="DeferredImportSelector-和-ImportSelector-的区别是什么"><a href="#DeferredImportSelector-和-ImportSelector-的区别是什么" class="headerlink" title="DeferredImportSelector 和 ImportSelector 的区别是什么"></a>DeferredImportSelector 和 ImportSelector 的区别是什么</h2><p>先看一下 <code>DeferredImportSelector</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeferredImportSelector</span> <span class="keyword">extends</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Group</span>&gt; getImportGroup() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">        <span class="comment">// 第二个参数 selector 就是对应 DeferredImportSelector 实现类</span></span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata metadata, DeferredImportSelector selector)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回需要被导入的类全限定类名，就和 ImportSelector 接口中的 selectImports 方法类似</span></span><br><span class="line">		Iterable&lt;Entry&gt; <span class="title function_">selectImports</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Entry 就是用来保存需要导入的类的全限定类名和 元数据信息</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Entry</span> &#123;</span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">final</span> AnnotationMetadata metadata;</span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">final</span> String importClassName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>表面上看来 <code>DeferredImportSelector</code> 与 <code>ImportSelector</code> 的区别是 <code>DeferredImportSelector</code> 中多了一个内部接口</p>
</li>
<li><p>实际是是 <code>DeferredImportSelector</code> 和 <code>ImportSelector</code> 的执行时机不一样</p>
<ol>
<li><code>ImportSelector</code> 是在解析对应的实现类时就会直接处理需要导入的类</li>
<li><code>DeferredImportSelector</code> 是提供了一种延迟导入配置类的机制，<code>SpringBoot</code> 的自动装配就是用到了 <code>DeferredImportSelector</code> 延迟导入的功能，这个延迟的意思是，非自动装配的类都解析完成之后才会去导入自动装配的类，具体源码会在下面说明</li>
</ol>
</li>
<li><p>除了延迟导入机制，如果 <code>DeferredImportSelector</code> 实现类没有实现 <code>Group</code> 接口的话，其他方法和 <code>ImportSelector</code> 一样，因为当没有实现 <code>Group</code> 接口时会使用 <code>Spring</code> 提供的默认的实现类 <code>DefaultDeferredImportSelectorGroup</code>, 可以从下面代码看到默认的实现中 <code>process()</code> 方法直接调用的就是 <code>selector.selectImports()</code> 方法，其实就是直接调用的就是 <code>ImportSelector</code> 接口的 <code>selectImports()</code> 方法，因此此时和 <code>ImportSelector</code> 接口在功能上是一致的【当然，执行时机还是不同】</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultDeferredImportSelectorGroup</span> <span class="keyword">implements</span> <span class="title class_">Group</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Entry&gt; imports = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata metadata, DeferredImportSelector selector)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String importClassName : selector.selectImports(metadata)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.imports.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(metadata, importClassName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Entry&gt; <span class="title function_">selectImports</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.imports;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DeferredImportSelector-使用示例"><a href="#DeferredImportSelector-使用示例" class="headerlink" title="DeferredImportSelector 使用示例"></a>DeferredImportSelector 使用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通的类，这个类没有任何注解，就是为了让 DeferredImportSelector 来导入的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefImportBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DefImportBean sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了 DeferredImportSelector 接口的类，这个类的作用是为了导入 DefImportBean 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusDeferredImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实际导入 --- 2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;DefImportBean.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义导入分组，这代表不使用默认的DefaultDeferredImportSelectorGroup， 如果没有导入就算写了 Group 实现类也不会使用的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Group</span>&gt; getImportGroup() &#123;</span><br><span class="line">        <span class="keyword">return</span> CusImportSelectorBeanGroup.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CusImportSelectorBeanGroup</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>.Group &#123;</span><br><span class="line">        <span class="comment">// 用来保存需要导入的类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Entry&gt; instanceImports = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata metadata, DeferredImportSelector selector)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用了自定义的分组 ----  1&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String importClassName : selector.selectImports(metadata)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.instanceImports.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(metadata, importClassName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Iterable&lt;Entry&gt; <span class="title function_">selectImports</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;真正返回 -- 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> instanceImports;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类，使用了 Import 导入了 实现了 CusDeferredImportSelector 接口的类</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(CusDeferredImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefImportMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(DefImportMain.class);</span><br><span class="line">        <span class="type">DefImportBean</span> <span class="variable">defImportBean</span> <span class="operator">=</span> context.getBean(DefImportBean.class);</span><br><span class="line">        defImportBean.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">使用了自定义的分组 <span class="comment">----  1</span></span><br><span class="line">实际导入 <span class="comment">--- 2</span></span><br><span class="line">真正返回 <span class="comment">-- 3</span></span><br><span class="line">DefImportBean sayHello</span><br></pre></td></tr></table></figure>

<p>从打印结果中也可以看到实现了 <code>DeferredImportSelector</code> 接口的类的执行顺序如下</p>
<pre class="mermaid">flowchart TB
    A["Group实现类中的 process() 方法"]
    B["DeferredImportSelector实现类 
     中的 selectImports() 方法 
     （该方法不一定执行，当 Group 实现类中
     有调用的时候才会执行，没有调用就没有执行
     SpringBoot自动装配时就没有执行 selectImports() 方法）"]
    C["Group实现类中的 selectImports() 方法
    这个方法的返回值才是真正要被
    导入的类"]
    A-->B-->C</pre>

<h2 id="DeferredImportSelector-执行流程源码解析"><a href="#DeferredImportSelector-执行流程源码解析" class="headerlink" title="DeferredImportSelector 执行流程源码解析"></a>DeferredImportSelector 执行流程源码解析</h2><p>在源码分析之前先熟悉一下会涉及到的几个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DeferredImportSelectorHolder</span> &#123;</span><br><span class="line">    <span class="comment">// 配置主类，在上面的示例中就是 DefImportMain 对应的 ConfigurationClass</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConfigurationClass configurationClass;</span><br><span class="line">    <span class="comment">// 保存的就是 DeferredImportSelector 实现类</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> DeferredImportSelector importSelector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面有说过 DeferredImportSelector 是会延迟注入的，既然要延迟，那就需要先将其存在一个地方，DeferredImportSelectorHandler 类就是保存所有的 DeferredImportSelector 实现类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">DeferredImportSelectorHandler</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;DeferredImportSelectorHolder&gt; deferredImportSelectors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DeferredImportSelector</code> 的解析其实是通过 <code>BeanFactory</code> 的后置处理器实现的，对应的 <code>BeanFactory</code> 后置处理器类是 <code>ConfigurationClassPostProcessor</code>，而解析 <code>Import</code> 注解的类则是 <code>ConfigurationClassParser</code>，这里再简单写一下解析顺序流程</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">        public PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">            private PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanDefinitionRegistryPostProcessors</span></span><br><span class="line">                ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">postProcessBeanDefinitionRegistry</span></span><br><span class="line">                    ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">processConfigBeanDefinitions</span></span><br><span class="line">                        ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span></span><br><span class="line">                            for 循环 start[解析单个类]</span><br><span class="line">                                ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span><span class="params">(<span class="variable">AnnotationMetadata</span>, <span class="variable">java</span>.<span class="variable">lang</span>.<span class="variable">String</span>)</span></span><br><span class="line">                                    ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">processImports</span>    (1)</span><br><span class="line">                            for 循环结束</span><br><span class="line">                            DeferredImportSelectorHandler<span class="punctuation">#</span><span class="keyword">process</span>              (2)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ConfigurationClassParser 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition annotatedBeanDef) &#123;</span><br><span class="line">                <span class="comment">// 这里会对 DeferredImportSelector 进行缓存，缓存在 DeferredImportSelectorHandler 类中</span></span><br><span class="line">                parse(annotatedBeanDef.getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition abstractBeanDef &amp;&amp; abstractBeanDef.hasBeanClass()) &#123;</span><br><span class="line">                parse(abstractBeanDef.getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                    <span class="string">&quot;Failed to parse configuration class [&quot;</span> + bd.getBeanClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里是对 DeferredImportSelector 的实际处理</span></span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>先简单总结一下：</p>
<ol>
<li>上述流程中 <code>(1)</code> 位置就是处理 <code>ImportSelector</code> 的地方， 同时也是缓存 <code>DeferredImportSelector</code> 实现类的地方</li>
<li>上述流程中 <code>(2)</code> 位置就是实际处理 <code>DeferredImportSelector</code> 的地方， 可以看到 <code>(2)</code> 位置是在循环外面，也就是等所有的 <code>BeanDefinition</code> 都解析完成之后再处理的，所以才说 <code>DeferredImportSelector</code> 实现接口有延迟导入的功能</li>
</ol>
<p>接下来就直接看 <code>processImports</code> 方法【下面所有列出代码都省略了和本次分析无关的代码】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processImports</span><span class="params">(ConfigurationClass configClass, SourceClass currentSourceClass,</span></span><br><span class="line"><span class="params">			Collection&lt;SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter,</span></span><br><span class="line"><span class="params">			<span class="type">boolean</span> checkForCircularImports)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">        <span class="keyword">if</span> (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">            <span class="comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span></span><br><span class="line">            Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">            <span class="type">ImportSelector</span> <span class="variable">selector</span> <span class="operator">=</span> ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class,</span><br><span class="line">                    <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">            <span class="comment">// 这里就是处理 DeferredImportSelector 的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector deferredImportSelector) &#123;</span><br><span class="line">                <span class="comment">// 这里并没有真正的处理，只是将其存在 DeferredImportSelectorHandler 对象中</span></span><br><span class="line">                <span class="built_in">this</span>.deferredImportSelectorHandler.handle(configClass, deferredImportSelector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码就是缓存 <code>DeferredImportSelector</code> 实现类的处理逻辑，接下来就是处理 <code>DeferredImportSelector</code> 实现类的逻辑了，从前面代码已经知道了，是会在 <code>DeferredImportSelectorHandler</code> 中进行处理, 处理过程中会涉及到 <code>Group</code> 相关的类，所以这里先看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DeferredImportSelectorGrouping</span> &#123;</span><br><span class="line">    <span class="comment">// 这里就保存了 Group 实现类</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> DeferredImportSelector.Group group;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">DeferredImportSelectorGroupingHandler</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, DeferredImportSelectorGrouping&gt; groupings = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看  <code>this.deferredImportSelectorHandler.process();</code> 这个处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DeferredImportSelectorHandler 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="built_in">this</span>.deferredImportSelectors;</span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (deferredImports != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">DeferredImportSelectorGroupingHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeferredImportSelectorGroupingHandler</span>();</span><br><span class="line">            deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span><br><span class="line">            <span class="comment">// 这里涉及到 Group 的注册   (1)</span></span><br><span class="line">            deferredImports.forEach(handler::register);</span><br><span class="line">            <span class="comment">// 真正的处理 导入逻辑       (2)</span></span><br><span class="line">            handler.processGroupImports();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.deferredImportSelectors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看一下 <code>Group</code> 注册的相关逻辑，也就是 <code>(1)</code> 中的相关逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">DeferredImportSelectorGroupingHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, DeferredImportSelectorGrouping&gt; groupings = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;AnnotationMetadata, ConfigurationClass&gt; configurationClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(DeferredImportSelectorHolder deferredImport)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  deferredImport.getImportSelector() 获取的就是 DeferredImportSelector 实现类，再调用 getImportGroup() 就是想要获取我们自己实现了 Group 的类</span></span><br><span class="line"><span class="comment">         * 这也是为什么前面说如果单纯实现了 Group 类是没有用的，还需要使用 getImportGroup() 方法返回才行，就是因为这里会调用 getImportGroup() 方法获取我们自己实现了 Group 的类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Group</span>&gt; group = deferredImport.getImportSelector().getImportGroup();</span><br><span class="line">        <span class="type">DeferredImportSelectorGrouping</span> <span class="variable">grouping</span> <span class="operator">=</span> <span class="built_in">this</span>.groupings.computeIfAbsent(</span><br><span class="line">                (group != <span class="literal">null</span> ? group : deferredImport),</span><br><span class="line">                <span class="comment">// 这里是创建 Group, 如果没有创建创建就是使用默认的，具体看下面 createGroup 方法</span></span><br><span class="line">                key -&gt; <span class="keyword">new</span> <span class="title class_">DeferredImportSelectorGrouping</span>(createGroup(group)));</span><br><span class="line">        grouping.add(deferredImport);</span><br><span class="line">        <span class="built_in">this</span>.configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">                deferredImport.getConfigurationClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Group <span class="title function_">createGroup</span><span class="params">(<span class="meta">@Nullable</span> Class&lt;? extends Group&gt; type)</span> &#123;</span><br><span class="line">            <span class="comment">// 这里是创建 Group, 如果我们自己没有创建，那么 type 就会是 null， 也就会使用默认的 DefaultDeferredImportSelectorGroup 类</span></span><br><span class="line">			Class&lt;? <span class="keyword">extends</span> <span class="title class_">Group</span>&gt; effectiveType = (type != <span class="literal">null</span> ? type : DefaultDeferredImportSelectorGroup.class);</span><br><span class="line">        <span class="keyword">return</span> ParserStrategyUtils.instantiateClass(effectiveType, Group.class,</span><br><span class="line">                ConfigurationClassParser.<span class="built_in">this</span>.environment,</span><br><span class="line">                ConfigurationClassParser.<span class="built_in">this</span>.resourceLoader,</span><br><span class="line">                ConfigurationClassParser.<span class="built_in">this</span>.registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是看 <code>processGroupImports()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  DeferredImportSelectorGroupingHandler 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processGroupImports</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="built_in">this</span>.groupings.values()) &#123;</span><br><span class="line">        Predicate&lt;String&gt; exclusionFilter = grouping.getCandidateFilter();</span><br><span class="line">        <span class="comment">// grouping.getImports() 中就会实际调用 Group 类的 process() 方法</span></span><br><span class="line">        <span class="comment">// 如果使用的是默认的 Group 实现类，实际就会调用 ImportSelector 中的 selectImports 方法， </span></span><br><span class="line">        <span class="comment">//getImports() 方法的返回值就是我们自己实现了 Group 类的 selectImports 方法的返回值</span></span><br><span class="line">        grouping.getImports().forEach(entry -&gt; &#123;</span><br><span class="line">            <span class="type">ConfigurationClass</span> <span class="variable">configurationClass</span> <span class="operator">=</span> <span class="built_in">this</span>.configurationClasses.get(entry.getMetadata());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 拿到 扫描到的类的全限定类名，然后就按照 Import 普通类来处理，也就是当作 @Configuration 注解的类来处理</span></span><br><span class="line">                processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter),</span><br><span class="line">                        Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)),</span><br><span class="line">                        exclusionFilter, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                        <span class="string">&quot;Failed to process import candidates for configuration class [&quot;</span> +</span><br><span class="line">                                configurationClass.getMetadata().getClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="built_in">this</span>.deferredImports) &#123;</span><br><span class="line">        <span class="comment">// 在这里开始调用 Group 的 process() 方法</span></span><br><span class="line">        <span class="built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">                deferredImport.getImportSelector());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.group.selectImports();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此就解析完了 <code>Spring</code> 中 <code>DeferredImportSelectory</code> 的整体调用流程</p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中Import注解源码解析</title>
    <url>/2023/73d35f59945c/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><code>@Import</code> 注解可以导入三种类型的类</p>
<ol>
<li>导入普通类，此时直接将普通类交给 <code>Spring</code> 管理</li>
<li>导入 <code>ImportSelector</code> 实现类中 <code>String[] selectImports(AnnotationMetadata importingClassMetadata);</code> 方法返回的类</li>
<li>导入 <code>ImportBeanDefinitionRegistrar</code> 实现类中 <code>registerBeanDefinitions</code> 方法注入的类</li>
</ol>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下代码每种方式使用的类都在同一个包下( <code>@Configuration</code> 默认会扫描当前包和子包 )。</p>
<div class="tabs" id="import的三种使用方式"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="import的三种使用方式-1">引入普通类</button><button type="button" class="tab " data-href="import的三种使用方式-2">结合 ImportSelector</button><button type="button" class="tab " data-href="import的三种使用方式-3">结合 ImportBeanDefinitionRegistrar</button></ul><div class="tab-contents"><div class="tab-item-content active" id="import的三种使用方式-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(Student.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ImportConfig.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">        student.sayHello();  <span class="comment">// 会打印 &quot;test hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="import的三种使用方式-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(CusImportSelector.class)</span>  <span class="comment">// 这里导入的是实现了 ImportSelector 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义实现 ImportSelector 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">// 返回的数组就是需要导入的类全限定名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;org.example.imports.Student&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ImportConfig.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">        student.sayHello();  <span class="comment">// 会打印 &quot;test hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="import的三种使用方式-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(CusImportBeanDefinitionRegistrar.class)</span>  <span class="comment">// 这里导入的是实现了 ImportSelector 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义实现 ImportBeanDefinitionRegistrar 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator)</span> &#123;</span><br><span class="line">        <span class="type">BeanDefinitionBuilder</span> <span class="variable">beanDefinitionBuilder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Student.class);</span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line">        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> importBeanNameGenerator.generateBeanName(beanDefinition, registry);</span><br><span class="line">        registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ImportConfig.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">        student.sayHello();  <span class="comment">// 会打印 &quot;test hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="源码流程解析"><a href="#源码流程解析" class="headerlink" title="源码流程解析"></a>源码流程解析</h2><p><code>@Import</code> 的解析实际是通过 <code>BeanFactoryPostProcessor</code> 实现的， 在 <ol><li><a href="/2023/e7d5d1305e5d/index.html" title="BeanFacotry的后置处理器详解">BeanFacotry的后置处理器详解</a></li></ol> 提到 <code>@ComponentScan</code> 是通过 <code>ConfigurationClassPostProcessor</code> 处理的，处理流程如下：</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">        PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanDefinitionRegistryPostProcessors</span></span><br><span class="line">            ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">postProcessBeanDefinitionRegistry</span></span><br><span class="line">                ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span><span class="params">(<span class="variable">Set</span><span class="operator">&lt;</span><span class="variable">BeanDefinitionHolder</span><span class="operator">&gt;</span>)</span></span><br><span class="line">                    ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">doProcessConfigurationClass</span></span><br></pre></td></tr></table></figure>
<p>最终是会调用到 <code>ConfigurationClassParser#doProcessConfigurationClass</code> 方法，接下来就看看这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title function_">doProcessConfigurationClass</span><span class="params">(</span></span><br><span class="line"><span class="params">			ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)</span></span><br><span class="line">			<span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">            org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.propertySourceRegistry != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.propertySourceRegistry.processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    <span class="string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  这里是处理 @ComponentScan  Process any @ComponentScan annotations</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !<span class="built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 @Import Process any @Import annotations</span></span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), filter, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略  处理 @ImportResource 等  Process any @ImportResource annotations</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>processImports</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigurationClassParser 类， 该方法只列出了重要方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processImports</span><span class="params">(ConfigurationClass configClass, SourceClass currentSourceClass,</span></span><br><span class="line"><span class="params">			Collection&lt;SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter,</span></span><br><span class="line"><span class="params">			<span class="type">boolean</span> checkForCircularImports)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">        <span class="comment">// 导入的是 ImportSelector 类型的处理流程</span></span><br><span class="line">        <span class="keyword">if</span> (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">            <span class="comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span></span><br><span class="line">            Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">            <span class="type">ImportSelector</span> <span class="variable">selector</span> <span class="operator">=</span> ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class,</span><br><span class="line">                    <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">            Predicate&lt;String&gt; selectorFilter = selector.getExclusionFilter();</span><br><span class="line">            <span class="keyword">if</span> (selectorFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">                exclusionFilter = exclusionFilter.or(selectorFilter);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector deferredImportSelector) &#123;</span><br><span class="line">                <span class="built_in">this</span>.deferredImportSelectorHandler.handle(configClass, deferredImportSelector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames, exclusionFilter);</span><br><span class="line">                processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 导入的是 ImportBeanDefinitionRegistrar 类型的处理流程</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">            <span class="comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line">            <span class="comment">// delegate to it to register additional bean definitions</span></span><br><span class="line">            Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">            <span class="type">ImportBeanDefinitionRegistrar</span> <span class="variable">registrar</span> <span class="operator">=</span></span><br><span class="line">                    ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class,</span><br><span class="line">                            <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">            configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 既不是 ImportSelector 也不是 ImportBeanDefinitionRegistrar 类型的处理流程，当作 普通的 @Configuration 类处理</span></span><br><span class="line">            <span class="built_in">this</span>.importStack.registerImport(</span><br><span class="line">                    currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">            processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>导入的是普通类是的处理流程</strong></p>
<p>从上面源码可以看到，如果导入的是普通的类（不是 <code>ImportSelector</code> 也不是 <code>ImportBeanDefinitionRegistrar</code> 类型）则将这个普通类按照含有 <code>@Configuration</code> 注解的类一样进行处理, 如果是按照 <code>@Configuration</code> 注解的类进行处理，会将普通类变成 <code>ConfigurationClass</code> 类型</p>
<p><strong>导入的是 <code>ImportSelector</code> 类型</strong></p>
<p>对于导入的是 <code>ImportSelector</code> 类型处理代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">    <span class="comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span></span><br><span class="line">    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">    <span class="type">ImportSelector</span> <span class="variable">selector</span> <span class="operator">=</span> ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class,</span><br><span class="line">            <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">    Predicate&lt;String&gt; selectorFilter = selector.getExclusionFilter();</span><br><span class="line">    <span class="keyword">if</span> (selectorFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">        exclusionFilter = exclusionFilter.or(selectorFilter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector deferredImportSelector) &#123;</span><br><span class="line">        <span class="built_in">this</span>.deferredImportSelectorHandler.handle(configClass, deferredImportSelector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">        Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames, exclusionFilter);</span><br><span class="line">        processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>先调用 <code>selectImports</code> 方法获取导入的类名数组</li>
<li>调用 <code>asSourceClasses</code> 方法将类名数组转换为 <code>SourceClass</code> 集合</li>
<li>调用 <code>processImports</code> 方法处理 <code>SourceClass</code> 数组， 这里就是递归调用了，递归的第一层是 <code>ImportSelector</code> 类型的类，递归的第二层就是 <code>selectImports</code> 方法中返回的普通的类了，这个就和 <code>Import</code> 导入的是普通类一样的处理流程，也就是最终是按照 <code>@Configuration</code> 注解的类处理</li>
</ol>
<p><strong>导入的是 <code>ImportBeanDefinitionRegistrar</code> 类型</strong></p>
<p>对于导入的是 <code>ImportBeanDefinitionRegistrar</code> 类型处理代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">    <span class="comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line">    <span class="comment">// delegate to it to register additional bean definitions</span></span><br><span class="line">    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">    <span class="type">ImportBeanDefinitionRegistrar</span> <span class="variable">registrar</span> <span class="operator">=</span></span><br><span class="line">            ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class,</span><br><span class="line">                    <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">    <span class="comment">// configClass 就是 ConfigurationClass</span></span><br><span class="line">    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   ConfigurationClass 类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  private final Map&lt;ImportBeanDefinitionRegistrar, AnnotationMetadata&gt; importBeanDefinitionRegistrars = new LinkedHashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) &#123;</span></span><br><span class="line"><span class="comment">    this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>最终是将 <code>ImportBeanDefinitionRegistrar</code> 实现类放入了 <code>ConfigurationClass</code> 类中的 <code>importBeanDefinitionRegistrars</code> 属性中，那么最终是什么时候注册成 <code>BeanDefinition</code> 的呢？</p>
<p>这个就得回到 <code>org.springframework.context.annotation.ConfigurationClassPostProcessor#processConfigBeanDefinitions</code> 方法中了， 这里通过流程图梳理一下解析和注册两个步骤的流程</p>
<pre class="mermaid">sequenceDiagram
    autonumber
    participant A as ConfigurationClassPostProcessor
    participant B as ConfigurationClassParser
    participant C as ConfigurationClassBeanDefinitionReader
    activate A
    A->>A: processConfigBeanDefinitions()
    A->>B: parse()
    B->>B: doProcessConfigurationClass（）
    A->>C: loadBeanDefinitions()
    C->>C: loadBeanDefinitionsFromRegistrars()
    deactivate  A</pre>

<ol>
<li>整体逻辑是在 <code>ConfigurationClassPostProcessor</code> 的 <code>processConfigBeanDefinitions()</code> 方法中执行的</li>
<li>对于 <code>@ComponentScan</code>, <code>@Import</code> 等解析是在 <code>ConfiguraionClassParser</code> 的 <code>doProcessConfigurationClass()</code> 方法中解析的</li>
<li>对于 <code>ImportBeanDefinitionRegistrar</code> 类型的类在第二步解析完成之后放入了 <code>ConfigurationClass</code> 类型（就是将 <code>ImportBeanDefinitionRegistrar</code> 类型的实现类转换成 <code>ConfigurationClass</code> 类型而已）中的 <code>importBeanDefinitionRegistrars</code> 属性中</li>
<li>最后在 <code>ConfigurationClassBeanDefinitionReader</code> 类的 <code>loadBeanDefinitionsFromRegistrars()</code> 方法中会进行 <code>BeanDefinition</code> 的注册</li>
</ol>
<p>至此，解析和注册两个步骤的流程就解析完了</p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让自定义的某个bean在所有bean之前加载</title>
    <url>/2023/5cb19cbceeb7/index.html</url>
    <content><![CDATA[<p>可以通过 <code>@DependsOn</code> 注解来控制某个 <code>bean</code> 的加载顺序，但是如果有控制项目中让某个 <code>Bean</code> 先于其他的 <code>Bean</code> 加载，这种方式就不可行，所以还是需要从 <code>Spring</code> 中加载 <code>Bean</code> 的机制入手</p>
<ol>
<li>通过 <code>BeanFacotry.getBean()</code> 方法主动去加载 <code>Bean</code></li>
<li>所有非懒加载的 <code>Bean</code> 会在 <code>AbstractApplicationContext#finishBeanFactoryInitialization()</code> 方法中进行加载</li>
</ol>
<p>如果是通过第二种方式(自动加载)，那么 <code>Bean</code> 加载时机就不是可控的，所以只能使用第一种方式，进行主动加载</p>
<p>使用主动加载的方法需要获取到 <code>BeanFactory</code>，而 <code>BeanFactoryPostProcessor</code> 方法就可以提供 <code>beanFactory</code>， 而且 <code>BeanFactoryPostProcessor</code> 的执行时机是所有 <code>Bean</code> 加载之前</p>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 主动获取 FirstDemo</span></span><br><span class="line">        beanFactory.getBean(FirstDemo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstDemo Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3自动装配原理</title>
    <url>/2023/8e23a1d3d97d/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>SpringBoot版本: 3.2.0</p>
<h2 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h2><p><strong>装配的是什么？</strong></p>
<p>装配的就是 <code>bean</code>, 也就是可以将一个 对象交给 <code>Spring</code> 容器管理</p>
<p><strong>为什么可以自动？</strong></p>
<p><code>SpringBoot</code> 秉持的就是 <strong>约定优于配置</strong>，所以要想做到就得有一定的规则，比如</p>
<ul>
<li>总得要告诉 <code>Spring</code> 我们想要装配的是什么类，通过什么方式告诉呢？ 就是将想要注入的类集中写在一个固定位置的配置文件中<ul>
<li>在 2.7.0 之前使用的配置文件名称是 <code>spring.factories</code>, 这个文件的位置是  <code>META-INF/spring.factories</code></li>
<li>在 2.7.0 之后使用的配置文件名称是 <code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>, 这个文件的位置是  <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></li>
</ul>
</li>
<li>可以认为配置文件是开发者需要提供的，当然 <code>SpringBoot</code> 内部也使用了这种机制，既然提供了配置文件，那么 <code>Spring</code> 框架就需要按照约定的位置去找这些类了，这个在 <code>SpringBoot</code> 中是通过 <code>@Import</code> 注解导入了一个 <code>DeferredImportSelector</code> 实现类来实现的，这个实现类是 <code>AutoConfigurationImportSelector</code></li>
<li>在 <code>SpringBoot</code> 中还提供了一种机制，就是通过一系列的条件判断我们在配置文件中写的这些类是否真的可以导入，这一系列条件是通过 <code>@ConditionalOnxxxx</code> 注解来实现</li>
</ul>
<p>接下来简单总结一下 <code>SpringBoot3</code> 的自动装配原理</p>
<ol>
<li>通过 <code>@Import</code> 导入 <code>AutoConfigurationImportSelector</code> 类， 可以参考 <ol><li><a href="/2023/73d35f59945c/index.html" title="Spring中Import注解源码解析">Spring中Import注解源码解析</a></li></ol></li>
<li><code>AutoConfigurationImportSelector</code> 会去找所有 <code>classpath</code> 下所有 <code>jar</code> 下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件，将文件里面的全限定类名加载进来</li>
<li>对加载加来的类进行一系列的条件判断，符合条件的才会真的进行加载到 <code>Spring</code> 容器中</li>
</ol>
<h2 id="自动装配的示例"><a href="#自动装配的示例" class="headerlink" title="自动装配的示例"></a>自动装配的示例</h2><ol><li><a href="/2023/ee343b448bf4/index.html" title="SpringBoot3自动装配案例">SpringBoot3自动装配案例</a></li></ol>

<h2 id="SpringBoot3-自动装配的流程"><a href="#SpringBoot3-自动装配的流程" class="headerlink" title="SpringBoot3 自动装配的流程"></a>SpringBoot3 自动装配的流程</h2><p><code>SpringBoot</code> 项目启动主类上只有一个 <code>SpringBootApplication</code> 注解，我们看一下这个注解的体系</p>
<pre class="mermaid">flowchart LR
    A["@SpringBootApplication"]
    style A fill:#8ff600
    B["@ComponentScan"]
    C["@EnableAutoConfiguration"]
    style C fill:#8ff600
    D["@SpringBootConfiguration"]

    A--> B & C & D

    E["@Configuration"]
    D-->E

    F["@AutoConfigurationPackage"]
    G["@Import(AutoConfigurationPackages.Registrar.class)"]
    C-->F
    F-->G

    H["@Import(AutoConfigurationImportSelector.class)"]
    style H fill:#8ff600
    C-->H</pre>

<p>涉及到自动注入的注解使用绿色标记出来了，所以最终需要看的就是 <code>AutoConfigurationImportSelector</code>， 而这个类是一个 <code>DeferredImportSelector</code> 接口的实现类，具体参考 <ol><li><a href="/2023/55186be8f39b/index.html" title="Spring中DeferredImportSelector源码解析">Spring中DeferredImportSelector源码解析</a></li></ol>， 这里就直接给出 <code>DeferredImportSelector</code> 接口的执行流程</p>
<pre class="mermaid">flowchart TB
    A["Group实现类中的 process() 方法"]
    B["DeferredImportSelector实现类 
     中的 selectImports() 方法 
     （该方法不一定执行，当 Group 实现类中
     有调用的时候才会执行，没有调用就没有执行
     SpringBoot自动装配时就没有执行 selectImports() 方法）"]
    C["Group实现类中的 selectImports() 方法
    这个方法的返回值才是真正要被
    导入的类"]
    A-->B-->C</pre>

<p>先看一下 <code>AutoConfigurationImportSelector</code> 这个类中相关的代码（只展示主流程部分）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware,</span><br><span class="line">		ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据这个方法可以知道当前 DeferredImportSelector 实现类对应的 Group 类是 AutoConfigurationGroup</span></span><br><span class="line">    <span class="comment">// 步骤1： 根据这个方法得到具体的 Group 实现类</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Group</span>&gt; getImportGroup() &#123;</span><br><span class="line">		<span class="keyword">return</span> AutoConfigurationGroup.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤4： 这个方法是从 Group 实现类中的 process() 方法调用过来的</span></span><br><span class="line">    <span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">        <span class="comment">// 步骤5： getCandidateConfigurations 方法会从配置文件加载类</span></span><br><span class="line">		List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">		configurations = removeDuplicates(configurations);</span><br><span class="line">        <span class="comment">// 获取手动排除掉的类，比如我们配置了 exclude 相关的配置</span></span><br><span class="line">		Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">		checkExcludedClasses(configurations, exclusions);</span><br><span class="line">		configurations.removeAll(exclusions);</span><br><span class="line">        <span class="comment">// 步骤6： 这里就是根据条件判断，过滤掉不符合条件的类</span></span><br><span class="line">		configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">		fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationGroup</span></span><br><span class="line">			<span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>.Group, BeanClassLoaderAware, BeanFactoryAware, ResourceLoaderAware &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 步骤2： 调用 Group 实现类中的 process() 方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;</span><br><span class="line">            <span class="comment">// 步骤3： 调用 AutoConfigurationImportSelector 类的 getAutoConfigurationEntry() 方法</span></span><br><span class="line">            <span class="comment">// 所以这里并没有调用 AutoConfigurationImportSelector 类的 selectImports() 方法</span></span><br><span class="line">			<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">				.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">			<span class="built_in">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line">			<span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line">				<span class="built_in">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤1</strong> 和 <strong>步骤2</strong> 的调用在讲解 <code>DeferredImportSelector</code> 接口的时候已经讲过了，这里简单贴一下调用过程</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">        public PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">            private PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanDefinitionRegistryPostProcessors</span></span><br><span class="line">                ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">postProcessBeanDefinitionRegistry</span></span><br><span class="line">                    ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">processConfigBeanDefinitions</span></span><br><span class="line">                        ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span></span><br><span class="line">                            for 循环 start[解析单个类]</span><br><span class="line">                                ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span><span class="params">(<span class="variable">AnnotationMetadata</span>, <span class="variable">java</span>.<span class="variable">lang</span>.<span class="variable">String</span>)</span></span><br><span class="line">                                    ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">processImports</span>    (1)</span><br><span class="line">                            for 循环结束</span><br><span class="line">                            DeferredImportSelectorHandler<span class="punctuation">#</span><span class="keyword">process</span>              (2)</span><br><span class="line">                                DeferredImportSelectorGroupingHandler<span class="punctuation">#</span><span class="keyword">processGroupImports</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在 <code>(1)</code> 位置会找到 <code>DeferredImportSelector</code> 类型的类，然后缓存起来，这个是在 <code>ConfigurationClassParser</code> 的 <code>processImports()</code> 方法中处理的</li>
<li>所以自定义的类都解析成 <code>BeanDefiniton</code> 之后(上面流程中的 <code>for</code> 循环之后)，开始执行 <code>DeferredImportSelectorHandler</code> 类的 <code>process()</code> 方法，这是因为 <code>(1)</code> 中缓存的 <code>DeferredImportSelector</code> 就是存放在 <code>DeferredImportSelectorHandler</code> 类中，也就是在 <code>(2)</code> 中调用到 <code>Group</code> 类的 <code>process()</code> 方法</li>
</ol>
<p>接下来直接从 <strong>步骤3</strong> 开始看,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  AutoConfigurationGroup类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤3</span></span><br><span class="line">	<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">	.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  AutoConfigurationImportSelector类</span></span><br><span class="line"><span class="comment">// 步骤4： 这个方法是从 Group 实现类中的 process() 方法调用过来的</span></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">// 步骤5： getCandidateConfigurations 方法会从配置文件加载类</span></span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    <span class="comment">// 获取手动排除掉的类，比如我们配置了 exclude 相关的配置</span></span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    <span class="comment">// 步骤6： 这里就是根据条件判断，过滤掉不符合条件的类</span></span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤5</strong> 完成的事情–从配置文件获取数据，得到的是配置的全限定类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  AutoConfigurationImportSelector 类</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())</span><br><span class="line">        .getCandidates();</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ImportCandidates 类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCATION</span> <span class="operator">=</span> <span class="string">&quot;META-INF/spring/%s.imports&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ImportCandidates <span class="title function_">load</span><span class="params">(Class&lt;?&gt; annotation, ClassLoader classLoader)</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoaderToUse</span> <span class="operator">=</span> decideClassloader(classLoader);</span><br><span class="line">    <span class="comment">//  location = META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> String.format(LOCATION, annotation.getName());</span><br><span class="line">    <span class="comment">//  通过 ClassLoader 读取 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></span><br><span class="line">    <span class="comment">// 文件, 这个不是某个 jar 包，而是 classpath 下的所有jar 包对应路径的文件</span></span><br><span class="line">    <span class="comment">// 所以返回的是 url 的集合</span></span><br><span class="line">    Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);</span><br><span class="line">    List&lt;String&gt; importCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">        <span class="comment">// 遍历每个 url， 读取对应的文件内容， 然后将文件内容中的内容添加到 importCandidates 中</span></span><br><span class="line">        importCandidates.addAll(readCandidateConfigurations(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImportCandidates</span>(importCandidates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面截取 <code>spring-boot-autoconfigure</code> 这个包下 <code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件的一部分内容看看</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.admin</span><span class="selector-class">.SpringApplicationAdminJmxAutoConfiguration</span></span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.aop</span><span class="selector-class">.AopAutoConfiguration</span></span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.amqp</span><span class="selector-class">.RabbitAutoConfiguration</span></span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.batch</span><span class="selector-class">.BatchAutoConfiguration</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>就是一行一个全限定类名而已，和 <code>SpringBoot2.7</code> 之前的 <code>spring.factories</code> 文件是不同的，这里也拿一个 <code>spring.factories</code> 文件内容对比一下</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个 key</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="comment"># 这是自动装配的 key</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="keyword"></span>……</span><br></pre></td></tr></table></figure>

<p><strong>步骤6</strong>完成的事情，对 <strong>步骤5</strong>中获取的全限定类名进行过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  AutoConfigurationImportSelector类</span></span><br><span class="line"><span class="comment">// 步骤4： 这个方法是从 Group 实现类中的 process() 方法调用过来的</span></span><br><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">// 步骤5： getCandidateConfigurations 方法会从配置文件加载类</span></span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    <span class="comment">// 获取手动排除掉的类，比如我们配置了 exclude 相关的配置</span></span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    <span class="comment">// 步骤6： 这里就是根据条件判断，过滤掉不符合条件的类</span></span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>调用 <code>getConfigurationClassFilter()</code> 方法获取 <code>classFilter</code>, 这个不跟下去了，直接说结论，其实也是根据 <code>spi</code> 机制从 <code>spring.factories</code> 文件中获取的，从上面列出的 <code>spring.factories</code> 文件中可以看到，这个文件是 <code>key=values</code> 的形式，也就是一个 <code>key</code> 可以配置多个值，而获取 <code>classFilter</code> 的 <code>key</code> 是 <code>AutoConfigurationImportFilter</code>， 再看看 <code>spring.factories</code> 文件中关于 <code>AutoConfigurationImportFilter</code> 的配置</li>
</ol>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个配置文件也是在 spring-boot-autoconfigure 包下面</span></span><br><span class="line"><span class="comment"># Auto Configuration Import Filters</span></span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>getConfigurationClassFilter()</code> 方法的返回值是 <code>ConfigurationClassFilter</code>， 看看这个类，具体的过滤逻辑这里就不再分析</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ConfigurationClassFilter</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AutoConfigurationMetadata autoConfigurationMetadata;</span><br><span class="line">    <span class="comment">// 上面讲到会从配置文件中加载到三个 AutoConfigurationImportFilter 实现类，会保存在这里然后调用过滤方法</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;AutoConfigurationImportFilter&gt; filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析文件和过滤后的处理"><a href="#解析文件和过滤后的处理" class="headerlink" title="解析文件和过滤后的处理"></a>解析文件和过滤后的处理</h3><p>配置文件也解析了，过滤也过滤完了，回过头再看看 <code>Group</code> 类的 <code>process()</code> 方法是从哪里调用过来的，前面有，这里再贴一下流程</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">refresh</span></span><br><span class="line">    AbstractApplicationContext<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">        public PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanFactoryPostProcessors</span></span><br><span class="line">            private PostProcessorRegistrationDelegate<span class="punctuation">#</span><span class="keyword">invokeBeanDefinitionRegistryPostProcessors</span></span><br><span class="line">                ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">postProcessBeanDefinitionRegistry</span></span><br><span class="line">                    ConfigurationClassPostProcessor<span class="punctuation">#</span><span class="keyword">processConfigBeanDefinitions</span></span><br><span class="line">                        ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span></span><br><span class="line">                            for 循环 start[解析单个类]</span><br><span class="line">                                ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">parse</span><span class="params">(<span class="variable">AnnotationMetadata</span>, <span class="variable">java</span>.<span class="variable">lang</span>.<span class="variable">String</span>)</span></span><br><span class="line">                                    ConfigurationClassParser<span class="punctuation">#</span><span class="keyword">processImports</span></span><br><span class="line">                            for 循环结束</span><br><span class="line">                            DeferredImportSelectorHandler<span class="punctuation">#</span><span class="keyword">process</span></span><br><span class="line">                                DeferredImportSelectorGroupingHandler<span class="punctuation">#</span><span class="keyword">processGroupImports</span></span><br></pre></td></tr></table></figure>

<p>所以是在 <strong>DeferredImportSelectorHandler</strong> 的类 <code>process()</code> 方法中处理的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ConfigurationClassParser</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processGroupImports</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="built_in">this</span>.groupings.values()) &#123;</span><br><span class="line">        Predicate&lt;String&gt; exclusionFilter = grouping.getCandidateFilter();</span><br><span class="line">        <span class="comment">// 就是在 getImport() 方法中调用到 Group 实现类的 process() 方法</span></span><br><span class="line">        <span class="comment">// 返回值 Group 实现类的 selectImports 方法</span></span><br><span class="line">        grouping.getImports().forEach(entry -&gt; &#123;</span><br><span class="line">            <span class="type">ConfigurationClass</span> <span class="variable">configurationClass</span> <span class="operator">=</span> <span class="built_in">this</span>.configurationClasses.get(entry.getMetadata());</span><br><span class="line">            <span class="comment">// 拿到结果之后调用的又是  processImports方法， 这个就是和</span></span><br><span class="line">            <span class="comment">// @Import 导入的是一个普通类的流程一致的</span></span><br><span class="line">            processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter),</span><br><span class="line">                        Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)),</span><br><span class="line">                        exclusionFilter, <span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ConfigurationClassParser</span></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="built_in">this</span>.deferredImports) &#123;</span><br><span class="line">        <span class="comment">//  就是在这里调用到 Group 实现类的 process() 方法</span></span><br><span class="line">        <span class="built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">                deferredImport.getImportSelector());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.group.selectImports();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码看到，拿到解析和结果的结果之后，通过 <code>foreach</code> 调用 <code>processImports()</code> 方法，这个方法就是处理单个 <code>@Import</code> 导入的类的方法，至此整个流程就串起来了</p>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3自动装配案例</title>
    <url>/2023/ee343b448bf4/index.html</url>
    <content><![CDATA[<p>创建两个 <code>module</code></p>
<ol>
<li><code>demo-starter</code>, 这个 <code>module</code> 是为了让别的 <code>module</code> 引入的 <code>starter</code> 包</li>
<li><code>demo-main</code>, 这个 <code>module</code> 会引入 <code>demo-starter</code> 包</li>
</ol>
<p>两个 <code>module</code> 的包结构如下所示</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">demo-starter</span><br><span class="line">│  ├─<span class="attribute">src</span></span><br><span class="line">│  │  ├─<span class="selector-tag">main</span></span><br><span class="line">│  │  │  ├─java</span><br><span class="line">│  │  │  │  └─com</span><br><span class="line">│  │  │  │      └─example</span><br><span class="line">│  │  │  │          └─demostarter 包下有 StarterDemo 类</span><br><span class="line">│  │  │  └─resources</span><br><span class="line">│  │  │      └─META-INF</span><br><span class="line">│  │  │          └─spring  文件夹下有 org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.AutoConfiguration</span><span class="selector-class">.imports</span> 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>StarterDemo</code> 类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starterDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;StarterDemo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件内容如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.example</span><span class="selector-class">.demostarter</span>.StarterDemo</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">demo-main</span><br><span class="line">│  ├─.mvn</span><br><span class="line">│  │  └─<span class="keyword">wrapper</span></span><br><span class="line">│  ├─src</span><br><span class="line">│  │  ├─main</span><br><span class="line">│  │  │  ├─java</span><br><span class="line">│  │  │  │  └─com</span><br><span class="line">│  │  │  │      └─example</span><br><span class="line">│  │  │  │          └─demomain 包下有 DemoMainApplication 类</span><br><span class="line">│  │  │  └─resources</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>DemoMainApplication</code> 类内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoMainApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoMainApplication.class, args);</span><br><span class="line">        <span class="comment">// 只是引入了依赖而已，并没有手动注入 StarterDemo 类</span></span><br><span class="line">        <span class="comment">// 但是这个类也在 spring 容器中，就是因为自动装配</span></span><br><span class="line">        context.getBean(StarterDemo.class).starterDemo(); <span class="comment">// 会输出 “StarterDemo”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>demo-main</code> 的 <code>pom.xml</code> 依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot编写测试类</title>
    <url>/2023/9cd70dc15320/index.html</url>
    <content><![CDATA[<p>版本说明：</p>
<ol>
<li>SpringBoot3.x</li>
</ol>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRedis</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOne</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li><code>SpringBoot2.5</code> 之后测试类中已经不需要添加 <code>RunWith</code> 注解，只需要一个 <code>SpringBootTest</code></li>
<li>需要保证测试类所在的包和项目主配置类包一致（项目 <code>main</code> 方法所在的包），如果不一致，则可以按照下面方式配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = TestApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRedis</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOne</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture的使用</title>
    <url>/2023/f31e3a7691d6/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>以下内容参考《Java并发编程深度解析与实战》谭锋（第11章）</p>
<h2 id="为什么要用-CompletableFuture"><a href="#为什么要用-CompletableFuture" class="headerlink" title="为什么要用 CompletableFuture"></a>为什么要用 <code>CompletableFuture</code></h2><p>使用 <code>CompletableFuture</code> 是因为 <code>Future</code> 虽然可以获取线程执行结果，但是无法使用回调函数，只能依靠阻塞方法 <code>get()</code> 来获取线程结果，<code>CompletableFuture</code> 就是对 <code>Future</code> 的优化和增强，具体可以实现以下功能</p>
<ol>
<li>提供了类似 <code>Future</code> 的阻塞式获取结果和状态的方法</li>
<li>提供 <code>CompletionStage</code> 任务执行之后回调</li>
<li>多个异步任务的聚合，串行，并行等功能</li>
</ol>
<h2 id="构造异步方法"><a href="#构造异步方法" class="headerlink" title="构造异步方法"></a>构造异步方法</h2><p><code>CompletableFuture</code> 提供了 4 个静态方法来构造一个异步事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 含有返回值的异步方法（自定义线程池和默认线程池）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span>;</span><br><span class="line"><span class="comment">// 不含有返回值的异步方法（自定义线程池和默认线程池）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,Executor executor)</span></span><br></pre></td></tr></table></figure>
<div class="tabs" id="代码示例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="代码示例-1">supplyAsync</button><button type="button" class="tab " data-href="代码示例-2">runAsync示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="代码示例-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;线程执行结果：&quot;</span> + future.get());</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">线程执行结果：<span class="number">1</span></span><br><span class="line">主线程:main</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;线程执行结果：&quot;</span> + future.get());</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">线程执行结果：<span class="literal">null</span></span><br><span class="line">主线程:main</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="任务与和或的静态方法"><a href="#任务与和或的静态方法" class="headerlink" title="任务与和或的静态方法"></a>任务与和或的静态方法</h2><p><code>CompletableFuture</code> 中还有另外两个特殊的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收多个CompletableFuture无返回值任务，当所有的CompletableFuture任务执行结束后，返回一个新的CompletableFuture对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br><span class="line"><span class="comment">//接收多个CompletableFuture带有返回值任务，当任何一个CompletableFuture任务执行完成后，返回一个新的CompletableFuture对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title function_">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="allof()和anyof()"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="allof()和anyof()-1">allOf()</button><button type="button" class="tab " data-href="allof()和anyof()-2">anyOf()</button></ul><div class="tab-contents"><div class="tab-item-content active" id="allof()和anyof()-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Void&gt; future2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;before time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">    CompletableFuture.allOf(future1, future2).join();</span><br><span class="line">    now = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;after time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果，用了5s才返回，因为要所有都执行完成才返回，就需要看耗时最长的那个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before time:<span class="number">50</span>:<span class="number">33</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">2</span></span><br><span class="line">after time:<span class="number">50</span>:<span class="number">38</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="allof()和anyof()-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Void&gt; future2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;before time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">    CompletableFuture.anyOf(future1, future2).join();</span><br><span class="line">    now = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;after time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果，只用了3s就返回了，因为是其中一个执行完成就行，所以看耗时最短的那个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before time:<span class="number">53</span>:<span class="number">43</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">after time:<span class="number">53</span>:<span class="number">46</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="CompletionStage-详解"><a href="#CompletionStage-详解" class="headerlink" title="CompletionStage 详解"></a><code>CompletionStage</code> 详解</h2><ol>
<li><code>CompletionStage</code> 表示任务执行的一个阶段，每个异步任务都会返回一个新的 <code>CompletionStage</code> 对象</li>
<li>可以针对多个 <code>CompletionStage</code> 对象进行串行、并行或者聚合来进行下一阶段的操作</li>
</ol>
<p><code>CompletionStage</code> 类中提供了很多方法来实现多个 <code>CompletionStage</code> 的串行，并行等功能，可以按照如下方式进行分类</p>
<pre class="mermaid">flowchart LR
    A[CompletionStage]
    B["纯消费性方法 \n (上一个异步结果 \n 作为当前方法的参数进行计算 \n 都含有 Accept 关键字)"]
        B1[依赖单个 CompletionStage任务完成]
            B11["thenAccept(Consumer)"]
            B12["thenAcceptAsync(Consumer)"]
            B13["thenAcceptAsync(Consumer,Executor)"]
            B1-->B11 & B12 & B13
        B2[依赖两个 CompletionStage任务完成]
            B21["thenAcceptBoth(CompletionStage,Consumer)"]
            B22["thenAcceptBothAsync(CompletionStage,Consumer)"]
            B23["thenAcceptBothAsync(CompletionStage,Consumer,Executor)"]
            B2-->B21 & B22 & B23
        B3[依赖两个 CompletionStage任务中任何一个完成]
            B31["acceptEither(CompletionStage,Consumer)"]
            B32["acceptEitherAsync(CompletionStage,Consumer)"]
            B33["acceptEitherAsync(CompletionStage,Consumer,Executor)"]
            B3-->B31 & B32 & B33
        B-->B1 & B2 & B3

    C["有返回值类型的方法 \n (上一个异步结果 \n 作为当前方法的参数进行计算 \n 并且会产生新的有返回值\n的CompletionStage对象)"]
        C1[依赖单个 CompletionStage任务完成]
            C11["thenApply(Function)"]
            C12["thenApplyAsync(Function)"]
            C13["thenApplyAsync(Function,Executor)"]
            C1-->C11 & C12 & C13
        C2[依赖两个 CompletionStage任务完成]
            C21["thenCombine(CompletionStage,BiFunction)"]
            C22["thenCombineAsync(CompletionStage,BiFunction)"]
            C23["thenCombineAsync(CompletionStage,BiFunction,Executor)"]
            C2-->C21 & C22 & C23
        C3[依赖两个 CompletionStage任务中任何一个完成]
            C31["acceptToEither(CompletionStage,Function)"]
            C32["acceptToEitherAsync(CompletionStage,Function)"]
            C33["acceptToEitherAsync(CompletionStage,Function,Executor)"]
            C3-->C31 & C32 & C33
        C-->C1 & C2 & C3
    D["不消费也没有返回值类型的方法\n不依赖上个阶段的结果\n上一个阶段完成就执行指定的任务\n这类方法都包含 run 关键字"]
        D1[依赖单个 CompletionStage任务完成]
            D11["thenRun(Runnable)"]
            D12["thenRunAsync(Runnable)"]
            D13["thenRunAsync(FuncRunnabletion,Executor)"]
            D1-->D11 & D12 & D13
        D2[依赖两个 CompletionStage任务完成]
            D21["runAfterBoth(CompletionStage,Runnable)"]
            D22["runAfterBothAsync(CompletionStage,Runnable)"]
            D23["runAfterBothAsync(CompletionStage,Runnable,Executor)"]
            D2-->D21 & D22 & D23
        D3[依赖两个 CompletionStage任务中任何一个完成]
            D31["runAfterEither(CompletionStage,Runnable)"]
            D32["runAfterEitherAsync(CompletionStage,Runnable)"]
            D33["runAfterEitherAsync(CompletionStage,Runnable,Executor)"]
            D3-->D31 & D32 & D33
        D-->D1 & D2 & D3
    E[组合类型的方法]
        E1["thenCompose(Function,CompletionStage)"]
        E2["thenComposeAsync(Function,CompletionStage)"]
        E3["thenComposeAsync(Function,CompletionStage,Executor)"]
        E-->E1 & E2 & E3
    A-->B & C & D & E</pre>

<div class="tabs" id="代码示例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="代码示例-1">纯消费型</button><button type="button" class="tab " data-href="代码示例-2">有返回值类型</button><button type="button" class="tab " data-href="代码示例-3">不消费也没有返回值类型</button><button type="button" class="tab " data-href="代码示例-4">组合类型</button></ul><div class="tab-contents"><div class="tab-item-content active" id="代码示例-1"><figure class="highlight java"><figcaption><span>thenAccept</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thread main:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;first stage:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).thenAccept((Integer v)-&gt; &#123;</span><br><span class="line">        <span class="comment">// v 就是第一步返回的结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;then accept thread:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(v + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">thread main:main</span><br><span class="line">first stage:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">then accept thread:main</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>上面代码调用 <code>thenAccept()</code> 使用的是 <code>main</code> 线程，如果是使用 <code>thenAcceptAsync()</code>, 调用结果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread main:main</span><br><span class="line">first stage:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">then accept thread:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thread main:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第一个阶段任务返回的是 int 类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第二个阶段任务返回的是 String 类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;), (Integer i1, String s1) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> i1 + s1;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(completableFuture.get()); <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一个阶段任务等待4s</span></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;第一个阶段:&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第二个阶段任务等待2s</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;第二个阶段：&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;), () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终:&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        System.out.println(<span class="string">&quot;最终执行的任务&quot;</span>);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第二个阶段：<span class="number">2023</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">32</span></span><br><span class="line">最终:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">32</span></span><br><span class="line">最终执行的任务</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-4"><ol>
<li><code>thenCompose()</code>是多任务组合方法，它的作用是把两个<code>CompletionStage</code>任务进行组合达到串行执行的目的，也就是把第一个任务的执行结果作为参数传递给第二个任务执行，它有点类似于前面提到的<code>thenCombine()</code>方法，最大的不同在于<code>thenCompose()</code>方法中的任务存在先后关系，而<code>thenCombine()</code>中两个任务是并行执行的</li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><code>CompletionStage</code> 是链式处理，当前面的任务出现异常的时候，会导致后面的任务无法处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">    &#125;).thenRun(()-&gt;&#123;</span><br><span class="line">        <span class="comment">// 这里并不会打印，因为前面一个任务出现了异常，导致该任务无法执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二个任务&quot;</span>);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以在 <code>CompletionStage</code> 中也提供了异常处理的相关方法，主要有以下三类</p>
<pre class="mermaid">flowchart LR
    A[CompletionStage异常处理]
    B["以whenComplete前缀开头的方法\n不论前置的CompletionStage任务是正常执行结束\n还是出现异常，都能够触发特定的action\n这些方法都接收两个参数，\n一个是正常的结果，一个是异常\n没有异常时第二个就是null"]
        B1["whenComplete(BiConsumer)"]
        B2["whenCompleteAsync(BiConsumer)"]
        B3["whenCompleteAsync(BiConsumer,Executor)"]
        B-->B1 & B2 & B3
    C["以handle前缀开头的方法\n表示前置任务执行完成后，\n不管前置任务执行状态是正常还是异常，\n都会执行其中的函数fn，\n它和whenComplete类方法的\n作用几乎一致，不同点在于，\n这类方法是有返回值类型的方法"]
        C1["handle(BiFunction)"]
        C2["handleAsync(BiFunction)"]
        C3["handleAsync(BiFunction,Executor)"]
        C-->C1 & C2 & C3
    D["exceptionally()"]
        D1["exceptionally()方法接收一个函数fn，\n当上一个CompletionStage出现异常时，\n会把该异常作为参数传递给函数fn。\n该方法有一个CompletionStage的返回值，\n说明当前方法可以在接收到\n上一个阶段的异常时进行进一步处理，\n返回一个新的CompletionStage对象实例"]
        D-->D1
    A-->B & C & D</pre>

<h3 id="whenComplete类型方法"><a href="#whenComplete类型方法" class="headerlink" title="whenComplete类型方法"></a>whenComplete类型方法</h3><div class="tabs" id="whencomplete类型异常"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="whencomplete类型异常-1">没有异常的情况</button><button type="button" class="tab " data-href="whencomplete类型异常-2">有异常的情况</button></ul><div class="tab-contents"><div class="tab-item-content active" id="whencomplete类型异常-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).whenCompleteAsync((result, excep)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="number">1</span></span><br><span class="line">第一个任务的异常:<span class="literal">null</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="whencomplete类型异常-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).whenCompleteAsync((result, excep)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="literal">null</span></span><br><span class="line">第一个任务的异常:java.util.concurrent.CompletionException: java.lang.RuntimeException: 第一个任务出现异常</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.CompletionException: java.lang.RuntimeException: 第一个任务出现异常</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h3 id="handle-类型方法"><a href="#handle-类型方法" class="headerlink" title="handle 类型方法"></a>handle 类型方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).handle((result, excep) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep.toString().substring(<span class="number">1</span>, <span class="number">70</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;第二个任务的结果&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最终的执行结果</span></span><br><span class="line">    System.out.println(completableFuture.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="literal">null</span></span><br><span class="line">第一个任务的异常:ava.util.concurrent.CompletionException: java.lang.RuntimeException: </span><br><span class="line">第二个任务的结果</span><br></pre></td></tr></table></figure>
<h3 id="exceptionally-方法"><a href="#exceptionally-方法" class="headerlink" title="exceptionally()方法"></a>exceptionally()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).exceptionally(exec -&gt; &#123;</span><br><span class="line">        <span class="comment">// exceptionally 里面的返回值需要和前面的 stage 返回值保持一致</span></span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最终的执行结果</span></span><br><span class="line">    System.out.println(completableFuture.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Future的使用</title>
    <url>/2023/9f417cc2ea5e/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>java</code> 中异步执行任务可以让任务类实现 <code>Runnable</code> 接口即可，但是使用 <code>Runnable</code> 接口执行的任务无法获取返回值，所以 <code>java</code> 在 <code>jdk1.5</code> 版本中增加了 <code>Future</code> 接口和 <code>Callable</code></p>
<span id="more"></span>
<h2 id="先给结论"><a href="#先给结论" class="headerlink" title="先给结论"></a>先给结论</h2><ol>
<li><code>Future</code> 可以使用 <code>get()</code> 方法获取线程调用的结果，该方法会阻塞主线程</li>
<li><code>Future</code> 类有提供 <code>isDone()</code> 方法来判断线程是否执行完成，该方法不会阻塞</li>
<li><code>Future</code> 可以拿到线程结果是因为在线程任务类（<code>FutureTask</code>）中执行完任务之后将结果设置到了 <code>Future</code> 中【先有个概念，下文会分析】</li>
</ol>
<h2 id="Future-的使用示例"><a href="#Future-的使用示例" class="headerlink" title="Future 的使用示例"></a>Future 的使用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="comment">// 这里submit 方法是 &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start execute:&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 非阻塞调用，不断查询结果是否完成</span></span><br><span class="line">        <span class="keyword">while</span> (!future.isDone()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程未执行完成&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若任务未执行完成，get 方法会阻塞主线程</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;after execute Time:&quot;</span> +  DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// 关闭线程池，否则jvm进程会一直在运行</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">线程未执行完成</span><br><span class="line">start execute:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">35</span></span><br><span class="line">线程未执行完成</span><br><span class="line">线程未执行完成</span><br><span class="line">线程未执行完成</span><br><span class="line">after execute Time:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">39</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311172311584.png" alt="FutureTask核心类"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>从上面类图看到核心类是 <code>FutureTask</code>, 这个类实现了 <code>Future</code> 和 <code>Runnable</code>, 并且在构造函数中需要传入 <code>Callable</code></p>
<ol>
<li><code>FutureTask</code> 和 <code>Runnable</code> 接口的关系是实现，目的是便于向上转型传参，线程池中接收任务的顶层接口就是 <code>Runnable</code></li>
<li><code>FutureTask</code> 类和 <code>Callable</code> 实现类的关系是 <strong>组合</strong>，下面是 <code>FutureTask</code> 的构造方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.callable = callable;</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>描述上面两点是因为先弄清楚 <code>FutureTask</code> 和 <code>Callable</code> 和 <code>Runnable</code> 三者之间的关系，这样才能知道最终的任务类是哪个（任务类的 <code>run()</code> 方法就是重点了）</p>
<pre class="mermaid">sequenceDiagram
    participant A as ExecutorService
    participant B as AbstractExecutorService
    participant C as ThreadPoolExecutor
    A->>B: submit(Callable)
    Note over A,B: 将Callable转换成FutureTask
    B->>B: RunnableFuture = new FutureTask<T>(callable)
    Note over B,C: 将FutureTask转换成RunnableFuture
    B->>C: execute(Runnable command) {
    B->>A: return RunnableFuture</T></pre>
<p>下面再跟着代码看一遍这个过程</p>
<ol>
<li><code>TestThread#main</code> 中创建线程池并调用 <code>submit()</code> 方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 接下来看submit(Callable) 方法</span></span><br><span class="line">Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;start execute:&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><code>submit()</code> 方法最终会调用到 <code>java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable&lt;T&gt;)</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">// 这里就是根据 Callable 生成 FutureTask 类</span></span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">    <span class="comment">// 接下来看 execute 方法，这个就是 ThreadPoolExecutor 中的 execute() 方法</span></span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="title function_">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;T&gt;(callable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>java.util.concurrent.ThreadPoolExecutor#execute(Runnable)</code> 这个就是线程池的执行逻辑，参考</li>
</ol>
<p><code>&#123;% post_path 线程池实现原理 %&#125;</code><br>通过上面的步骤已经知道线程池中使用的 <strong>任务类</strong> 是 <code>FutureTask</code>，那么就一定会调用 <code>FutureTask</code> 类中的 <code>run()</code> 方法</p>
<h2 id="FutureTask-类中重要属性"><a href="#FutureTask-类中重要属性" class="headerlink" title="FutureTask 类中重要属性"></a>FutureTask 类中重要属性</h2><p>但是在看 <code>run()</code> 方法之前先看一下 <code>FutureTask</code> 类中比较重要的两个属性，在后面的方法中会遇到</p>
<ol>
<li>描述任务状态的字段 <code>state</code></li>
<li>结果保存字段 <code>Object outcome</code></li>
<li>等待队列 <code>volatile WaitNode waiters;</code></li>
</ol>
<h3 id="FutureTask-任务状态字段-state"><a href="#FutureTask-任务状态字段-state" class="headerlink" title="FutureTask 任务状态字段 state"></a>FutureTask 任务状态字段 state</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NEW</span>          <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COMPLETING</span>   <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NORMAL</span>       <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXCEPTIONAL</span>  <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span>    <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERRUPTING</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERRUPTED</span>  <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<h4 id="state-状态转换流程"><a href="#state-状态转换流程" class="headerlink" title="state 状态转换流程"></a>state 状态转换流程</h4><pre class="mermaid">graph LR
    A[new]
    B[COMPLETING]
    C[NORMAL]
    D[EXCEPTIONAL]
    E[CANCELLED]
    F[INTERRUPTING]
    G[INTERRUPTED]
    A--"set() or setException()"-->B-->C & D
    A--"cancel(false)"-->E
    A--"cancel(true)"-->F-->G</pre>
<h3 id="Object-outcome"><a href="#Object-outcome" class="headerlink" title="Object outcome"></a><code>Object outcome</code></h3><p><code>outcome</code> 字段就是用来保存线程执行的结果的</p>
<h3 id="等待队列-WaitNode-waiters"><a href="#等待队列-WaitNode-waiters" class="headerlink" title="等待队列 WaitNode waiters"></a>等待队列 <code>WaitNode waiters</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WaitNode</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    <span class="keyword">volatile</span> WaitNode next;</span><br><span class="line">    WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>waiters 是一个链表，waiters 字段就是这个链表的头部</li>
<li>因为可以有多个线程去调用 <code>Future.get()</code> 方法，当没有获取到结果时，所有调用 <code>get()</code> 方法的线程都是需要阻塞的</li>
</ol>
<h2 id="FutureTask-的-run-方法"><a href="#FutureTask-的-run-方法" class="headerlink" title="FutureTask 的 run() 方法"></a>FutureTask 的 run() 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. state 记录的是当前任务的状态</span></span><br><span class="line">    <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">        !RUNNER.compareAndSet(<span class="built_in">this</span>, <span class="literal">null</span>, Thread.currentThread()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="literal">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="type">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2. 构造 FutureTask 时将 Callable 传递进来了，在这里进行调用</span></span><br><span class="line">                result = c.call();</span><br><span class="line">                <span class="comment">// 设置调用完成的标识</span></span><br><span class="line">                ran = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="literal">null</span>;</span><br><span class="line">                ran = <span class="literal">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                <span class="comment">// 3. 调用完成之后设置结果</span></span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        runner = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来看看注释中的第 <code>3</code> 步， 调用完成之后设置结果</p>
<h3 id="set-V-v-方法"><a href="#set-V-v-方法" class="headerlink" title="set(V v) 方法"></a>set(V v) 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(V v)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (STATE.compareAndSet(<span class="built_in">this</span>, NEW, COMPLETING)) &#123;</span><br><span class="line">        <span class="comment">// 1. 将执行的结果赋值给 outcome</span></span><br><span class="line">        outcome = v;</span><br><span class="line">        STATE.setRelease(<span class="built_in">this</span>, NORMAL); <span class="comment">// final state</span></span><br><span class="line">        <span class="comment">// 2. 通知阻塞的线程（唤醒）</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将结果赋值给 <code>outcome</code> 属性之后，还调用了 <code>finishCompletion()</code> 方法，这个方法的作用是什么呢？这个其实就是 <strong>生产者消费者</strong> 模型的应用</p>
<h2 id="Future-中生产者消费者模型"><a href="#Future-中生产者消费者模型" class="headerlink" title="Future 中生产者消费者模型"></a>Future 中生产者消费者模型</h2><ol>
<li>调用 <code>Future.get()</code> 方法若线程还没有执行完成，主线程会 <strong>阻塞</strong>，当任务完成后会任务类中会 <strong>唤醒</strong> 阻塞的线程</li>
<li>阻塞是阻塞在 <code>get()</code> 方法，那唤醒呢？ 其实就是上面的 <code>finishCompletion()</code> 知道了方法的作用之后，我们再看看看 <code>get()</code> 方法和 <code>finishCompletion()</code> 方法</li>
</ol>
<h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">    <span class="comment">// 先获取任务状态，任务没有完成，就进行阻塞等待</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING)</span><br><span class="line">        s = awaitDone(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">return</span> report(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>阻塞等待是调用的 <code>awaitDone()</code> 方法, 还是先总结一下这个方法的作用再看源码</p>
<ol>
<li>任务未完成时，将当前线程封装成一个 <code>WaitNode</code> 对象，添加到 <code>WaitNode waiters</code> 数属性的后面</li>
<li>保存到等待链表之后，就使用 <code>LockSupport.park(this)</code> 来阻塞当前线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">awaitDone</span><span class="params">(<span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="number">0L</span>;    <span class="comment">// Special value 0L means not yet parked</span></span><br><span class="line">    <span class="type">WaitNode</span> <span class="variable">q</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">queued</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="literal">null</span>)</span><br><span class="line">                q.thread = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING)</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            removeWaiter(q);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>)</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            <span class="comment">// 由当前线程构成一个 WaitNode 对象</span></span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">WaitNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!queued)</span><br><span class="line">            <span class="comment">// 将构造的 waitNode 对象添加到 waiters 链表中【可能有人有点疑惑，这两个逻辑处在不同 else if 条件中，为什么会同时执行到，其实这里不是同时执行到，而是串行的，因为这整块代码在一个for循环中，前面进行一个else分支后，下一次循环条件就改变了，导致进入到了不同的else分支中】</span></span><br><span class="line">            queued = WAITERS.weakCompareAndSet(<span class="built_in">this</span>, q.next = waiters, q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> parkNanos;</span><br><span class="line">            <span class="keyword">if</span> (startTime == <span class="number">0L</span>) &#123; <span class="comment">// first time</span></span><br><span class="line">                startTime = System.nanoTime();</span><br><span class="line">                <span class="keyword">if</span> (startTime == <span class="number">0L</span>)</span><br><span class="line">                    startTime = <span class="number">1L</span>;</span><br><span class="line">                parkNanos = nanos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">elapsed</span> <span class="operator">=</span> System.nanoTime() - startTime;</span><br><span class="line">                <span class="keyword">if</span> (elapsed &gt;= nanos) &#123;</span><br><span class="line">                    removeWaiter(q);</span><br><span class="line">                    <span class="keyword">return</span> state;</span><br><span class="line">                &#125;</span><br><span class="line">                parkNanos = nanos - elapsed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state &lt; COMPLETING)</span><br><span class="line">                LockSupport.parkNanos(<span class="built_in">this</span>, parkNanos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 阻塞当前线程</span></span><br><span class="line">            LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="finishCompletion-方法"><a href="#finishCompletion-方法" class="headerlink" title="finishCompletion() 方法"></a><code>finishCompletion()</code> 方法</h3><p>看完了 <code>get()</code> 阻塞方法，就可以来看看唤醒阻塞的线程方法 <code>finishCompletion()</code> 了, 同样的先简单总结一下该方法做的事情</p>
<ol>
<li>遍历 <code>waiters</code> 从里面获取阻塞的线程</li>
<li>获取到阻塞的线程之后，调用 <code>LockSupport.unpark(thread)</code> 来唤醒对应的线程<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishCompletion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="literal">null</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (WAITERS.weakCompareAndSet(<span class="built_in">this</span>, q, <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> q.thread;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                    q.thread = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 唤醒线程</span></span><br><span class="line">                    LockSupport.unpark(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">WaitNode</span> <span class="variable">next</span> <span class="operator">=</span> q.next;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.next = <span class="literal">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                q = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">    callable = <span class="literal">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Semaphore使用和原理</title>
    <url>/2023/1dbf4f386c66/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p><code>Semaphore</code> 的主要功能是用来限制对某个资源同时访问的线程数量，它有两个核心方法</p>
<ol>
<li><code>acquire()</code>：获取一个许可，如果没有就阻塞</li>
<li><code>release()</code>：释放一个许可 然后唤醒一个等待的线程</li>
</ol>
<h2 id="Semaphore-常用方法"><a href="#Semaphore-常用方法" class="headerlink" title="Semaphore 常用方法"></a>Semaphore 常用方法</h2><ol>
<li><code>Semaphore(permits,fair)</code>，<code>permits</code> 表示令牌数，<code>fair</code> 表示公平性</li>
<li><code>acquire(permits)</code>，获取指定 <code>permits</code> 数量的令牌，如果许可证数量不足，则会阻塞当前线程</li>
<li><code>tryAcquire(permits)</code>，尝试获取指定 <code>permits</code> 数量的令牌，此过程是非阻塞的，如果令牌数不够，则返回 <code>false</code>，否则返回 <code>true</code></li>
<li><code>release(permits)</code>，释放指定 <code>permits</code> 数量的令牌</li>
<li><code>drainPermits()</code>，当前线程获得剩下的所有可用令牌。</li>
<li><code>hasQueuedThread()</code>，判断当前 <code>Semaphore</code> 实例上是否存在正在等待令牌的线程。</li>
</ol>
<h2 id="Semaphore的使用原理图"><a href="#Semaphore的使用原理图" class="headerlink" title="Semaphore的使用原理图"></a>Semaphore的使用原理图</h2><pre class="mermaid">flowchart TB
    subgraph A["Threads"]
        direction LR
        A1["thread"]
        A2["thread"]
        A3["......"]
        A4["thread"]
        A1~~~A2~~~A3~~~A4
    end
    subgraph B["Semaphore"]
        B1["1 (permits=2)"]
        B2["2 (permits=2)"]
        B1~~~B2
    end
    C[resources]
    A--"acquire()"-->B
    A--"acquire()"-->B
    A--"......"-->B
    A--"acquire()"-->B
    B--"同时只允许两个线程访问"-->C
    B--"同时只允许两个线程访问"-->C</pre>

<h2 id="Semaphore的使用场景"><a href="#Semaphore的使用场景" class="headerlink" title="Semaphore的使用场景"></a>Semaphore的使用场景</h2><ol>
<li>限流，限制同时访问某个资源的线程数量</li>
<li>并发控制，比如数据库连接池，限制同时访问数据库的线程数量</li>
<li>信号量，用来控制同时访问某个资源的线程数量</li>
</ol>
<h2 id="Semaphore-使用案例"><a href="#Semaphore-使用案例" class="headerlink" title="Semaphore 使用案例"></a>Semaphore 使用案例</h2><p>如下代码，创建了一个线程池，提交了20个任务，每个任务中都等待1s，模拟方法调用耗时，正常来说可以20个任务同时执行，但是现在只允许2个任务同时执行，可以看到打印的结果是2个任务同时执行，剩下的任务都被阻塞了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSemaphore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">SemaphoreThread</span>(semaphore));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SemaphoreThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SemaphoreThread</span><span class="params">(Semaphore semaphore)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.semaphore = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 离开&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span> 进入</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span> 进入</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span> 离开</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span> 离开</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span> 进入</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-8</span> 进入</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span> 离开</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-7</span> 进入</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-8</span> 离开</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>可以看到最多允许两个线程进入执行，剩下的线程都被阻塞了。</p>
<h2 id="Semaphore-实现原理"><a href="#Semaphore-实现原理" class="headerlink" title="Semaphore 实现原理"></a>Semaphore 实现原理</h2><ol>
<li><code>Semaphore</code> 实际上也是基于 <code>AQS</code> 中的共享锁来实现的</li>
<li>在 <code>Semaphore</code> 中允许多个线程获得令牌被唤醒<br>以下面代码为例</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  使用部分</span></span><br><span class="line"><span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">semaphore.acquire();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码部分， new Semaphore 实际创建了一个 NonfairSync 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>)</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(<span class="keyword">permits</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2694183684443567898L</span>;</span><br><span class="line"></span><br><span class="line">    NonfairSync(<span class="type">int</span> <span class="keyword">permits</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里实际是设置 AQS 的 state 变量的值</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">permits</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是重写了获取非共享锁的逻辑</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1192457210091910933L</span>;</span><br><span class="line"></span><br><span class="line">    Sync(<span class="type">int</span> <span class="keyword">permits</span>) &#123;</span><br><span class="line">        setState(<span class="keyword">permits</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPermits</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取非共享锁实际就是获取 AQS 中变量的值，然后减去此次需要获取到  permits 数量， 如果这个数量&lt;0 代表获取令牌失败</span></span><br><span class="line">    <span class="comment">//  否则就是设置令牌成功，同时将剩余令牌数量使用 cas 方式更新的 state 变量中</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nonfairTryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">            <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                compareAndSetState(available, remaining))</span><br><span class="line">                <span class="keyword">return</span> remaining;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  该方法是释放令牌的逻辑，和获取锁是类似的，也是先获取 AQS 中 state 变量的值，然后加上释放的令牌数量</span></span><br><span class="line">    <span class="comment">//  然后再使用 cas 方式更新 state 变量的值即可</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + releases;</span><br><span class="line">            <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum permit count exceeded&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal的使用和原理</title>
    <url>/2023/15c7fbcaf228/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="ThreadLocal的使用场景"><a href="#ThreadLocal的使用场景" class="headerlink" title="ThreadLocal的使用场景"></a>ThreadLocal的使用场景</h2><ul>
<li>解决线程安全问题，因为 <code>ThreadLocal</code> 内部维护了一个 <code>ThreadLocalMap</code>，每个线程都可以将自己的变量存储到 <code>ThreadLocalMap</code> 中，从而实现了线程间的变量共享。</li>
<li>解决资源共享问题</li>
<li>解决线程间数据传递问题</li>
</ul>
<h2 id="2-ThreadLocal的使用"><a href="#2-ThreadLocal的使用" class="headerlink" title="2. ThreadLocal的使用"></a>2. ThreadLocal的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">100</span>);</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">200</span>);</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中定义的 <code>threadLocal</code> 是一个静态变量，并且两个线程都使用了，但是不同线程中使用的 <code>threadLocal</code> 进行 <code>set</code> 和 <code>get</code> 的都是对应线程的值，其他线程操作 <code>threadLocal</code> 不会影响到当前线程的值。</p>
<h2 id="ThreadLocal-相关对象的关联关系"><a href="#ThreadLocal-相关对象的关联关系" class="headerlink" title="ThreadLocal 相关对象的关联关系"></a>ThreadLocal 相关对象的关联关系</h2><pre class="mermaid">graph LR
    subgraph A[" Thread 对象"]
        subgraph B1["ThreadLocalMap 成员变量"]
            subgraph C["Entry 对象"]
                C1["key 引用"]
                C2["value 引用"]
            end
        end
    end
    B["ThreadLocal 对象"]
    C1-. "虚引用" .->B
    C2--"强引用"-->D
    D["value 值"]</pre>

<p>根据上述对象关联图我们再来看看 <code>ThreadLocal</code> 源码</p>
<h2 id="ThreadLocal-源码"><a href="#ThreadLocal-源码" class="headerlink" title="ThreadLocal 源码"></a>ThreadLocal 源码</h2><p>从上面 ThreadLocal 的使用示例中可以看到，涉及的几个重要的方法如下</p>
<ol>
<li>new ThreadLocal()</li>
<li>ThreadLocal.set()</li>
<li>ThreadLocal.get()</li>
<li>ThreadLocal.remove()</li>
</ol>
<p>先看创建 set 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 第一次使用是走这个分支，创建 ThreadLocalMap 对象</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  第一个参数就是 Thread 对象，这里是将 创建的 ThreadLocalMap 对象赋值给 Thread 对象中的 threadLocals 属性</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来再看看创建 ThreadLocalMap 方法, 从上面对象关联图可知，ThreadLocalMap 类是 ThreadLocal 的一个内部类，Entry 又是一个 ThreadLocalMap 的一个内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Entry 有两个属性，一个用来存储 key, 一个用来存储 value,这个key就是 ThreadLocal 对象，</span></span><br><span class="line"><span class="comment">         value 就是 ThreadLocal 对象中存储的值, 从下面看 Entry 中只有一个 value 属性，</span></span><br><span class="line"><span class="comment">         是因为 Entry 继承了 WeakReference， 所以在父类中最终还有一个 private T referent;  属性，key 就是存在这个属性中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="built_in">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建 ThreadLocalMap 相关的逻辑， 其实就是将 key 和 value 组合起来变成一个 Entry 对象,</span></span><br><span class="line"><span class="comment">         然后将这个 Entry 对象放到一个 ThreadLocalMap 的数组中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = <span class="keyword">new</span> <span class="title class_">Entry</span>[INITIAL_CAPACITY];</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            table[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(firstKey, firstValue);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal-的内存泄露问题"><a href="#ThreadLocal-的内存泄露问题" class="headerlink" title="ThreadLocal 的内存泄露问题"></a>ThreadLocal 的内存泄露问题</h2><p>执行完下面的代码之后有堆中的 ThreadLocal 有几个引用呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Integer&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">tl.set(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>表面看只有栈中的 <code>tl</code>变量指向了 <code>ThreadLocal</code> 实例，其实不是的，从上面对象关联图中我们知道，<code>Entry</code> 对象的 <code>key</code> 就是一个 <code>ThreadLocal</code> 实例的引用，所以即使栈中的引用断开了，但是 <code>Entry</code> 中的引用还在，这也是为什么 <code>Entry</code> 中的 <code>key</code> 要使用弱引用的原因。</p>
<p>即使 <code>Entry</code> 中的 <code>key</code> 使用了弱引用，可以让 <code>Key</code> 被回收，但是 <code>Entry</code> 中的 <code>value</code> 是一个强引用，依然不会被回收，这个应该如何解决呢？</p>
<p>在 <code>ThreadLocal</code> 中提供了 <code>remove()</code> 方法，所以需要我们在使用完 <code>ThreadLocal</code> 之后调用 <code>remove()</code> 方法</p>
<h2 id="线程池使用-ThreadLocal-的坑"><a href="#线程池使用-ThreadLocal-的坑" class="headerlink" title="线程池使用 ThreadLocal 的坑"></a>线程池使用 ThreadLocal 的坑</h2><p>如果在线程中使用了 <code>ThreadLocal</code> 那么一定要在使用完之后（也就是在此次处理不再需要从 <code>ThreadLocal</code> 中调用 <code>get()</code> 方法获取值了）调用 <code>remove()</code> 方法， 因为线程池中线程是复用的，如果没有调用 <code>remove()</code> 方法当下次复用到之前的线程时从 <code>ThreadLocal</code> 中获取的就可能是之前设置的值</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile解决可见性和有序性</title>
    <url>/2023/d41d7b790ebc/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="什么是可见性"><a href="#什么是可见性" class="headerlink" title="什么是可见性"></a>什么是可见性</h2><blockquote>
<p>如果一个线程对一个共享变量进行了修改，而其他线程不能及时地读取修改之后的值，那么我们认为在多线程环境下该共享变量存在可见性问题</p>
</blockquote>
<h2 id="可见性问题的根源"><a href="#可见性问题的根源" class="headerlink" title="可见性问题的根源"></a>可见性问题的根源</h2><p><code>cpu</code> 的速度远远高于内存，但是<code>cpu</code> 执行的指令和数据都是来源于内存，所以在 <code>cpu</code> 在等待内存的数据时，一直处于空闲状态，这个过程很显然会导致<code>CPU</code>资源的浪费，为了解决这个问题，开发者在硬件设备、操作系统及编译器层面做了很多优化</p>
<ul>
<li>在<code>CPU</code>层面增加了寄存器，来保存一些关键变量和临时数据，还增加了<code>CPU</code>高速缓存，以减少<code>CPU</code>和内存的I&#x2F;O等待时间</li>
<li>在操作系统层面引入了进程和线程，在当前进程或线程处于阻塞状态时，<code>CPU</code>会把自己的时间片分配给其他线程或进程使用，从而减少<code>CPU</code>的空闲时间，最大化地提升<code>CPU</code>的使用率</li>
<li>在编译器层面增加指令优化，减少与内存的交互次数</li>
</ul>
<p>上述优化都是为了提升 <code>cpu</code> 利用率，但是这些优化也会导致可见性问题</p>
<h2 id="cpu-缓存"><a href="#cpu-缓存" class="headerlink" title="cpu 缓存"></a>cpu 缓存</h2><h3 id="cpu-缓存伪共享问题"><a href="#cpu-缓存伪共享问题" class="headerlink" title="cpu 缓存伪共享问题"></a>cpu 缓存伪共享问题</h3><ol>
<li><code>cpu</code> 的缓存是以缓存行为单位进行缓存的，在 32 位和 64 位架构中 <code>cpu</code> 缓存行的大小都是 64 字节</li>
<li>假设有两个 字段 <code>int x = 0, int y =0</code> 现在有两个线程分别修改 <code>x</code> 和 修改 <code>y</code>，假设这两个线程是在不同的 <code>cpu</code> 执行，那么每个 <code>cpu</code> 都会加载对应的变量到自己的 <code>cpu</code> 缓存中，但是 <code>x</code> 和 <code>y</code> 加起来才 8 个字节，所以这两个变量一定是在同一个缓存行中， 当线程1（修改 <code>x</code> 的线程）修改了<code>x</code> 后，因为缓存一致性原理，导致第二个 <code>cpu</code> 中的 <code>x</code> 需要失效，间接导致 第二个 <code>cpu</code> 中的 <code>y</code> 的缓存也失效了，这就是缓存伪共享问题</li>
<li>在 <code>java</code> 中可以对字段或类添加 <code>@Contented</code> 注解让每个字段独自占用一个缓存行</li>
</ol>
<h3 id="cpu-高速缓存"><a href="#cpu-高速缓存" class="headerlink" title="cpu 高速缓存"></a>cpu 高速缓存</h3><p>现代 <code>cpu</code> 一般都有三级缓存</p>
<ol>
<li>1，2 级缓存是在 <code>cpu</code> 内部</li>
<li>三级缓存是所有 <code>cpu</code> 共享</li>
<li>一级缓存包含 <code>L1D</code>（数据缓存）和 <code>L1I</code>(指令缓存)</li>
</ol>
<h3 id="缓存一致性的解决方案"><a href="#缓存一致性的解决方案" class="headerlink" title="缓存一致性的解决方案"></a>缓存一致性的解决方案</h3><ol>
<li>所谓的缓存一致性是指不同的线程加载同一个共享变量到不同的 <code>cpu</code> 进行修改，这就会导致不同 <code>cpu</code> 缓存中相同变量的缓存值内容不同</li>
<li>为了解决缓存一致性问题 在 <code>cpu</code> 层面引入了 <strong>总线锁</strong> 和 <strong>缓存锁机制</strong></li>
</ol>
<blockquote>
<p>为了解决缓存一致性问题，开发者在 CPU 层面引入了总线锁和缓存锁机制。</p>
<p>在了解锁之前，我们先介绍一下总线。所谓的总线，就是 CPU 与内存、输入&#x2F;输出设备传专递信息的公共通道（也叫前端总线），当CPU访问内存进行数据交互时，必须经过总线来传输，那么什么是总线锁呢？</p>
<p>简单来说，总线锁就是在总线上声明一个 L0ck# 信号，这个信号能够确保共享内存只有当前 CPU 可以访问，其他的处理器请求会被阻塞，这就使得同一时刻只有一个处理能够访问共享内存，从而解决了缓存不一致的问题。但是这种做法产生的代价是，CPU 的利用率直线下降，很显然这是无法让人接受的，于是从 P6 系列的处理器开始增加了缓存锁的机制。</p>
<p>缓存锁指的是，如果当前 CPU 访问的数据已经缓存在其他 CPU 的高速缓存中，那么 CPU 不会在总线上发出 Lock# 信号，而是采用<strong>缓存一致性协议</strong>来保证多个 CPU 的缓存一致性。</p>
<p>CPU 最终用哪种锁来解决缓存一致性问题，取决于当前 CPU 是否支持缓存锁，如果不支持，就会采用总线锁。还有一种情况是，当前操作的数据不能被缓存在处理器内部，或者操作的数据跨多个缓存行时，也会使用总线锁。</p>
</blockquote>
<h3 id="缓存一致性协议"><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h3><ol>
<li>缓存锁通过缓存一致性协议来保证缓存的一致性，那么什么是缓存一致性协议呢</li>
<li>不同的 <code>CPU</code> 类型支持的缓存一致性协议也有区别，比如<code>MSI、MESI、MOSI、MESIF</code>协议等，比较常见的是MESI（<code>Modified Exclusive Shared Or Invalid</code>）协议</li>
</ol>
<h4 id="MESI-缓存一致性协议定义的-cpu-缓存行的四种状态"><a href="#MESI-缓存一致性协议定义的-cpu-缓存行的四种状态" class="headerlink" title="MESI 缓存一致性协议定义的 cpu 缓存行的四种状态"></a>MESI 缓存一致性协议定义的 cpu 缓存行的四种状态</h4><ol>
<li><code>M (Modified)</code>: 只有当前 <code>cpu</code> 含有数据的缓存，并且缓存数据已经被修改了，和主内存数据不一致 </li>
<li><code>E (Exclusive)</code>: 只有当前 <code>cpu</code> 含有数据的缓存, 缓存还没有被修改，和主内存数据一致</li>
<li><code>S (Shared)</code>: 多个 <code>cpu</code> 都含有同一份数据的缓存，所有 <code>cpu</code> 上的缓存都没有被修改</li>
<li><code>I (Invalid)</code>: 缓存已失效</li>
</ol>
<h4 id="MESI-协议针对缓存行的事件监听"><a href="#MESI-协议针对缓存行的事件监听" class="headerlink" title="MESI 协议针对缓存行的事件监听"></a>MESI 协议针对缓存行的事件监听</h4><p>随着 <code>cpu</code> 对缓存行的操作，缓存行会发生状态转移，也就是从一种状态到另外一种状态，所以 <code>MESI</code> 协议对缓存行的不同状态有不同的事件监听</p>
<ol>
<li><code>M</code> 状态的监听： 如果一个缓存行处于 <code>M</code> 状态，则必须监听所有试图读取该缓存行对应的主内存地址的操作，如果监听到有这类操作的发生，则必须在该操作执行之前把缓存行中的数据写回主内存</li>
<li><code>S</code> 状态的监听： 如果一个缓存行处于 <code>S</code> 状态，那么它必须要监听使该缓存行状态设置为 <code>Invalid</code> 或者对缓存行执行 <code>Exclusive</code> 操作的请求，如果存在，则必须要把当前缓存行状态设置为 <code>Invalid</code></li>
<li><code>E</code> 状态的监听： 如果一个缓存行处于 <code>E</code> 状态，那么它必须要监听其他试图读取该缓存行对应的主内存地址的操作，一旦有这种操作，那么该缓存行需要设置为 <code>Shared</code></li>
</ol>
<h4 id="缓存行事件监听的实现原理"><a href="#缓存行事件监听的实现原理" class="headerlink" title="缓存行事件监听的实现原理"></a>缓存行事件监听的实现原理</h4><ol>
<li>监听过程是基于 <code>CPU</code> 中的 <code>Snoopy</code> 嗅探协议来完成的，该协议要求每个 <code>CPU</code> 缓存都可以监听到总线上的数据事件并做出相应的反应</li>
<li>所有 <code>CPU</code> 都会监听地址总线上的事件，当某个处理器发出请求时，其他 <code>CPU</code> 会监听到地址总线的请求，根据当前缓存行的状态及监听的请求类型对缓存行状态进行更新</li>
</ol>
<h4 id="MESI-状态变化示例"><a href="#MESI-状态变化示例" class="headerlink" title="MESI 状态变化示例"></a>MESI 状态变化示例</h4><p>参考 《Java并发编程深度解析与实战》– 谭峰 3.2 节（深度理解可见性问题的本质）</p>
<h2 id="volatile-实现原理"><a href="#volatile-实现原理" class="headerlink" title="volatile 实现原理"></a>volatile 实现原理</h2><ol>
<li><code>volatile</code> 可以解决内存可见性问题就是基于<strong>缓存锁&#x2F;总线锁</strong>的方式达到的一致性</li>
<li>总线锁和缓存锁通过 <code>Lock#</code> 信号触发，如果当前<code>CPU</code>支持缓存锁，则不会在总线上声明<code>Lock#</code>信号，而是基于缓存一致性协议来保证缓存的一致性。如果<code>CPU</code>不支持缓存锁，则会在总线上声明<code>Lock#</code>信号锁定总线，从而保证同一时刻只允许一个<code>CPU</code>对共享内存的读写操作</li>
</ol>
<h2 id="内存屏障-解决cpu层面的指令重排"><a href="#内存屏障-解决cpu层面的指令重排" class="headerlink" title="内存屏障-解决cpu层面的指令重排"></a>内存屏障-解决cpu层面的指令重排</h2><blockquote>
<p>CPU 本身只是一个工具，它主要用于接收和执行指令，并不清楚什么时候应该优化，什么时候不应该优化，因此 CPU 设计者们提供了一个内存屏障指令，开发者可以在合适的位置插入内存屏障指令，相当于告诉 CPU指令之间的关系，避免 CPU 内存系统重排序问题的发生。</p>
</blockquote>
<h3 id="什么是指令重排"><a href="#什么是指令重排" class="headerlink" title="什么是指令重排"></a>什么是指令重排</h3><p>指令重排序是指编译器或<code>CPU</code>为了优化程序的执行性能而对指令进行重新排序的一种手段，重排序会带来可见性问题，所以在多线程开发中必须要关注并规避重排序，<code>java</code> 从源代码到运行会经过两个阶段的重排</p>
<ol>
<li>编译器重排序，就是在编译过程中，编译器根据上下文分析对指令进行重排序，目的是减少<code>CPU</code>和内存的交互，重排序之后尽可能保证<code>CPU</code>从寄存器或缓存行中读取数据</li>
<li>处理器重排序，处理器重排序分为两个部分</li>
<li>并行指令集重排序，这是处理器优化的一种，处理器可以改变指令的执行顺序</li>
<li>内存系统重排序，这是处理器引入<code>Store Buffer</code>缓冲区延时写入产生的指令执行顺序不一致的问题</li>
</ol>
<h3 id="指令重排需要遵循-as-if-serial语义"><a href="#指令重排需要遵循-as-if-serial语义" class="headerlink" title="指令重排需要遵循 as-if-serial语义"></a>指令重排需要遵循 as-if-serial语义</h3><p><code>as-if-serial</code> 表示所有的程序指令都可以因为优化而被重排序，但是在优化的过程中必须要保证是在单线程环境下，重排序之后的运行结果和程序代码本身预期的执行结果一致，<code>Java</code> 编译器、<code>CPU</code> 指令重排序都需要保证在单线程环境下的 <code>as-if-serial</code> 语义是正确的</p>
<p><code>as-if-serial</code>语义允许重排序，<code>CPU</code>层面的指令优化依然存在。在单线程中，这些优化并不会影响整体的执行结果，在多线程中，重排序会带来可见性问题</p>
<h3 id="重谈-MESI-过程"><a href="#重谈-MESI-过程" class="headerlink" title="重谈 MESI 过程"></a>重谈 MESI 过程</h3><p>假设存在一个 <code>S</code> 状态的缓存行（就是说 <code>CPU0</code> 和 <code>CPU1</code> 共享同一个缓存行），如果 <code>CPU0</code> 对这个缓存进行修改，那么 <code>CPU0</code> 需要发送一个 <code>Invalidate</code> 消息到 <code>CPU1</code>，在等待 <code>CPU1</code> 返回<code>Acknowledgement</code> 消息之前，<code>CPU0</code> 一直处于空闲状态</p>
<pre class="mermaid">sequenceDiagram
    participant A as CPU0
    participant B as CPU1
    A->>A: "加载变量, 缓存行状态S"
    B->>B: "加载变量，缓存行状态S"
    A->>A: "修改共享s变量"
    A->>B: "Invalidate"
    A->>A: "空闲等待"
    B->>A: "Acknowledgement"</pre>

<h4 id="Store-Buffers"><a href="#Store-Buffers" class="headerlink" title="Store Buffers"></a>Store Buffers</h4><ol>
<li><p>从上图可以看到，当一个 <code>cpu</code> 从发出 <code>Invalidate</code> 指令到收到 <code>Acknowledgement</code> 指令之间，这个 <code>cpu</code> 是需要阻塞的</p>
</li>
<li><p><code>Store Buffer</code> 是一个存储器，它存储着那些被修改过的缓存行。当一个 <code>cpu</code> 要修改一个缓存行，它会将这个缓存行的副本放到 <code>Store Buffer</code> 中，然后发出一个 <code>Invalidate</code> 指令，让其他 <code>cpu</code> 知道这个缓存行</p>
</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311292320073.webp" alt="Store Buffers"></p>
<p>在 <code>CPU</code> 中引入<code>Store Buffers</code>的设计后，<code>CPU0</code>会先发送一个<code>Invalidate</code>消息给其他包含该缓存行的<code>CPU1</code>，并把当前修改的数据写入<code>Store Buffers</code>中，然后继续执行后续的指令。等收到<code>CPU1</code>的<code>Acknowledgement</code>消息后，<code>CPU0</code>再把<code>Store Buffers</code>移到缓存行中, 因为加入了 <code>Store Buffers</code>，就会导致内存可见性问题</p>
<h4 id="使用-Store-Forwarding-优化-Store-Buffers-问题"><a href="#使用-Store-Forwarding-优化-Store-Buffers-问题" class="headerlink" title="使用 Store Forwarding 优化 Store Buffers 问题"></a>使用 Store Forwarding 优化 Store Buffers 问题</h4><ol>
<li><p><code>Store Buffers</code> 之所以存在问题是因为，在 其他 <code>cpu</code> 返回 <code>Acknowledgement</code> 之前，数据是存放在 <code>Store Buffer</code> 中的，<code>cpu</code> 缓存行中并没有最新的数据，<code>cpu</code> 执行指令时就会用到缓存行中的旧数据</p>
</li>
<li><p><code>Store Forwarding</code> 是指每个 <code>CPU</code> 在加载数据之前，会先引用当前 <code>CPU</code> 的 <code>Store Buffers</code>，也就是说支持将 <code>CPU</code> 存入<code>Store Buffers</code> 的数据传递给后续的加载操作，而不需要经过 <code>Cache</code></p>
</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311292327246.webp" alt="Store Forwarding"></p>
<h4 id="使用-Invalidate-Queues-优化-Store-Buffers-问题"><a href="#使用-Invalidate-Queues-优化-Store-Buffers-问题" class="headerlink" title="使用 Invalidate Queues 优化 Store Buffers 问题"></a>使用 Invalidate Queues 优化 Store Buffers 问题</h4><ol>
<li><p>前面讲到的 <code>Store Forwarding</code> 针对的时发出 <code>Invalidate</code> 指令的 <code>cpu</code>，而接下来要讲解的 <code>Invalidate Queues</code> 则是针对接收到 <code>Invalidate</code> 指令并且要响应 <code>Acknowledgement</code> 指令的 <code>cpu</code>， 具体原因如下</p>
</li>
<li><p><code>Store Buffers</code>本身的存储容量是有限的，在当前<code>CPU</code>的所有写入操作都存在缓存未命中的情况时，就会导致<code>Store Buffers</code>很容易被填充满。被填满之后，必须要等到<code>CPU</code>返回<code>Invalidate Acknowledge</code>消息，<code>Store Buffers</code>中对应的指令才能被清理，而这个过程<code>CPU</code>必须要等待，无论该<code>CPU</code>中后续指令是否存在缓存未命中的情况</p>
</li>
<li><p>如果收到<code>Invalidate</code>消息的<code>CPU</code>此时处于繁忙状态，那么会导致<code>Invalidate Acknowledge</code>消息返回延迟</p>
</li>
<li><p>增加一个<code>Invalidate Queues</code>，用于存储让缓存行失效的消息。也就是说，<code>CPU</code>收到<code>Invalidate</code>消息时，把让该缓存行失效的消息放入<code>Invalidate Queues</code>，然后同步返回一个<code>Invalidate Acknowledge</code>消息。这样就大大缩短了响应的时间</p>
</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311292336827.webp" alt="Invalidate Queues"></p>
<h3 id="内存屏障指令"><a href="#内存屏障指令" class="headerlink" title="内存屏障指令"></a>内存屏障指令</h3><ol>
<li>读屏障指令(Ifence)</li>
<li>将 <code>Invalidate Queues</code>中的指令立即处理，并且强制读取<code>CPU</code>的缓存行, 执行<code>lfence</code>指令之后的读操作不会被重排序到执行<code>lfence</code>指令之前，这意味着其他<code>CPU</code>暴露出来的缓存行状态对当前<code>CPU</code>可见</li>
<li>写屏障指令(sfence)</li>
<li>它会把<code>Store Buffers</code>中的修改刷新到本地缓存中，使得其他<code>CPU</code>能够看到这些修改，而且在执行<code>sfence</code>指令之后的写操作不会被重排序到执行<code>sfence</code>指令之前，这意味着执行<code>sfence</code>指令之前的写操作一定要全局可见（内存可见性及禁止重排序）</li>
<li>读写屏障指令(mfence）</li>
<li>相当于<code>lfence</code>和<code>sfence</code>的混合体，保证<code>mfence</code>指令执行前后的读写操作的顺序，同时要求执行<code>mfence</code>指令之后的写操作的结果全局可见，执行<code>mfence</code>指令之前的写操作结果全局可见</li>
</ol>
<h3 id="JVM-内存屏障指令"><a href="#JVM-内存屏障指令" class="headerlink" title="JVM 内存屏障指令"></a>JVM 内存屏障指令</h3><p>前面讲到的内存屏障指令是 <code>cpu</code> 可以执行的指令，但是这些指令是需要应用来调用的，同样的应用也需要提供相应的指令给开发者调用，对应到 <code>JVM</code> 中，提供了如下几种指令</p>
<ol>
<li>loadload</li>
<li>storestore</li>
<li>loadstore</li>
<li>storeload</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311292348303.webp" alt="内存屏障"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程上下文切换包含哪些内容</title>
    <url>/2023/c51368ba5d47/index.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>cpu</code> 不知道什么是进程和线程，<code>cpu</code> 只知道两件事情</p>
<ol>
<li>从内存中取出指令</li>
<li>执行指令</li>
<li>一直重复上面两个步骤，所以 <strong>取指令</strong>-&gt; <strong>执行指令</strong> 就是 <code>cpu</code> 所能做的所有事情</li>
</ol>
<h2 id="cpu-获取指令执行的流程"><a href="#cpu-获取指令执行的流程" class="headerlink" title="cpu 获取指令执行的流程"></a>cpu 获取指令执行的流程</h2><ol>
<li>编写源代码，源代码中都会有 main 函数，这个 main 函数就是执行入口</li>
<li>程序启动后，会将 main 函数的第一条机器指令放入 pc 寄存器中（程序计数器）</li>
<li>pc 寄存器的地址默认是自动 +1， 初始地址就是 main 函数的指令地址</li>
<li>当遇到 if else 等语句时程序会根据计算结果或者指令中指定的跳转地址来动态改变 pc 寄存器中的值</li>
</ol>
<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ol>
<li>进程是操作系统分配资源的最小单位</li>
<li>线程是调用的基本单位，线程之间共享进程资源<ol>
<li>线程之间共享了哪些资源<ol>
<li>堆区</li>
<li>代码区</li>
<li>数据区：存放的就是全局变量</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="什么是线程上下文"><a href="#什么是线程上下文" class="headerlink" title="什么是线程上下文"></a>什么是线程上下文</h2><ol>
<li>线程上下文就是指线程在某个时刻的状态，或者说某个时刻的数据，这个数据是线程私有的才能称为是线程的上下文</li>
<li>要看线程上下文包含哪些信息，就需要看哪些数据都是线程私有的，这些线程私有的数据整体就是线程上下文</li>
</ol>
<h3 id="线程的私有数据有哪些"><a href="#线程的私有数据有哪些" class="headerlink" title="线程的私有数据有哪些"></a>线程的私有数据有哪些</h3><p>线程本质就是函数的执行，函数执行的信息都是放在栈帧中，栈帧主要包含如下内容</p>
<ol>
<li>当前函数的返回值</li>
<li>调用其他函数的参数（寄存器不够时参数是会放在栈帧中的）</li>
<li>函数使用的局部变量</li>
<li>函数使用的寄存器信息</li>
<li>程序计数器是线程私有的</li>
<li>栈指针（该线程栈区的栈顶位置）</li>
<li>执行函数时所使用的寄存器也是线程私有的</li>
</ol>
<p>所有上面这些信息包含在一起就是线程上下文</p>
<h2 id="常用的几种寄存器"><a href="#常用的几种寄存器" class="headerlink" title="常用的几种寄存器"></a>常用的几种寄存器</h2><ol>
<li>栈寄存器<ol>
<li>函数运行时都有一个栈帧，对于栈来说重要的信息之一就是栈顶，栈寄存器就是保存栈顶信息的</li>
</ol>
</li>
<li>指令寄存器（pc寄存器）</li>
<li>状态寄存器，线程是运行在内核态还是用户态的信息保存在状态寄存器中</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池实现原理</title>
    <url>/2023/63b6d22fbd8f/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="1-为什么要使用线程池"><a href="#1-为什么要使用线程池" class="headerlink" title="1. 为什么要使用线程池"></a>1. 为什么要使用线程池</h2><ol>
<li>线程的创建和销毁都需要消耗资源（cpu，内存）</li>
<li>使用线程池可以预先创建好线程，开始使用时速度更快<span id="more"></span></li>
</ol>
<h2 id="2-线程池的设计思想"><a href="#2-线程池的设计思想" class="headerlink" title="2. 线程池的设计思想"></a>2. 线程池的设计思想</h2><h3 id="2-1-如何做到线程在执行完任务后不回收"><a href="#2-1-如何做到线程在执行完任务后不回收" class="headerlink" title="2.1. 如何做到线程在执行完任务后不回收"></a>2.1. 如何做到线程在执行完任务后不回收</h3><p>线程池就是要缓存线程，当一个任务执行完成之后，执行任务的线程可以不用回收，当有新的任务来到时复用当前线程来执行，平时线程执行的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程的创建和销毁实际是底层的操作系统来实现的，当启动一个线程执行任务时，<code>run()</code> 方法就会执行，当 <code>run()</code> 执行完成之后当前的线程会自动销毁<br>那么如何做到线程不被销毁呢？其实只要让 <code>run()</code> 方法一直在执行就好了，比如加个 <code>while</code> 循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-线程空闲时也消耗资源怎么处理"><a href="#2-2-线程空闲时也消耗资源怎么处理" class="headerlink" title="2.2. 线程空闲时也消耗资源怎么处理"></a>2.2. 线程空闲时也消耗资源怎么处理</h3><ol>
<li>为了做到将线程不回收，一直执行，所以使用将任务代码放在 <code>while(true)</code> 里面，但是这样做会出现即使没有任务时，这个线程也会一直消耗 cpu 资源，所以需要进一步优化</li>
<li>优化方式也很简单，就是没有任务时就阻塞当前线程就好了，当有任务来到时再唤起当前线程进行执行</li>
<li>所以线程池可以认为是一个 <code>生产者--消费者</code> 模型，提交任务的线程就是生产者，线程池自身就是消费者，线程池从阻塞队列中不断获取任务，有任务就执行，没有任务就阻塞自己</li>
</ol>
<h2 id="3-线程池创建方式"><a href="#3-线程池创建方式" class="headerlink" title="3. 线程池创建方式"></a>3. 线程池创建方式</h2><h3 id="3-1-Executors-类"><a href="#3-1-Executors-类" class="headerlink" title="3.1. Executors 类"></a>3.1. Executors 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Executors</span> &#123;</span><br><span class="line">    <span class="comment">// 创建固定数量线程的线程池</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建单个线程的线程池 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                    threadFactory));</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-ThreadPoolExecutor"><a href="#3-2-ThreadPoolExecutor" class="headerlink" title="3.2. ThreadPoolExecutor"></a>3.2. ThreadPoolExecutor</h3><p>通过上面 <code>Executors</code> 类创建的线程池可以看到最终还是 <code>new ThreadPoolExecutor</code>, 但是直接使用 <code>Executors</code> 创建的线程池存在的问题时，要么线程数量没有限制，要么是队列的大小没有限制，所以一般情况下都不推荐使用 <code>Executors</code> 来直接创建线程池，而是手动通过 <code>ThreadPoolExecutor</code> 来创建， 比如下面这种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">5</span>,  <span class="comment">// 线程池核心线程数</span></span><br><span class="line">        <span class="number">10</span>,  <span class="comment">// 线程池最大线程数</span></span><br><span class="line">        <span class="number">1000</span>,  <span class="comment">// 线程池中超过corePoolSize数目的空闲线程最大存活时间</span></span><br><span class="line">        TimeUnit.MILLISECONDS,  <span class="comment">// 时间单位，毫秒</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">50</span>),  <span class="comment">// 工作线程等待队列</span></span><br><span class="line">        Executors.defaultThreadFactory(),  <span class="comment">// 自定义线程工厂</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());  <span class="comment">// 线程池满时的拒绝策略</span></span><br></pre></td></tr></table></figure>

<h2 id="线程池的生命周期"><a href="#线程池的生命周期" class="headerlink" title="线程池的生命周期"></a>线程池的生命周期</h2><pre class="mermaid">flowchart LR
    A[running]-- "执行shutdown()方法"--> B[Shutdown]
    A-- "执行shutdonwNow() 方法"--> C[Stop]
    B--"任务列表为空，所有任务都执行完成"-->D[TIDYING]
    B--"shutdownNow()"-->C
    C--所有任务都执行完成-->D
    D--"执行 terminated() 方法"-->E[TERMINATED]</pre>
<ul>
<li>RUNNING：能接受新任务，并处理阻塞队列中的任务</li>
<li>SHUTDOWN：不接受新任务，但是可以处理阻塞队列中的任务</li>
<li>STOP：所有任务都不处理（正在运行的线程准备中断，阻塞队列中的任务不再处理，新的任务不会再接收）</li>
<li>TIDYING：所有任务都终止，并且工作线程也为0，处于关闭之前的状态</li>
<li>TERMINATED：已关闭。</li>
</ul>
<h2 id="线程池的处理流程"><a href="#线程池的处理流程" class="headerlink" title="线程池的处理流程"></a>线程池的处理流程</h2><pre class="mermaid">flowchart LR
    A[提交任务] --> B{核心线程池是否已满}
    B --否--> C[创建线程执行任务]
    B --是--> D{队列是否已满}
    D --否--> E[将任务存储在队列中]
    D --是--> F{是否达到最大线程池}
    F --否--> G[创建线程执行]
    F --是--> J[执行拒绝策略]</pre>

<h3 id="线程池相关核心变量"><a href="#线程池相关核心变量" class="headerlink" title="线程池相关核心变量"></a>线程池相关核心变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="comment">// ctl 变量保存了两个信息，线程池的状态（高3位）和线程数量（低29位）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 统计线程数量的位数，这里表示使用32-3 = 29 位来表示线程的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池的几种状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面重点看一下 ctl 变量是如何通过一个变量存储两种信息的</p>
<h3 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>其中 <code>Integer.SIZE</code> &#x3D; 32, 所以 <code>COUNT_BITS</code> 就是29，也就是使用 29 位来表示线程的数量<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span> &lt;&lt; COUNT_BITS</span><br><span class="line">      ​</span><br><span class="line">      <span class="number">1</span>的<span class="number">32</span>位<span class="number">2</span>进制是</span><br><span class="line">      <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line">      ​</span><br><span class="line">      左移<span class="number">29</span>位</span><br><span class="line">      <span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">      ​</span><br><span class="line">      再进行减一</span><br><span class="line">      <span class="number">000</span> <span class="number">11111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span></span><br><span class="line">      ​</span><br><span class="line">      所以线程池最大数目就是</span><br><span class="line">      <span class="number">000</span> <span class="number">11111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span></span><br></pre></td></tr></table></figure></li>
<li>那怎么通过这 29 位来获取线程的数量呢，通过 <code>workderCountOf(int c)</code> 方法可以看到实际是通过位运算中的 <code>与</code> 操作来去除最高位来进行获取的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; </span><br><span class="line">    <span class="keyword">return</span> c &amp; COUNT_MASK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h3><p>获取线程池状态的方法是 <code>runStateOf()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123;</span><br><span class="line">     <span class="keyword">return</span> c &amp; ~COUNT_MASK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到分成了两步</p>
<ol>
<li>对 <code>COUNT_MASK</code> 取反，前面已经知道 <code>COUNT_MASK</code> 前面三位是0，最后29位是1， 取反则是前面三位是1，最后29位是0</li>
<li><code>与</code> 操作和计算线程数量时是一样的，是为了去除后面29位数，只需要计算前面三位的数即可</li>
</ol>
<h2 id="线程池核心问题"><a href="#线程池核心问题" class="headerlink" title="线程池核心问题"></a>线程池核心问题</h2><h3 id="线程池核心线程什么时候创建"><a href="#线程池核心线程什么时候创建" class="headerlink" title="线程池核心线程什么时候创建"></a>线程池核心线程什么时候创建</h3><ol>
<li>默认情况下不会预先创建线程，所以核心线程也是在有任务来的时候才会创建</li>
<li>在 <code>ThreadPoolExecutor</code> 类中提供了两个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="comment">// 预先启动一个核心线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">prestartCoreThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workerCountOf(ctl.get()) &lt; corePoolSize &amp;&amp;</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预先启动所有核心线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">prestartAllCoreThreads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (addWorker(<span class="literal">null</span>, <span class="literal">true</span>))</span><br><span class="line">            ++n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面两个方法可知，在创建线程池之后（提交任务之前，也就是调用 execute 之前）是可以调用这两个方法来预先创建核心线程的</p>
<h3 id="线程池的核心线程是否会被回收"><a href="#线程池的核心线程是否会被回收" class="headerlink" title="线程池的核心线程是否会被回收"></a>线程池的核心线程是否会被回收</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allowCoreThreadTimeOut</span><span class="params">(<span class="type">boolean</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &amp;&amp; keepAliveTime &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Core threads must have nonzero keep alive times&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value != allowCoreThreadTimeOut) &#123;</span><br><span class="line">            allowCoreThreadTimeOut = value;</span><br><span class="line">            <span class="keyword">if</span> (value)</span><br><span class="line">                interruptIdleWorkers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ThreadPoolExecutor</code> 类中有提供 <code>allowCoreThreadTimeOut(boolean)</code> 方法来设置当达到超时时间时，核心线程也可以被回收掉</p>
<h3 id="核心线程数量和最大先吃数量动态修改"><a href="#核心线程数量和最大先吃数量动态修改" class="headerlink" title="核心线程数量和最大先吃数量动态修改"></a>核心线程数量和最大先吃数量动态修改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态修改核心线程数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCorePoolSize</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态修改最大线程数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumPoolSize</span><span class="params">(<span class="type">int</span> maximumPoolSize)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面有写到可以动态修改线程池的核心线程和最大线程数量，那么这么设计的原因是什么呢？说到这个问题就牵扯到另外一个问题，如何合理设置线程池的线程数量大小？对于线程池数量大小的设置问题有多种建议，比如</p>
<ol>
<li>CPU密集型，线程池大小设置为N+1， IO密集型，线程池大小设置为2N+1（N指的是cpu核心数）</li>
<li>线程数&#x3D;CPU核数 *（1+线程等待时间 &#x2F; 线程时间运行时间）</li>
</ol>
<p>对于方式2是结合了实际的业务，但是线程等待时间，线程运行时间都是需要 <code>监控</code> 线程环境才可以得知的，既然涉及到 <code>监控</code> 就说明这个值是需要动态去修改的，所以才会需要提供这样两个修改线程数量的方法</p>
<h3 id="相同的任务如何舍弃"><a href="#相同的任务如何舍弃" class="headerlink" title="相同的任务如何舍弃"></a>相同的任务如何舍弃</h3><ol>
<li>在某些场景下会有任务不断的往线程池中添加，但是对于添加的相同的任务如果之前还没有执行完成，后续添加的任务可以直接舍弃，这里涉及到的知识点是 <code>队列</code> 和 <code>对象相等的判断</code></li>
<li>如果每次添加新任务之前旧的任务已经执行完成，就不存在相同的任务舍弃这个问题，所以这里的场景是提交的任务太多，线程没有执行完成的任务保留在队列中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写 equals 方法，这个就是判断任务相同的关键</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MyTask</span> <span class="variable">that</span> <span class="operator">=</span> (MyTask) o;</span><br><span class="line">        <span class="comment">// 这里是用账号来判断任务是否相同</span></span><br><span class="line">        <span class="keyword">return</span> account.equals(that.account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>提交任务之前先获取队列中的任务，看是否有正在排队的相同账号的任务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取队列中的任务</span></span><br><span class="line">BlockingQueue&lt;Runnable&gt; queue = threadPoolExecutor.getQueue();</span><br><span class="line"><span class="comment">// 构建当前任务</span></span><br><span class="line"><span class="type">MyTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTask</span>(<span class="string">&quot;currentTaskAccount&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (queue.size() &gt; <span class="number">0</span> &amp;&amp; queue.contains(authSymbolTask)) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;队列中含有:&#123;&#125;的任务,当前任务被丢弃&quot;</span>, task.getAccount());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 队列中不包含当前账号的任务就提交当前任务</span></span><br><span class="line">    threadPoolExecutor.execute(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="线程池提交任务流程"><a href="#线程池提交任务流程" class="headerlink" title="线程池提交任务流程"></a>线程池提交任务流程</h3><p>下面代码是 <code>ThreadPoolExecutor</code> 类</p>
<figure class="highlight java"><figcaption><span>execute方法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="comment">// 线程数量小于核心线程数</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="comment">// 1. 创建线程的核心方法</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程数量大于核心数量，则将任务添加到队列中</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="comment">// 再次检查如果线程池不是运行状态，则将添加到队列的任务移除掉，并且执行拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到添加线程进行执行主要是在 <code>addWorker()</code> 方法中，所以继续看 <code>addWorkder()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();;) &#123;</span><br><span class="line">        <span class="comment">// 线程池正在关闭或已经关闭时就不运行添加新任务</span></span><br><span class="line">        <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN)</span><br><span class="line">            &amp;&amp; (runStateAtLeast(c, STOP)</span><br><span class="line">                || firstTask != <span class="literal">null</span></span><br><span class="line">                || workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c)</span><br><span class="line">                &gt;= ((core ? corePoolSize : maximumPoolSize) &amp; COUNT_MASK))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN))</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// worker类包含Thread 和 Runnable Task</span></span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">                <span class="comment">// 线程池还在运行状态</span></span><br><span class="line">                <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                    (runStateLessThan(c, STOP) &amp;&amp; firstTask == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.getState() != Thread.State.NEW)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    workerAdded = <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                <span class="comment">// 添加成功就启动线程开始执行</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Worker 类代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Worker(Runnable firstTask) &#123;</span><br><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">    <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">    <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    runWorker(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">    w.firstTask = <span class="literal">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如何保证线程不会被回收呢？就是通过一个 while 循环，不让线程退出 run 方法</span></span><br><span class="line">        <span class="comment">// 如何保证线程在空闲时不占用cpu呢，实现逻辑就是在 getTask() 方法里面，如果没有获取到任务就阻塞当前线程</span></span><br><span class="line">        <span class="comment">// 如何实现线程的回收呢？这个关键点就是 while 条件的判断，当条件不满足时就会退出 while 循环，当前线程执行完了，线程就会被jvm回收掉</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                    afterExecute(task, <span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    afterExecute(task, ex);</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="literal">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 线程池中线程被回收的逻辑</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程池中的线程是如何被回收的"><a href="#线程池中的线程是如何被回收的" class="headerlink" title="线程池中的线程是如何被回收的"></a>线程池中的线程是如何被回收的</h3><pre class="mermaid">sequenceDiagram
    participant A as ThreadPoolExecutor[A]
    participant B as ThreadPoolExecutor[B]
    participant C as Worker[C]
    participant D as Worker[D]
    participant E as Worker[E]
    A->>B: execute()
    B->>C: addWorker(Runnable firstTask, boolean core)
    Note over B,C: Worker类包含Thread和Task
    C->>D: runWorker(Worker)
    Note over C,D: runWorker()中有while，保证线程的复用
    D->>E: getTask()
    Note over D,E: 获取不到任务会阻塞</pre>
<p>在上面时序图中可以看到，在 <code>Worker.runWorker()</code>  方法中会不断的循环，保证线程可以复用，同时在 <code>getTask()</code> 中做是否要退出循环的条件的判断</p>
<ol>
<li>阻塞队列中没有任务了</li>
<li>已经超过了设置的空闲时间</li>
</ol>
<p>这样就可以退出让 Thread 的run 方法流程走完，退出 run 方法之后相当于这个线程就被回收了</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo的spi机制使用案例</title>
    <url>/2023/30c57ac8b6c7/index.html</url>
    <content><![CDATA[<h2 id="dubbo为什么需要spi机制"><a href="#dubbo为什么需要spi机制" class="headerlink" title="dubbo为什么需要spi机制"></a>dubbo为什么需要spi机制</h2><p>一个好的程序是要遵循一定的设计规范比如设计模式中的开闭原则</p>
<ol>
<li><strong>对扩展开放</strong>：指的是我们系统中的模块、类、方法对它们的提供者（开发者）应该是开放的，提供者可以对系统进行扩展（新增）新的功能。</li>
<li><strong>对修改关闭</strong>：指的是系统中的模块、类、方法对它们的使用者（调用者）应该是• 关闭的。使用者使用这些功能时，不会因为提供方新增了功能而导致使用者也进行相应修改<blockquote>
<p>Apache Dubbo 是一款微服务开发框架，它提供了 RPC 通信与微服务治理两大关键能力。这意味着，使用 Dubbo 开发的微服务，将具备相互之间的远程发现与通信能力，同时利用 Dubbo 提供的丰富服务治理能力，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。同时 Dubbo 是高度可扩展的，用户几乎可以在任意功能点去定制自己的实现，以改变框架的默认行为来满足自己的业务需求</p>
<p>对于 Apache Dubbo 来说不变的是 RPC 调用流程，微服务治理相关的概念和流程，但是在流程中每个环节的具体实现方式可以是动态改变的，Dubbo 使用微内核的架构，将具体的实现开放出来，让使用者可以根据自己的需求来选择</p>
</blockquote>
</li>
</ol>
<h3 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h3><p>微内核架构由两大架构模块组成：核心系统与插件模块</p>
<ol>
<li><strong>核心系统</strong>： 负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等，Dubbo 内核的工作原理由四部分组成<ol>
<li>服务发现机制 <code>spi</code></li>
<li>自适应机制 <code>Adaptive</code></li>
<li>包装机制 <code>Wrapper</code></li>
<li>激活机制 <code>Activate</code><br><code>Dubbo</code> 通过上面四种机制实现了对插件的 <code>IOC</code>, <code>AOP</code> 实现了对自动生成类的动态编译 <code>Compile</code></li>
</ol>
</li>
<li><strong>插件模块</strong>： 负责实现具体的业务逻辑，在 <code>Dubbo</code> 中就是 <code>Dubbo SPI</code> 接口与实现</li>
</ol>
<h2 id="Dubbo-中的-spi-规范"><a href="#Dubbo-中的-spi-规范" class="headerlink" title="Dubbo 中的 spi 规范"></a>Dubbo 中的 spi 规范</h2><ol>
<li>接口名： 可以随意定义，但是需要被 <code>@SPI</code> 注解修饰</li>
<li>实现类名: 在接口名前面添加一个用于表示自身功能的 “标识前缀” 字符串</li>
<li>提供者配置文件路径，依次查找目录为<ol>
<li><code>META-INF/dubbo/internal</code></li>
<li><code>META-INF/dubbo</code></li>
<li><code>META-INF/services</code></li>
</ol>
</li>
<li>提供者配置文件名称：接口的全限定性类名</li>
<li>提供者配置文件内容：文件的内容为 <code>key=value</code> 形式，<code>value</code> 为该接口的实现类的全限类性类名，<code>key</code> 可以随意，但一般为该实现类的“标识前辍”（首字母小写）。一个类名占一行</li>
<li><code>提供者加载：ExtensionLoader</code> 类相当于 <code>JDK SP</code>I 中 <code>ServiceLoader</code> 类，用于加载提供者配置文件中所有的实现类，并创建相应的实例</li>
</ol>
<p>dubbo spi 机制都是生成代理类，一般使用 <code>javaassist</code> 方法生成，可以参考</p>
<ol><li><a href="/2023/d513f5c497bd/index.html" title="java输出运行过程中的代理类">java输出运行过程中的代理类</a></li></ol> 来获取代理类

<h2 id="dubbo-spi-使用案例"><a href="#dubbo-spi-使用案例" class="headerlink" title="dubbo spi 使用案例"></a>dubbo spi 使用案例</h2><figure class="highlight java"><figcaption><span>接口和对应实现类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  第一个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;second&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置文件，在 <code>resource</code> 下创建目录 <code>META-INF/services</code>, 然后创建文件</p>
<p>文件名为接口全限定性类名 ： <code>com.example.dubbodemo.spi.Hello</code> </p>
<p>文件内容如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">first=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.FirstHello</span></span><br><span class="line">second=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span>.SecondHello</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>代码测试</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSpi</span><span class="params">()</span> &#123;</span><br><span class="line">    ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">firstHello</span> <span class="operator">=</span> loader.getExtension(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    System.out.println(firstHello.sayHello()); <span class="comment">// first</span></span><br><span class="line">    <span class="type">Hello</span> <span class="variable">secondHello</span> <span class="operator">=</span> loader.getExtension(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    System.out.println(secondHello.sayHello()); <span class="comment">// second</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dubbo-Adaptive-机制"><a href="#dubbo-Adaptive-机制" class="headerlink" title="dubbo Adaptive 机制"></a>dubbo Adaptive 机制</h2><ol>
<li>从上面 <code>spi</code> 代码示例中可以看到当有多个实现类的时候，我们可以手动根据 <code>key</code> 来选择具体是使用哪个实现类</li>
<li><code>dubbo</code> 中是以 <code>url</code> 来贯穿整个调用路径的，所谓的 <code>adaptive</code> 机制就是根据 <code>url</code> 中的参数来自动帮我们判断应该使用哪个实现类，而不是手动指定 <code>key</code></li>
<li><code>@Adaptive</code> 可以用来修饰类和修饰方法， 如果是修饰方法，那么 <code>@Adaptive</code> 修饰的方法就必须包含 <code>url</code> 参数，如果是修饰方法，则没有要求接口中的方法必须有 <code>url</code> 参数</li>
</ol>
<p>下面示例中包含一个 打招呼的接口 <code>Hello</code>， 然后还有两种打招呼的实现，分别是 <code>FirstHello</code> 和 <code>SecondHello</code></p>
<div class="tabs" id="dubbo的adaptive机制示例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="dubbo的adaptive机制示例-1">修饰方法示例</button><button type="button" class="tab " data-href="dubbo的adaptive机制示例-2">adaptive修饰类示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="dubbo的adaptive机制示例-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  接口定义</span></span><br><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    String <span class="title function_">adaptiveHello</span><span class="params">(URL url)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  第一个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first normal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adaptiveHello</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first adaptive&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;second normal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adaptiveHello</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;second adaptive&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置文件，在 <code>resource</code> 下创建目录 <code>META-INF/services</code>, 然后创建文件</p>
<p>文件名为接口全限定性类名 ： <code>com.example.dubbodemo.spi.Hello</code> </p>
<p>文件内容如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">first=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.FirstHello</span></span><br><span class="line">second=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span>.SecondHello</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdaptive</span><span class="params">()</span> &#123;</span><br><span class="line">    ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">iHello</span> <span class="operator">=</span> loader.getAdaptiveExtension();</span><br><span class="line">    <span class="comment">// 这个相当于在url中设置了 key=hello(也就是接口名称)， value=second, 这里的second是和配置文件中的key对应的，表示</span></span><br><span class="line">    <span class="comment">// 具体选择的是哪个实现类</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> URL.valueOf(<span class="string">&quot;http://localhost?hello=second&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iHello.adaptiveHello(url);</span><br><span class="line">    System.out.println(s); <span class="comment">// 会打印 second adaptive</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdaptive2</span><span class="params">()</span> &#123;</span><br><span class="line">    ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">iHello</span> <span class="operator">=</span> loader.getAdaptiveExtension();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iHello.sayHello(); <span class="comment">// 这里会报错，因为这个方法并没有使用 @Adaptive 注解，所以无法使用 adaptive 方法来进行调用</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="dubbo的adaptive机制示例-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  接口定义, 其中有默认值</span></span><br><span class="line"><span class="meta">@SPI(&quot;first&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;second hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自适应类，这个类需要使用 @Adaptive 注解修饰</span></span><br><span class="line"><span class="meta">@Adaptive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdaptiveHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br><span class="line">        Hello hello;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(type)) &#123;</span><br><span class="line">            hello = loader.getExtension(type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有指定的类型，则使用默认的类型，就是接口上 @SPI 注解中的值</span></span><br><span class="line">            hello = loader.getDefaultExtension();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hello.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置文件，在 <code>resource</code> 下创建目录 <code>META-INF/services</code>, 然后创建文件</p>
<p>文件名为接口全限定性类名 ： <code>com.example.dubbodemo.spi.Hello</code> </p>
<p>文件内容如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">first=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.FirstHello</span></span><br><span class="line">second=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.SecondHello</span></span><br><span class="line">adaptive=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span>.AdaptiveHello</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdaptiveClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(Hello.class).getAdaptiveExtension();</span><br><span class="line">    System.out.println(hello.sayHello());<span class="comment">// 输出 first hello, 默认值就是 接口上的 @SPI 注解中的值</span></span><br><span class="line"></span><br><span class="line">    ((AdaptiveHello)hello).setType(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    System.out.println(hello.sayHello());  <span class="comment">// 输出 second hello, 因为通过 type 设置了想要的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="dubbo-中-wrapper-机制案例"><a href="#dubbo-中-wrapper-机制案例" class="headerlink" title="dubbo 中 wrapper 机制案例"></a>dubbo 中 wrapper 机制案例</h2><h3 id="wrapper-是什么"><a href="#wrapper-是什么" class="headerlink" title="wrapper 是什么"></a>wrapper 是什么</h3><ol>
<li>作用上 <code>wrapper</code> 和 <code>aop</code> 是类似的，也是对一个类的功能进行增强，但是 <code>wrapper</code> 不是通过 <code>aop</code> 的形式实现的，而是通过一系列规范来定义一个 <code>wrapper</code> 类</li>
<li>第一点说的是 <code>wrapper</code> 类可以增强，但是没说增强的是什么？ 其实 <code>wrapper</code> 类增强的就是 <code>spi</code> 接口的实现类</li>
</ol>
<h3 id="wrapper-类规范"><a href="#wrapper-类规范" class="headerlink" title="wrapper 类规范"></a>wrapper 类规范</h3><ol>
<li>定义的 <code>wrapper</code> 类要实现 <code>spi</code> 接口</li>
<li>定义的 <code>wrapper</code> 类必须要包含 <code>spi</code> 接口的引用</li>
<li><code>wrapper</code> 类中 <code>spi</code> 接口的实现是通过仅包含一个 <code>spi</code> 接口参数的带参构造器传入的</li>
<li>在接口实现方法中所需要调用 <code>spi</code> 接口引用对象的相应方法</li>
<li><code>wrapper</code> 类名称需要以 <code>Wrapper</code> 结尾</li>
</ol>
<h3 id="wrapper-类示例"><a href="#wrapper-类示例" class="headerlink" title="wrapper 类示例"></a>wrapper 类示例</h3><p>下面是 <code>wrapper</code> 案例代码，依然使用的是前面的 <code>Hello</code> 接口和两个实现类以及对这两个实现类进行增强的两个 <code>wrapper</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPI 接口定义，默认实现类是 FirstHello</span></span><br><span class="line"><span class="meta">@SPI(&quot;first&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondHello</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;second hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个增强类</span></span><br><span class="line"><span class="comment">// 1. 满足第一点要求，Wrapper 类需要实现 SPI 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWrapper</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 满足第二点 定义的 `wrapper` 类必须要包含 `spi` 接口的引用</span></span><br><span class="line">    <span class="keyword">private</span> Hello hello;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 满足第三点 `wrapper` 类中 `spi` 接口的实现是通过仅包含一个 `spi` 接口参数的带参构造器传入的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWrapper</span><span class="params">(Hello hello)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wrapper1的方法增强开始&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> hello.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Wrapper1的方法增强结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个增强类</span></span><br><span class="line"><span class="comment">// 1. 满足第一点要求，Wrapper 类需要实现 SPI 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWrapper2</span> <span class="keyword">implements</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 满足第二点 定义的 `wrapper` 类必须要包含 `spi` 接口的引用</span></span><br><span class="line">    <span class="keyword">private</span> Hello hello;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 满足第三点 `wrapper` 类中 `spi` 接口的实现是通过仅包含一个 `spi` 接口参数的带参构造器传入的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWrapper2</span><span class="params">(Hello hello)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wrapper2的方法增强开始&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> hello.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Wrapper2的方法增强结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>com.example.dubbodemo.spi.Hello</code> 配置文件内容</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">first=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.FirstHello</span></span><br><span class="line">second=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.SecondHello</span></span><br><span class="line">wrapper=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span><span class="selector-class">.HelloWrapper</span></span><br><span class="line">wrapper2=com<span class="selector-class">.example</span><span class="selector-class">.dubbodemo</span><span class="selector-class">.spi</span>.HelloWrapper2</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">firstHello</span> <span class="operator">=</span> loader.getExtension(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    System.out.println(firstHello.sayHello());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">wrapper2的方法增强开始</span><br><span class="line">wrapper1的方法增强开始</span><br><span class="line">Wrapper1的方法增强结束</span><br><span class="line">Wrapper2的方法增强结束</span><br><span class="line"><span class="keyword">first</span> hello</span><br></pre></td></tr></table></figure>

<h2 id="dubbo-spi-机制源码解析"><a href="#dubbo-spi-机制源码解析" class="headerlink" title="dubbo spi 机制源码解析"></a>dubbo spi 机制源码解析</h2><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/dubbo-spi/">dubbo官网spi源码解析</a></p>
<h2 id="dubbo3-模块领域模型"><a href="#dubbo3-模块领域模型" class="headerlink" title="dubbo3 模块领域模型"></a>dubbo3 模块领域模型</h2><p>前面在讲解加载 <code>spi</code> 扩展点时用到的是如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExtensionLoader&lt;Hello&gt; loader = ExtensionLoader.getExtensionLoader(Hello.class);</span><br></pre></td></tr></table></figure>
<p>但是在 <code>dubbo3</code> 中已经将 <code>ExtensionLoader.getExtensionLoader</code> 标记为 <strong>弃用</strong>，这是因为在 <code>dubbo3</code> 中增加了模块领域模型，简单理解就是 <strong>每一个扩展点都是有范围的，而之前的方式相当于所有扩展点都在一个范围中</strong></p>
<blockquote>
<p>主要有如下原因 之前dubbo 都是只有一个作用域的，通过静态类 属性共享 增加域模型是为了:</p>
<ol>
<li>让Dubbo支持多应用的部署，这块一些大企业有诉求  </li>
<li>从架构设计上，解决静态属性资源共享、清理的问题</li>
<li>分层模型将应用的管理和服务的管理分开</li>
</ol>
<p>可能比较抽象，可以具体点来看。Dubbo3中在启动时候需要启动配置中心、元数据中心，这个配置中心和元数据中心可以归应用模型来管理。Dubbo作为RPC框架又需要启动服务和引用服务，服务级别的管理就交给了这个模块模型来管理。分层次的管理方便我们理解和处理逻辑，父子级别的模型又方便了数据传递。</p>
</blockquote>
<p><a href="https://cn.dubbo.apache.org/zh-cn/blog/2022/08/03/03-%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A8%A1%E5%9D%97%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8Bmodel%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/">官网dubbo3模块领域模型</a></p>
]]></content>
      <categories>
        <category>中间件</category>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用maven编译nacos2.2.3源码</title>
    <url>/2023/235410d42872/index.html</url>
    <content><![CDATA[<p>使用 <code>maven</code> 命令进入 <code>nacos</code> 根目录编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install -DskipTests</span><br></pre></td></tr></table></figure>

<p>出现</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Execution pmd of goal org<span class="selector-class">.apache</span><span class="selector-class">.maven</span><span class="selector-class">.plugins</span>:maven-pmd-plugin:<span class="number">3.8</span>:pmd failed: org<span class="selector-class">.apache</span><span class="selector-class">.maven</span><span class="selector-class">.reporting</span><span class="selector-class">.MavenReportException</span>:</span><br><span class="line"> Unsupported targetJdk value <span class="string">&#x27;11&#x27;</span>. </span><br></pre></td></tr></table></figure>
<p>错误，这是因为增加了 <code>pmd</code> 校验，可以使用下面命令跳过校验</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">mvn clean install &#x27;-DskipTests<span class="string">&#x27; &#x27;</span>-Dpmd.skip=<span class="literal">true</span><span class="string">&#x27; &#x27;</span>-Dcheckstyle.skip=<span class="literal">true</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>出现 </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to<span class="built_in"> execute </span>goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:testCompile (default-testCompile) on project nacos-config: Compilation failure</span><br><span class="line">[ERROR] /D:/code/nacos/config/src/test/java/com/alibaba/nacos/config/server/utils/ResponseUtilTest.java:[28,29] 程序包 sun.security.action 不可见</span><br><span class="line">[ERROR]   (程序包 sun.security.action 已在模块 java.base 中声明, 但该模块未将它导出到未命名模块)</span><br></pre></td></tr></table></figure>
<p>错误，解决方式是在 <code>maven-compiler-plugin</code> 配置中添加 <code>--add-exports=java.base/sun.security.action=ALL-UNNAMED</code> 参数，具体配置为在根目录下的 <code>pom.xml</code> 中添加下面代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerVersion</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 下面这一段新添加的用于解决编译错误的关键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg</span>&gt;</span>--add-exports=java.base/sun.security.action=ALL-UNNAMED<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意： 因为提示出现错误的包是 <code>sun.security.action</code>， 所以添加的时候才添加 <code>java.base/sun.security.action</code>， 如果提示的是其他包，则需要对应修改</p>
<h2 id="最终打包命令"><a href="#最终打包命令" class="headerlink" title="最终打包命令"></a>最终打包命令</h2><p>最终打包需要选择 profile， 这个 profile 在 <code>nacos-console</code> 模块的 <code>pom.xml</code> 文件中已经写了是  <code>release-nacos</code>， 所以最终打包命令是</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">mvn clean install &#x27;-DskipTests=<span class="literal">true</span><span class="string">&#x27; &#x27;</span>-Dpmd.skip=<span class="literal">true</span><span class="string">&#x27; &#x27;</span>-Dcheckstyle.skip=<span class="literal">true</span>&#x27; -Prelease-nacos</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>中间件</category>
        <category>nacos</category>
      </categories>
      <tags>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos2.2.3通过插件机制支持postgres</title>
    <url>/2023/4c25a01a2388/index.html</url>
    <content><![CDATA[<h2 id="使用-nacos2-2-3-版本"><a href="#使用-nacos2-2-3-版本" class="headerlink" title="使用 nacos2.2.3 版本"></a>使用 nacos2.2.3 版本</h2><ol>
<li>从 <a href="https://github.com/alibaba/nacos/releases">github下载nacos源码</a></li>
<li>切换到 2.2.3 版本<ol>
<li><code>git checkout -b 2.2.3 2.2.3</code>， <code>nacos</code> 源码中 2.2.3 是 <code>tag</code>, 该命令是从对应 <code>tag</code> 创建分支</li>
</ol>
</li>
</ol>
<h2 id="添加-postgres-依赖"><a href="#添加-postgres-依赖" class="headerlink" title="添加 postgres 依赖"></a>添加 postgres 依赖</h2><p>在 <code>nacos</code> 的根目录下的 <code>pom.xml</code> 中添加如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 postgres 版本约束 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">postgresql-version</span>&gt;</span>42.3.8<span class="tag">&lt;/<span class="name">postgresql-version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认是1.8，目前使用 jdk11 编译 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>config</code> 模块下的 <code>pom.xml</code> 中添加如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 postgresql 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;postgresql-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过-spi-机制添加-postgres-相关支持"><a href="#通过-spi-机制添加-postgres-相关支持" class="headerlink" title="通过 spi 机制添加 postgres 相关支持"></a>通过 spi 机制添加 postgres 相关支持</h2><p>找到 <code>plugin</code> 模块，里面还包含一个 <code>datasource</code> 模块，目录结构如下<br>【datasource】模块的目录路径为： <code>nacos源码所在的目录位置\nacos\plugin\datasource</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">├─datasource</span><br><span class="line">│  ├─src</span><br><span class="line">│  │  ├─main</span><br><span class="line">│  │  │  ├─java</span><br><span class="line">│  │  │  │  └─com</span><br><span class="line">│  │  │  │      └─alibaba</span><br><span class="line">│  │  │  │          └─nacos</span><br><span class="line">│  │  │  │              └─<span class="keyword">plugin</span></span><br><span class="line">│  │  │  │                  └─datasource</span><br><span class="line">│  │  │  │                      ├─constants</span><br><span class="line">│  │  │  │                      ├─impl</span><br><span class="line">│  │  │  │                      │  ├─derby</span><br><span class="line">│  │  │  │                      │  ├─mysql</span><br><span class="line">│  │  │  │                      │  └─postgresql【这个目录是新增的】</span><br><span class="line">│  │  │  │                      ├─mapper</span><br><span class="line">│  │  │  │                      └─proxy</span><br><span class="line">│  │  │  └─resources</span><br><span class="line">│  │  │      └─<span class="keyword">META</span>-<span class="keyword">INF</span></span><br><span class="line">│  │  │          └─services</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 <code>com.alibaba.nacos.plugin.datasource.impl</code> 包下已经有的两个实现包是 <code>mysql</code> 和 <code>derby</code>, 可以拷贝一下 <code>mysql</code> 整个包复制到 <code>mysql</code> 同级目录下并且改名为 <code>postgres</code>, 包里面的每个类的后缀改为 <code>Postgres</code>, 改完后 <code>postgres</code> 目录下的类有如下 9 个</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ConfigInfoAggrMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">ConfigInfoBetaMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">ConfigInfoMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">ConfigInfoTagMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">ConfigTagsRelationMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">GroupCapacityMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">HistoryConfigInfoMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">TenantCapacityMapperByPostgreSql</span></span><br><span class="line"><span class="attribute">TenantInfoMapperByPostgreSql</span></span><br></pre></td></tr></table></figure>

<p>进行上述操作后只是将 <code>mysql</code> 目录整个拷贝了一份修改目录名和类名，但是里面的内容其实没有变化，我们以 <code>ConfigInfoMapperByPostgreSql</code>（mysql 目录下） 为例，看看需要修改什么内容</p>
<figure class="highlight java"><figcaption><span>ConfigInfoMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoAggrMapperByMySql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoAggrMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoAggrByPageFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND &quot;</span></span><br><span class="line">                + <span class="string">&quot;group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT &quot;</span> + startRow + <span class="string">&quot;,&quot;</span> + pageSize;  <span class="comment">// 修改点1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.MYSQL;  <span class="comment">// 修改点2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改点1</strong><br>这里的修改是因为 <code>mysql</code> 和 <code>postgres</code> 的分页语法不同<br><code>mysql</code> 分页：<code>LIMIT startRow,pageSize</code><br><code>postgres</code> 分页：<code>LIMIT pageSize OFFSET startRow</code></p>
<p><strong>修改点2</strong><br><code>getDataSource()</code> 方法返回的是数据源类型，<code>mysql</code> 中返回的是 <code>DataSourceConstant.MYSQL</code>，看一下 <code>DataSourceConstant</code>类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConstant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYSQL</span> <span class="operator">=</span> <span class="string">&quot;mysql&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DERBY</span> <span class="operator">=</span> <span class="string">&quot;derby&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认只有两个，现在新增一个 <code>postgres</code> 类型，变成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConstant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYSQL</span> <span class="operator">=</span> <span class="string">&quot;mysql&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DERBY</span> <span class="operator">=</span> <span class="string">&quot;derby&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">POSTGRESQL</span>  <span class="operator">=</span> <span class="string">&quot;postgresql&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两处都修改完成之后，<code>postgres</code> 目录下对应的 <code>ConfigInfoAggrMapperByPostgreSql</code> 类经过修改后变成如下形式</p>
<figure class="highlight java"><figcaption><span>ConfigInfoAggrMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoAggrMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoAggrMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoAggrByPageFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND &quot;</span></span><br><span class="line">                + <span class="string">&quot;group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加spi类配置"><a href="#添加spi类配置" class="headerlink" title="添加spi类配置"></a>添加spi类配置</h2><p>下面会列出修改后所有 <code>postgres</code> 目录下所有类代码，不过这里先将其他需要修改的配置改完</p>
<p>找到 <code>plugin/datasource</code> 模块下 <code>resources/META-INF/services</code> 目录，该目录下有一个配置文件名为 <code>com.alibaba.nacos.plugin.datasource.mapper.Mapper</code><br>将如下内容添加到这个文件中</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.ConfigInfoAggrMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.ConfigInfoBetaMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.ConfigInfoMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.ConfigInfoTagMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.ConfigTagsRelationMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.HistoryConfigInfoMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.TenantInfoMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span><span class="selector-class">.TenantCapacityMapperByPostgreSql</span></span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.nacos</span><span class="selector-class">.plugin</span><span class="selector-class">.datasource</span><span class="selector-class">.impl</span><span class="selector-class">.postgresql</span>.GroupCapacityMapperByPostgreSql</span><br></pre></td></tr></table></figure>

<h2 id="修改-db-配置"><a href="#修改-db-配置" class="headerlink" title="修改 db 配置"></a>修改 db 配置</h2><p>在 <code>console</code> 模块下的 <code>application.properties</code> 文件中添加如下配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.sql.init.platform</span>=<span class="string">postgresql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">地址和用户名密码根据实际情况修改 --&gt;</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:postgresql://127.0.0.1:5432/nacos</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">postgres</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">postgres</span></span><br><span class="line"><span class="attr">db.pool.config.driverClassName</span>=<span class="string">org.postgresql.Driver</span></span><br></pre></td></tr></table></figure>

<h2 id="postgres-目录下所有类"><a href="#postgres-目录下所有类" class="headerlink" title="postgres 目录下所有类"></a>postgres 目录下所有类</h2><p>下面已经说明了每个类需要修改的点，下面就给出修改后所有 <code>postgres</code> 目录下所有类的内容<br>ConfigInfoAggrMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>ConfigInfoAggrMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoAggrMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoAggrMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoAggrByPageFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND &quot;</span></span><br><span class="line">                + <span class="string">&quot;group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConfigInfoBetaMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>ConfigInfoBetaMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoBetaMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoBetaMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigInfoBetaForDumpAllFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips,encrypted_data_key &quot;</span></span><br><span class="line">                + <span class="string">&quot; FROM ( SELECT id FROM config_info_beta  ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow + <span class="string">&quot; )&quot;</span></span><br><span class="line">                + <span class="string">&quot;  g, config_info_beta t WHERE g.id = t.id &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConfigInfoMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>ConfigInfoMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATA_ID</span> <span class="operator">=</span> <span class="string">&quot;dataId&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP</span> <span class="operator">=</span> <span class="string">&quot;group&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_NAME</span> <span class="operator">=</span> <span class="string">&quot;appName&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT</span> <span class="operator">=</span> <span class="string">&quot;content&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TENANT</span> <span class="operator">=</span> <span class="string">&quot;tenant&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoByAppFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,app_name,content FROM config_info&quot;</span></span><br><span class="line">                + <span class="string">&quot; WHERE tenant_id LIKE ? AND app_name= ?&quot;</span> + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTenantIdList</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT tenant_id FROM config_info WHERE tenant_id != &#x27;&quot;</span> + NamespaceUtil.getNamespaceDefaultId()</span><br><span class="line">                + <span class="string">&quot;&#x27; GROUP BY tenant_id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGroupIdList</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT group_id FROM config_info WHERE tenant_id =&#x27;&quot;</span> + NamespaceUtil.getNamespaceDefaultId()</span><br><span class="line">                + <span class="string">&quot;&#x27; GROUP BY group_id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigKey</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; SELECT data_id,group_id,app_name  FROM ( &quot;</span></span><br><span class="line">                + <span class="string">&quot; SELECT id FROM config_info WHERE tenant_id LIKE ? ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow</span><br><span class="line">                + <span class="string">&quot; )&quot;</span> + <span class="string">&quot; g, config_info t WHERE g.id = t.id  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigInfoBaseFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT t.id,data_id,group_id,content,md5&quot;</span></span><br><span class="line">                + <span class="string">&quot; FROM ( SELECT id FROM config_info ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow + <span class="string">&quot;  ) &quot;</span></span><br><span class="line">                + <span class="string">&quot; g, config_info t  WHERE g.id = t.id &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigInfoFragment</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,type,encrypted_data_key &quot;</span></span><br><span class="line">                + <span class="string">&quot;FROM config_info WHERE id &gt; ? ORDER BY id ASC LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findChangeConfigFetchRows</span><span class="params">(Map&lt;String, String&gt; params, <span class="keyword">final</span> Timestamp startTime,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> Timestamp endTime, <span class="type">int</span> startRow, <span class="type">int</span> pageSize, <span class="type">long</span> lastMaxId)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tenant</span> <span class="operator">=</span> params.get(TENANT);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> params.get(DATA_ID);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> params.get(GROUP);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> params.get(APP_NAME);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tenantTmp</span> <span class="operator">=</span> StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sqlFetchRows</span> <span class="operator">=</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,app_name,content,type,md5,gmt_modified FROM config_info WHERE &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> <span class="string">&quot; 1=1 &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(dataId)) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND data_id LIKE ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(group)) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND group_id LIKE ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(tenantTmp)) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND tenant_id = ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(appName)) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND app_name = ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (startTime != <span class="literal">null</span>) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND gmt_modified &gt;=? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (endTime != <span class="literal">null</span>) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND gmt_modified &lt;=? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlFetchRows + where + <span class="string">&quot; AND id &gt; &quot;</span> + lastMaxId + <span class="string">&quot; ORDER BY id ASC&quot;</span> + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset 0 &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">listGroupKeyMd5ByPageFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT t.id,data_id,group_id,tenant_id,app_name,md5,type,gmt_modified,encrypted_data_key FROM &quot;</span></span><br><span class="line">                + <span class="string">&quot;( SELECT id FROM config_info ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow</span><br><span class="line">                + <span class="string">&quot; ) g, config_info t WHERE g.id = t.id&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoBaseLikeFetchRows</span><span class="params">(Map&lt;String, String&gt; params, <span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sqlFetchRows</span> <span class="operator">=</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,content FROM config_info WHERE &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> <span class="string">&quot; 1=1 AND tenant_id=&#x27;&quot;</span> + NamespaceUtil.getNamespaceDefaultId() + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(params.get(DATA_ID))) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND data_id LIKE ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(params.get(GROUP))) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND group_id LIKE &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(params.get(CONTENT))) &#123;</span><br><span class="line">            where += <span class="string">&quot; AND content LIKE ? &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlFetchRows + where + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfo4PageFetchRows</span><span class="params">(Map&lt;String, String&gt; params, <span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> params.get(APP_NAME);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> params.get(DATA_ID);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> params.get(GROUP);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> params.get(CONTENT);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,app_name,content,type,encrypted_data_key FROM config_info&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">where</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot; WHERE &quot;</span>);</span><br><span class="line">        where.append(<span class="string">&quot; tenant_id=? &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(dataId)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND data_id=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(group)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND group_id=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(appName)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND app_name=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(content)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND content LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sql + where + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoBaseByGroupFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT id,data_id,group_id,content FROM config_info WHERE group_id=? AND tenant_id=?&quot;</span> + <span class="string">&quot; LIMIT &quot;</span></span><br><span class="line">                + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoLike4PageFetchRows</span><span class="params">(Map&lt;String, String&gt; params, <span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> params.get(DATA_ID);</span><br><span class="line">        <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> params.get(GROUP);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> params.get(APP_NAME);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> params.get(CONTENT);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sqlFetchRows</span> <span class="operator">=</span> <span class="string">&quot;SELECT id,data_id,group_id,tenant_id,app_name,content,encrypted_data_key FROM config_info&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">where</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot; WHERE &quot;</span>);</span><br><span class="line">        where.append(<span class="string">&quot; tenant_id LIKE ? &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(dataId)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND data_id LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(group)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND group_id LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(appName)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND app_name = ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(content)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND content LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlFetchRows + where + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigInfoFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5 &quot;</span></span><br><span class="line">                + <span class="string">&quot; FROM (  SELECT id FROM config_info WHERE tenant_id LIKE ? ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow + <span class="string">&quot; )&quot;</span></span><br><span class="line">                + <span class="string">&quot; g, config_info t  WHERE g.id = t.id &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConfigInfoTagMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>ConfigInfoTagMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoTagMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigInfoTagMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllConfigInfoTagForDumpAllFetchRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; SELECT t.id,data_id,group_id,tenant_id,tag_id,app_name,content,md5,gmt_modified &quot;</span></span><br><span class="line">                + <span class="string">&quot; FROM (  SELECT id FROM config_info_tag  ORDER BY id LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow + <span class="string">&quot; ) &quot;</span></span><br><span class="line">                + <span class="string">&quot;g, config_info_tag t  WHERE g.id = t.id  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConfigTagsRelationMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>ConfigTagsRelationMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigTagsRelationMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">ConfigTagsRelationMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfo4PageFetchRows</span><span class="params">(Map&lt;String, String&gt; params, <span class="type">int</span> tagSize, <span class="type">int</span> startRow, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> params.get(<span class="string">&quot;appName&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> params.get(<span class="string">&quot;dataId&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> params.get(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> params.get(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">where</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot; WHERE &quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;SELECT a.id,a.data_id,a.group_id,a.tenant_id,a.app_name,a.content FROM config_info  a LEFT JOIN &quot;</span></span><br><span class="line">                        + <span class="string">&quot;config_tags_relation b ON a.id=b.id&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        where.append(<span class="string">&quot; a.tenant_id=? &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(dataId)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.data_id=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(group)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.group_id=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(appName)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.app_name=? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(content)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.content LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        where.append(<span class="string">&quot; AND b.tag_name IN (&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tagSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                where.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            where.append(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        where.append(<span class="string">&quot;) &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sql + where + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findConfigInfoLike4PageFetchRows</span><span class="params">(<span class="keyword">final</span> Map&lt;String, String&gt; params, <span class="type">int</span> tagSize, <span class="type">int</span> startRow,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> params.get(<span class="string">&quot;appName&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> params.get(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> params.get(<span class="string">&quot;dataId&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> params.get(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">where</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot; WHERE &quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sqlFetchRows</span> <span class="operator">=</span> <span class="string">&quot;SELECT a.id,a.data_id,a.group_id,a.tenant_id,a.app_name,a.content &quot;</span></span><br><span class="line">                + <span class="string">&quot;FROM config_info a LEFT JOIN config_tags_relation b ON a.id=b.id &quot;</span>;</span><br><span class="line">        </span><br><span class="line">        where.append(<span class="string">&quot; a.tenant_id LIKE ? &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(dataId)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.data_id LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(group)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.group_id LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(appName)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.app_name = ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(content)) &#123;</span><br><span class="line">            where.append(<span class="string">&quot; AND a.content LIKE ? &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        where.append(<span class="string">&quot; AND b.tag_name IN (&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tagSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                where.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            where.append(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        where.append(<span class="string">&quot;) &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlFetchRows + where + <span class="string">&quot; LIMIT &quot;</span> + pageSize + <span class="string">&quot; offset &quot;</span> + startRow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GroupCapacityMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>GroupCapacityMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupCapacityMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">GroupCapacityMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">selectGroupInfoBySize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT id, group_id FROM group_capacity WHERE id &gt; ? LIMIT ?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HistoryConfigInfoMapperByPostgreSql类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HistoryConfigInfoMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">HistoryConfigInfoMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeConfigHistory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE FROM his_config_info WHERE gmt_modified &lt; ? LIMIT ?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pageFindConfigHistoryFetchRows</span><span class="params">(<span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (pageNo - <span class="number">1</span>) * pageSize;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> pageSize;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;SELECT nid,data_id,group_id,tenant_id,app_name,src_ip,src_user,op_type,gmt_create,gmt_modified FROM his_config_info &quot;</span></span><br><span class="line">                + <span class="string">&quot;WHERE data_id = ? AND group_id = ? AND tenant_id = ? ORDER BY nid DESC  LIMIT &quot;</span> + limit + <span class="string">&quot; offset &quot;</span> + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TenantCapacityMapperByPostgreSql类</p>
<figure class="highlight java"><figcaption><span>TenantCapacityMapperByPostgreSql类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TenantCapacityMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">TenantCapacityMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCapacityList4CorrectUsage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SELECT id, tenant_id FROM tenant_capacity WHERE id&gt;? LIMIT ?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TenantInfoMapperByPostgreSql类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TenantInfoMapperByPostgreSql</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapper</span> <span class="keyword">implements</span> <span class="title class_">TenantInfoMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceConstant.POSTGRESQL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
        <category>nacos</category>
      </categories>
      <tags>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中使用Redis</title>
    <url>/2023/5ef02c37afab/index.html</url>
    <content><![CDATA[<p>版本说明：</p>
<ol>
<li>SpringBoot 3.x</li>
</ol>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入redis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="redis-配置"><a href="#redis-配置" class="headerlink" title="redis 配置"></a>redis 配置</h2><ol>
<li>下面 <code>redis</code> 配置的前缀都是 <code>spring.data.redis</code>, 如果使用的是 <code>SpringBoot2.x</code> 版本，前缀是 <code>spring.redis</code><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认是0号库</span></span><br><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">192.168.0.236</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.username</span>=<span class="string">default</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码,默认为空</span></span><br><span class="line"><span class="attr">spring.data.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 连接池最大连接数</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间,默认-1表示没有限制</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接,默认是0</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><ol><li><a href="/2023/9cd70dc15320/index.html" title="SpringBoot编写测试类">SpringBoot编写测试类</a></li></ol>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = TestApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRedis</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取redis key1 的结果:&quot;</span> + o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>redis</code> 客户端看一下这个 <code>key</code> 和 <code>value</code></p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">[<span class="variable">db3</span>] <span class="operator">&gt;</span> <span class="variable">get</span> <span class="title function_">key1</span></span><br><span class="line">(<span class="variable">nil</span>)</span><br><span class="line"></span><br><span class="line">[<span class="variable">db3</span>] <span class="operator">&gt;</span> <span class="variable">keys</span> <span class="operator">*</span><span class="variable">key1</span><span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;\xac\xed<span class="char escape_">\x00</span><span class="char escape_">\x05</span>t<span class="char escape_">\x00</span><span class="char escape_">\x04</span>key1&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="variable">db3</span>] <span class="operator">&gt;</span> <span class="variable">keys</span> <span class="operator">*</span><span class="variable">key1</span><span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;\xac\xed<span class="char escape_">\x00</span><span class="char escape_">\x05</span>t<span class="char escape_">\x00</span><span class="char escape_">\x04</span>key1&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以看到直接使用 <code>key1</code> 竟然获取不到数据，使用模拟匹配后能看到，发现都是进行了编码，这是因为 <code>RedisTemplate</code> 默认使用 <code>jdk</code> 的序列化方式，可以通过自定义 <code>RedisTemplate</code> 方式来修改序列化方式</p>
<h2 id="自定义-RedisTemplate"><a href="#自定义-RedisTemplate" class="headerlink" title="自定义 RedisTemplate"></a>自定义 RedisTemplate</h2><p>下面代码将 <code>RedisTemplate</code> 修改成使用 <code>json</code> 方式进行序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance , ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行测试代码后再次查看结果</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[db3] <span class="operator">&gt;</span> <span class="keyword">get</span> key1</span><br><span class="line"><span class="string">&quot;<span class="subst">\&quot;</span>value1<span class="subst">\&quot;</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis分布式锁</title>
    <url>/2023/c21b41047d75/index.html</url>
    <content><![CDATA[<h2 id="redis-分布式锁要做到的事情"><a href="#redis-分布式锁要做到的事情" class="headerlink" title="redis 分布式锁要做到的事情"></a>redis 分布式锁要做到的事情</h2><ol>
<li>独占性： 任何时刻只能有一个线程持有</li>
<li>高可用： 若在 <code>redis</code> 集群环境下，不能因为某一个节点挂了而出现获取锁和释放锁失败的情况</li>
<li>防止死锁： 要有超时控制机制或者撤销操作</li>
<li>正确性： 不能 <code>unlock</code> 别人的锁，自己的锁只能自己释放</li>
<li>可重入</li>
</ol>
<h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><p><a href="https://redis.io/docs/manual/patterns/distributed-locks/">redis分布式锁官方文档</a><br>下面一段是官网对 <code>redis</code> 分布式锁的穆描述</p>
<ol>
<li>使用的算法是 <code>Redlock</code></li>
<li><code>Java</code> 版本对 <code>Redlock</code> 的实现是 <code>Redisson</code><blockquote>
<p>This page describes a more canonical algorithm to implement distributed locks with Redis. We propose an algorithm, called Redlock, which implements a DLM which we believe to be safer than the vanilla single instance approach. We hope that the community will analyze it, provide feedback, and use it as a starting point for the implementations or more complex or alternative designs.</p>
</blockquote>
</li>
</ol>
<p><a href="https://github.com/redisson/redisson">官网描述的redisson分布式实现</a><br>这里面有很多实现，比如 <code>Spring Data Redis</code>, <code>Spring Boot Starter</code> 等，我们选择<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">Spring Boot Starter</a> 这个</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.24.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="redis参数配置"><a href="#redis参数配置" class="headerlink" title="redis参数配置"></a>redis参数配置</h3><div class="tabs" id="redis参数配置"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="redis参数配置-1">SpringBoot3.x版本</button><button type="button" class="tab " data-href="redis参数配置-2">SpringBoot2.x版本</button></ul><div class="tab-contents"><div class="tab-item-content active" id="redis参数配置-1"><ol>
<li><p>redis 参数配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.username</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">spring.data.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>redisson 配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.address</span>=<span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.databse</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">spring.data.redis.redisson.singleServerConfig.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
</ol></div><div class="tab-item-content" id="redis参数配置-2"><ol>
<li><p>redis 参数配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.username</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>redisson 配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.address</span>=<span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.databse</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">spring.redis.redisson.singleServerConfig.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>使用上述配置之后，在 <code>Spring Boot</code> 环境中可以直接使用如下的几个 <code>Bean</code> </p>
<ul>
<li><code>RedissonClient</code></li>
<li><code>RedissonRxClient</code></li>
<li><code>RedissonReactiveClient</code></li>
<li><code>RedisTemplate</code></li>
<li><code>ReactiveRedisTemplate</code></li>
</ul>
<h3 id="分布式锁代码示例"><a href="#分布式锁代码示例" class="headerlink" title="分布式锁代码示例"></a>分布式锁代码示例</h3><p>下面代码实际使用的还是单机中的程序，不过用来测试分布式锁的使用已经足够了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRedis</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisLock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">100</span>; k++) &#123;</span><br><span class="line">                  <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock = redisson.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        lock.lock();</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock!= <span class="literal">null</span>) &#123;</span><br><span class="line">                            lock.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终结果:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized的作用和实现原理</title>
    <url>/2023/138a9fb1d57d/index.html</url>
    <content><![CDATA[<p>参考 《Java并发编程深度解析与实战》</p>
<h2 id="什么是线程不安全"><a href="#什么是线程不安全" class="headerlink" title="什么是线程不安全"></a>什么是线程不安全</h2><p>就是当多个线程同时访问某个方法时，这个方法无法按照我们预期的行为来执行，那么我们认为这个方法是线程不安全的</p>
<h2 id="导致线程不安全的原因"><a href="#导致线程不安全的原因" class="headerlink" title="导致线程不安全的原因"></a>导致线程不安全的原因</h2><ol>
<li>原子性</li>
<li>有序性</li>
<li>可见性</li>
</ol>
<h2 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h2><blockquote>
<p>原子性是指一个或多个指令操作在CPU执行过程中不允许被中断</p>
</blockquote>
<h3 id="原子性问题的本质"><a href="#原子性问题的本质" class="headerlink" title="原子性问题的本质"></a>原子性问题的本质</h3><ol>
<li><code>cpu</code> 时间片切换</li>
<li>执行指令的原子性，即线程运行的程序或指令是否具备原子性</li>
</ol>
<h3 id="原子性问题的解决"><a href="#原子性问题的解决" class="headerlink" title="原子性问题的解决"></a>原子性问题的解决</h3><ol>
<li>不允许当前非原子指令在执行过程中被中断。比如保证 <code>i++</code> 操作在执行过程中不存在上下文切换</li>
<li>多线程并行执行导致的原子性问题可以通过互斥条件来实现串行执行</li>
</ol>
<h2 id="同步锁之-synchronized"><a href="#同步锁之-synchronized" class="headerlink" title="同步锁之 synchronized"></a>同步锁之 synchronized</h2><h3 id="synchronized-关键字的作用"><a href="#synchronized-关键字的作用" class="headerlink" title="synchronized 关键字的作用"></a>synchronized 关键字的作用</h3><ol>
<li>作用在方法级别：锁定的是当前 <code>class</code></li>
<li>作用在代码块：锁定某个对象实例</li>
</ol>
<h3 id="synchronized-需要实现的功能"><a href="#synchronized-需要实现的功能" class="headerlink" title="synchronized 需要实现的功能"></a>synchronized 需要实现的功能</h3><ol>
<li><code>synchronized</code> 是同步排他锁，要想达到排他，就需要多个线程抢夺同一个资源</li>
<li>同一个时刻只能有一个线程抢到锁，其他没有抢到锁的线程就需要等待</li>
<li>处于等待状态的线程不能一直占用 <code>cpu</code>, 所以需要阻塞起来，并且释放 <code>cpu</code> 资源</li>
<li>如果有多个线程被阻塞，就还需要一个容器来存储这些被阻塞的线程，当获得锁的线程执行完任务并释放锁之后，就需要从容器中唤醒阻塞的线程，被唤醒的线程再次尝试获取锁</li>
</ol>
<h3 id="synchronized-之锁资源"><a href="#synchronized-之锁资源" class="headerlink" title="synchronized 之锁资源"></a>synchronized 之锁资源</h3><p>前面讲到 <code>synchronized</code> 可以修饰方法和修饰代码块</p>
<ol>
<li>修饰方法时，对应的资源就是当前 <code>class</code> （静态方法）或当前对象实例</li>
<li>修饰代码块时，是 <code>synchronized(lock)</code> 中的 <code>lock</code> 就是资源</li>
</ol>
<p><strong>需要注意的是如果多个线程访问多个锁资源，就不存在竞争关系，也就达不到互斥的效果</strong></p>
<h3 id="抢到锁的标记之-Mark-Word"><a href="#抢到锁的标记之-Mark-Word" class="headerlink" title="抢到锁的标记之 Mark Word"></a>抢到锁的标记之 Mark Word</h3><p>前面讲到 <strong>同一个时刻只能有一个线程抢到锁</strong>， 对于抢到锁的线程就需要进行标记到底是那个线程抢到了锁，这个标记就是存储在<strong>对象头</strong>中的</p>
<h4 id="java-对象存储结构"><a href="#java-对象存储结构" class="headerlink" title="java 对象存储结构"></a>java 对象存储结构</h4><p><code>java</code> 对象存储结构分为三个部分</p>
<ol>
<li>对象头</li>
<li>实例数据</li>
<li>对其填充</li>
</ol>
<p>比如创建一个对象 <code>Object lock = new Object();</code>， 在堆中 <code>lock</code> 实例最终的存储结构如下：</p>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282221986.webp" alt="对象存储结构"></p>
<h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><p>对象头包含三个部分</p>
<ol>
<li><code>Mark Word</code></li>
<li><code>Klass Pointer</code></li>
<li><code>Lenght</code></li>
</ol>
<p><strong>Mark Word</strong><br><code>Mark Word</code> 记录了与对象和锁相关的信息，当这个对象作为锁对象来实现<code>synchronized</code> 的同步操作时，锁标记和相关信息都是存储在 <code>Mark Word</code>中的</p>
<div class="tabs" id="mark-word存储结构"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="mark-word存储结构-1">32位Mark</button><button type="button" class="tab " data-href="mark-word存储结构-2">64位Mark Word存储结构</button></ul><div class="tab-contents"><div class="tab-item-content active" id="mark-word存储结构-1"><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282227201.webp" alt="32位Mark Word存储结构"></p></div><div class="tab-item-content" id="mark-word存储结构-2"><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282225221.webp" alt="64位Mark Word存储结构"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<ol>
<li>不管在32位还是64位系统中，<code>Mark Word</code>中都会包含<code>GC</code>分代年龄、锁状态标记</li>
<li>锁状态的字段，它包含五种状态分别是无锁、偏向锁、轻量级锁、重量级锁、GC标记</li>
<li>无锁和偏向锁的 锁标记位都是 01，但是有一个单独的 <code>bit</code> 存储 <strong>是否偏向锁</strong></li>
</ol>
<p><strong>Klass Pointer</strong><br><code>Klass Pointer</code> 记录了对象所属的 <code>class</code> 信息，当对象被创建时，会将 <code>Klass Pointer</code> 指向 <code>class</code> 信息</p>
<p><strong>Length</strong><br>表示数组长度，只有构建对象数组时才会有数组长度属性</p>
<h4 id="内存中对象存储示例"><a href="#内存中对象存储示例" class="headerlink" title="内存中对象存储示例"></a>内存中对象存储示例</h4><p>比如下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarkWordExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MarkWordExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarkWordExample</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>jvm</code> 运行时内存中结构如下图所示<br><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282236608.webp" alt="对象结构示例"></p>
<h2 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h2><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282252724.webp" alt="锁升级"></p>
<div class="tabs" id="锁升级过程"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="锁升级过程-1">偏向锁</button><button type="button" class="tab " data-href="锁升级过程-2">偏向锁的批量重偏向</button><button type="button" class="tab " data-href="锁升级过程-3">轻量级锁</button><button type="button" class="tab " data-href="锁升级过程-4">重量级锁</button></ul><div class="tab-contents"><div class="tab-item-content active" id="锁升级过程-1"><p>偏向锁其实可以认为是在没有多线程竞争的情况下访问<code>synchronized</code>修饰的代码块的加锁场景，也就是在单线程执行的情况下</p>
<p>线程在没有线程竞争的情况下去访问synchronized同步代码块时，会尝试先通过偏向锁来抢占访问资格，这个抢占过程是基于CAS来完成的，如果抢占锁成功，则直接修改对象头中的锁标记。其中，偏向锁标记为1，锁标记为01，以及存储当前获得锁的线程ID。而偏向的意思就是，如果线程X获得了偏向锁，那么当线程X后续再访问这个同步方法时，只需要判断对象头中的线程ID和线程X是否相等即可。如果相等，就不需要再次去抢占锁，直接获得访问资格即可</p></div><div class="tab-item-content" id="锁升级过程-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BiasedLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;BiasedLock&gt; locks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">BiasedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BiasedLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="type">BiasedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BiasedLock</span>();</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    locks.add(lock);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        thead.join();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="type">BiasedLock</span> <span class="variable">lock2</span> <span class="operator">=</span> locks.get(i);</span><br><span class="line">                <span class="keyword">synchronized</span> (lock2) &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">上面代码创建了两个线程，第一个线程创建了 <span class="number">100</span>个锁对象，第一个线程执行完成之后，第二个线程获取 <span class="number">100</span>个锁对象中的前面<span class="number">20</span>个进行加锁，这时会触发这些锁对象的升级过程，会从偏向锁升级到轻量级锁， 但是当执行到<span class="number">20</span>循环后，这个锁对象又会变成偏向锁</span><br><span class="line"></span><br><span class="line">在`JVM`中，以`class`（这里指 `BiasedLock`）为单位，为每个`class`维护了一个偏向锁撤销的计数器，当这个`class`的对象发生偏向撤销操作时，计数器会进行累加，当累加的值达到重偏向的阈值时，`JVM`会认为这个`class`的偏向锁有问题，需要重新偏向</span><br><span class="line"></span><br><span class="line">偏向锁撤销并批量重偏向的触发阈值可以通过`XX:BiasedLockingBulkRebiasThreshold = <span class="number">20</span>`来配置，默认是<span class="number">20</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="锁升级过程-3"><p>轻量级锁就是没有抢占到锁的线程，进行一定次数的重试（自旋）。比如线程第一次没抢到锁则重试几次，如果在重试的过程中抢占到了锁，那么这个线程就不需要阻塞，这种实现方式我们称为自旋锁</p>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282243489.webp" alt="轻量级锁"></p>
<p>获得轻量级锁的过程中可能需要不断自旋操作，这也是有代价的，所以也不可能一直自旋下去</p>
<p>在<code>JDK 1.6</code>中默认的自旋次数是10次，我们可以通过<code>-XX:PreBlockSpin</code>参数来调整自旋次数。同时开发者在<code>JDK 1.6</code>中还对自旋锁做了优化，引入了自适应自旋锁，自适应自旋锁的自旋次数不是固定的，而是根据前一次在同一个锁上的自旋次数及锁持有者的状态来决定的。如果在同一个锁对象上，通过自旋等待成功获得过锁，并且持有锁的线程正在运行中，那么<code>JVM</code>会认为此次自旋也有很大的机会获得锁，因此会将这个线程的自旋时间相对延长。反之，如果在一个锁对象中，通过自旋锁获得锁很少成功，那么<code>JVM</code>会缩短自旋次数</p></div><div class="tab-item-content" id="锁升级过程-4"><p>轻量级锁能够通过一定次数的重试让没有获得锁的线程有可能抢占到锁资源，但是轻量级锁只有在获得锁的线程持有锁的时间较短的情况下才能起到提升同步锁性能的效果，如果没抢占到锁资源的线程通过一定次数的自旋后，发现仍然没有获得锁，就只能阻塞等待了，所以最终会升级到重量级锁，通过系统层面的互斥量来抢占锁资源</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="CAS原理"><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h2><p>前面介绍 <code>synchronized</code> 的 轻量级锁就是通过 <code>cas</code> 实现的，<code>cas</code> 是一种无锁算法，它是通过 CPU 指令实现的，<code>cas</code> 指令是一条 CPU 指令，它包含三个操作数，分别是内存地址、预期的值、更新的值，当且仅当内存地址的值与预期的值相同时，将该值更新为更新值，否则不做任何操作。</p>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311282249030.webp" alt="cas操作过程"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>redis发布订阅</title>
    <url>/2023/2d9e56a00163/index.html</url>
    <content><![CDATA[<p>参考 <a href="https://docs.spring.io/spring-data/redis/reference/redis/pubsub.html">Spring官网对redis发布订阅的代码实现</a><br>说明：</p>
<ol>
<li><code>SpringBoot3.x</code> 使用 <code>Redis</code> 可以先参考下面的文章</li>
</ol>
<ol><li><a href="/2023/5ef02c37afab/index.html" title="SpringBoot中使用Redis">SpringBoot中使用Redis</a></li></ol>
<ol start="2">
<li>整体代码分为三部分</li>
<li>消息监听者 (这部分是业务代码中需要编写的消息接收的逻辑)</li>
<li>注册消息监听者 （这部分是将自己编写的消息监听者注册到 redis 中，便于 redis 可以调用到我们的消息监听类）</li>
<li>消息发送者</li>
</ol>
<h2 id="消息监听者"><a href="#消息监听者" class="headerlink" title="消息监听者"></a>消息监听者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisMessageListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到的消息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册消息监听"><a href="#注册消息监听" class="headerlink" title="注册消息监听"></a>注册消息监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisMessageListener</span> &#123;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_SUBSCRIBE_CHANNEL</span> <span class="operator">=</span> <span class="string">&quot;redis.subscribe.channel&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisMessageListenerContainer <span class="title function_">listenerContainer</span><span class="params">(RedisConnectionFactory factory,</span></span><br><span class="line"><span class="params">                                                           MessageListenerAdapter messageListenerAdapter)</span>&#123;</span><br><span class="line">        <span class="type">RedisMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisMessageListenerContainer</span>();</span><br><span class="line">        container.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//redis.subscribe.channel 是配置的订阅的 channel, 发送时也需要往这个 channel 中发送</span></span><br><span class="line">        container.addMessageListener(messageListenerAdapter, <span class="keyword">new</span> <span class="title class_">PatternTopic</span>(REDIS_SUBSCRIBE_CHANNEL));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageListenerAdapter <span class="title function_">messageListenerAdapter</span><span class="params">(RedisMessageListener listener)</span>&#123;</span><br><span class="line">        <span class="type">MessageListenerAdapter</span> <span class="variable">messageListenerAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageListenerAdapter</span>(listener,</span><br><span class="line">                <span class="string">&quot;onMessage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> messageListenerAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码中看到往 <code>RedisMessageListenerContainer</code> 类中注册的并不是我们自己编写的 <code>RedisMessageListener</code>， 而是 <code>MessageListenerAdapter</code>（<code>MessageListenerAdapter</code> 包裹了 <code>RedisMessageListener</code>），这是因为需要通过 <code>MessageListenerAdapter</code> 来做消息适配，比如我们编写的 <code>RedisMessageListener</code> 类中 <code>onMessage(String)</code> 方法接收 <code>String</code> 类型参数，为什么可以直接接收 <code>String</code> 类型参数呢？ 就是 <code>MessageListenerAdapter</code> 做了转换</p>
<h2 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPublish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里使用convertAndSend方法，参数为 channel 通道和内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(String channel, String msg)</span> &#123;</span><br><span class="line">        stringRedisTemplate.convertAndSend(channel, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主类启动并测试"><a href="#主类启动并测试" class="headerlink" title="主类启动并测试"></a>主类启动并测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        <span class="comment">// 为了让日志在最后打印，便于展示所以延迟5s再发送</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="type">RedisPublish</span> <span class="variable">redisPublish</span> <span class="operator">=</span> applicationContext.getBean(RedisPublish.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            redisPublish.sendMsg(RedisConfig.REDIS_SUBSCRIBE_CHANNEL, <span class="string">&quot;测试发送数据&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">监听到的消息:<span class="string">&quot;测试发送数据1&quot;</span></span><br><span class="line">监听到的消息:<span class="string">&quot;测试发送数据2&quot;</span></span><br><span class="line">监听到的消息:<span class="string">&quot;测试发送数据3&quot;</span></span><br><span class="line">监听到的消息:<span class="string">&quot;测试发送数据4&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis和mysql双写一致性问题</title>
    <url>/2023/68d7307921af/index.html</url>
    <content><![CDATA[<p>当数据有更新时，是先更新缓存还是先更新数据库？或者是其他的操作？对于缓存和数据库的更新组合有以下几种方式</p>
<h2 id="先更新缓存，再更新数据库"><a href="#先更新缓存，再更新数据库" class="headerlink" title="先更新缓存，再更新数据库"></a>先更新缓存，再更新数据库</h2><p>假设更新缓存成功，但是更新数据库失败，缓存中数据就是错误，而且 redis 是不支持事务回滚，所以这种方案有比较大的缺陷</p>
<h2 id="先删除缓存，再更新数据库"><a href="#先删除缓存，再更新数据库" class="headerlink" title="先删除缓存，再更新数据库"></a>先删除缓存，再更新数据库</h2><ol>
<li>使用这种方案，即使更新数据库失败了也不需要回滚缓存。这种做法虽然巧妙规避了失败回滚的问题，但是会有其他的问题</li>
<li>假设线程A先删除缓存，再更新数据库。在线程A完成更新数据库之前，后执行的线程B反而超前完成了操作，读取Key发现没有数据后，将数据库中的旧值存放到了缓存中。线程A在线程B都完成后再更新数据库，这样就会出现缓存（旧值）与数据库的值（新值）不一致的问题</li>
</ol>
<h2 id="先更新数据库，再更新缓存"><a href="#先更新数据库，再更新缓存" class="headerlink" title="先更新数据库，再更新缓存"></a>先更新数据库，再更新缓存</h2><ol>
<li>当更新数据库成功，更新缓存失败时，可以采取重试的策略，但重试机制如果存在延时还是会出现数据库与缓存不一致的情况，不好处理</li>
<li>假设两个线程同时更新同一个数据，线程A先完成了第一步，线程B先完成了第二步怎么办？线程A把值更新成a，线程B把值更新成b，此时数据库中的最新值是b，因为线程A先完成了第一步，后完成第二步，所以缓存中的最新值是a，数据库与缓存的值还是不一致，这个逻辑还是有问题的</li>
</ol>
<h2 id="先更新数据库，再删除缓存"><a href="#先更新数据库，再删除缓存" class="headerlink" title="先更新数据库，再删除缓存"></a>先更新数据库，再删除缓存</h2><ol>
<li>因为更新数据库之后是删除缓存，所以可以解决 <strong>先更新数据库，再更新缓存</strong> 带来的缓存不一致的问题</li>
<li>假设线程A要更新数据，先完成第一步更新数据库，在线程A删除缓存之前，线程B要访问缓存，那么取得的就是旧数据， 不过这种情况出现的概率比较低</li>
</ol>
<h2 id="先删除缓存，更新数据库，再删除缓存"><a href="#先删除缓存，更新数据库，再删除缓存" class="headerlink" title="先删除缓存，更新数据库，再删除缓存"></a>先删除缓存，更新数据库，再删除缓存</h2><ol>
<li>和 <strong>先更新数据库，再删除缓存</strong> 处理方式类似，所以还是会出现类似的问题，假设线程A要更新数据库，先删除了缓存，这一瞬间线程C要读缓存，先把数据迁移到缓存；然后线程A完成了更新数据库的操作，这一瞬间线程B也要访问缓存，此时它访问到的就是线程C放到缓存里面的旧数据， 不过这种情况出现的概率更低，这是需要三个线程配合才可能会出现的问题</li>
</ol>
<p>综上所述，每一种方案都是有一定的缺陷的，只是最后一种方式可以让缺陷发生的机率更低而已</p>
]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis底层数据结构</title>
    <url>/2023/19e21a188fd0/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="redis-对象"><a href="#redis-对象" class="headerlink" title="redis 对象"></a>redis 对象</h2><p><code>redis</code> 中所有数据类型都是使用 <code>RedisObject</code> 对象形式来表示，<code>RedisObject</code> 主要包含三个字段</p>
<span id="more"></span>

<pre class="mermaid">graph LR
    A[RedisObject]
    A-->B["type (记录对象的类型) \n 常用5种基本类型，实际还有BitMap（2.2 版新增）\n、HyperLogLog（2.8 版新增）、\n GEO（3.2 版新增）、Stream（5.0 版新增）"]

    B1[String 字符串对象]
    B2[List 列表集合]
    B3[Hash 哈希对象]
    B4[Set 集合对象]
    B5[Zset 有序集合对象]
    B--> B1 & B2 & B3 & B4 & B5

    A-->C["encoding (记录对象的编码)"]
    C1[Intset 整数集合]
    C2[embstr embstr编码的简单动态字符串]
    C3[raw 简单动态字符串]
    C4[HT 字典]
    C5[Linkedlist 双端列表]
    C6[ziplist 压缩列表]
    C7[skiplist 跳跃表和字典]
    C8[quicklist 快速列表]
    C-->C1 & C2 & C3 & C4 & C5 & C6 & C7 & C8

    A-->D["*ptr (指向具体的类型)"]</pre>

<h3 id="为什么一个对象需要包含-type-和-encoding"><a href="#为什么一个对象需要包含-type-和-encoding" class="headerlink" title="为什么一个对象需要包含 type 和 encoding"></a>为什么一个对象需要包含 <code>type</code> 和 <code>encoding</code></h3><ol>
<li>因为 <code>type</code> 只是记录对象的类型</li>
<li>每一个 <code>type</code> 可以使用不同的底层数据结构来实现，所以还需要具体的 <code>encoding</code> 来指明这个 <code>type</code> 的实现是什么， 下图就列出每一个 <code>type</code> 有哪几种底层数据结构</li>
</ol>
<h2 id="5-种基本数据类型对应的底层实现"><a href="#5-种基本数据类型对应的底层实现" class="headerlink" title="5 种基本数据类型对应的底层实现"></a>5 种基本数据类型对应的底层实现</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol>
<li><code>String</code> 类型的底层的数据结构实现主要是 <code>int</code> 和 <code>SDS</code>（简单动态字符串）<ol>
<li>如果存储的是数字，则编码使用 <code>int</code> 类型</li>
</ol>
</li>
<li><code>sds</code> 的实际编码又包含 <code>raw</code> 和 <code>embstr</code><ol>
<li>字符串长度小于 32位时使用 <code>embstr</code>(<code>embstr</code> 的空间挨着 <code>RedisObject，RedisObject</code> 和 <code>embstr</code> 的内存是一次性分配的)</li>
<li>字符串长度大于 32位时使用 <code>raw</code> 编码(<code>RedisObject</code> 的内存分区和 <code>raw</code> 编码类型的空间分配是分开的，也就是需要两次内存分配)</li>
</ol>
</li>
</ol>
<h4 id="SDS-和-C-原生字符串的区别"><a href="#SDS-和-C-原生字符串的区别" class="headerlink" title="SDS 和 C 原生字符串的区别"></a>SDS 和 C 原生字符串的区别</h4><ol>
<li><code>sds</code> 可以保存文本和二进制数据，因为 <code>sds</code> 有 <code>length</code> 字段来判断字符串是否结束，c 使用 ‘\0’ 作为结束符</li>
<li><code>sds</code> 的 <code>api</code> 安全，不会出现缓冲区溢出，因为 <code>sds</code> 拼接字符串前有做容量检查</li>
</ol>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ol>
<li><code>List</code> 类型的底层数据结构是由双向链表或压缩列表实现的<ol>
<li>元素个数小于 512 个（默认值，可由 <code>list-max-ziplist-entries</code> 配置），列表每个元素的值都小于 64 字节（默认值，可由 <code>list-max-ziplist-value</code> <code>配置），Redis</code> 会使用压缩列表作为 <code>List</code> 类型的底层数据结构；</li>
</ol>
</li>
<li>在 <code>Redis3.2</code> 版本之后，<code>List</code> 类型底层数据结构只有 <code>quicklist</code> 一种</li>
</ol>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><ol>
<li><code>Hash</code> 类型的底层数据结构是由压缩列表或哈希表实现的<ol>
<li>元素个数小于 512 个（可通过 <code>hash-max-ziplist-entries</code> 修改），所有值小于 64 字节（可通过 <code>hash-max-ziplist-value</code> 修改）时，<code>Redis</code> 会使用压缩列表作为 <code>Hash</code> 类型的底层数据结构</li>
</ol>
</li>
<li>在 <code>Redis7.0</code> 中，压缩列表数据结构被废弃，由 <code>listpack</code> 数据结构来实现</li>
</ol>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ol>
<li><code>Set</code> 类型的底层数据结构是由哈希表或整数集合实现的<ol>
<li>如果集合中的元素都是整数且元素个数小于 512 （可通过 <code>set-maxintset-entries</code> 修改）个，<code>Redis</code> 会使用整数集合作为 Set 类型的底层数据结构</li>
</ol>
</li>
</ol>
<h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><ol>
<li><p>Zset 类型底层数据结构是由压缩列表或跳表实现</p>
<ol>
<li>若有序集合的元素个数小于 128 个且每个元素的值小于 64 字节，<code>Redis</code> 会使用压缩列表作为 <code>Zset</code> 类型的底层数据结构</li>
</ol>
</li>
<li><p><code>Redis 7.0</code> 中，压缩列表数据结构被废弃，交由 <code>listpack</code> 数据结构来实现</p>
</li>
</ol>
]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis线程模型</title>
    <url>/2023/e4db3f95ceb5/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>总结：<code>redis</code> 整体是多线程的，至于平时所说的 <code>redis</code> 单线程是指 <strong>redis的网络io 和 键值对读写</strong> 是在同一个线程中完成</p>
<h2 id="一次-redis-请求过程"><a href="#一次-redis-请求过程" class="headerlink" title="一次 redis 请求过程"></a>一次 redis 请求过程</h2><ol>
<li>监听客户端请求（<code>bind/listen</code>）</li>
<li>等待客户端的连接（<code>accept</code>）</li>
<li>从 <code>socket</code> 中读取数据（<code>recv</code>）</li>
<li>解析客户端发送的内容（<code>parse</code>）</li>
<li>根据解析出来的内容进行内存操作（<code>get/set</code>）</li>
<li>执行完成命令之后给客户端响应结果，即向 <code>socket</code> 中写数据（<code>send</code>）</li>
</ol>
<pre class="mermaid">graph TB
    subgraph A[redis线程]
        subgraph B[网络IO处理]
            B1[bind/listen]
            B2[accept]
            B3[recv]
            B4[parse]
        end
        subgraph C[键值对读写]
            C1[get/set]
        end
        subgraph D[网络IO处理]
            D1[send]
        end
    end
    B-->C-->D</pre>
<ul>
<li>网络 io 处理过程中， <code>listen</code> 和 <code>recv</code> 这两个步骤是可能阻塞的，即当没有链接或客户端没有发送命令时，服务器处理这两个环节时会阻塞，<strong>但是socket网络模型自身就支持非阻塞的形式</strong></li>
</ul>
<h2 id="redis4-版本中的多线程"><a href="#redis4-版本中的多线程" class="headerlink" title="redis4 版本中的多线程"></a>redis4 版本中的多线程</h2><ol>
<li>在 <code>redis4</code> 中主要是增加了异步删除机制，比如 <code>UNLINK、FLUSHALL ASYNC、FLUSHDB ASYNC</code> 等非阻塞的删除操作。</li>
<li>引入异步删除的原因是现在服务器的内存原来越大，<code>redis</code> 中可能会存在 <code>bigKey</code>, 对于这些 <code>bigKey</code> 的删除如果使用阻塞的方式，会导致服务器的响应时间变长，所以引入了异步删除的机制，即当删除 <code>bigKey</code> 的时候，会将删除操作放入一个异步队列中，由一个单独的线程来负责异步删除，这样就可以提高服务器的响应时间</li>
</ol>
<h2 id="redis6-版本的多线程"><a href="#redis6-版本的多线程" class="headerlink" title="redis6 版本的多线程"></a>redis6 版本的多线程</h2><p>在 <code>redis6</code> 中有几个重要特性，比如</p>
<ol>
<li>面向<strong>网络处理</strong>的多 <code>IO</code> 线程</li>
<li>客户端缓存</li>
<li>细粒度的权限控制</li>
</ol>
<p>本节主要讲解 <code>redis6</code> 中的多线程模型，在 <code>redis6</code> 之前，<strong>从网络io处理到键值对读写都是在同一个线程中完成的</strong>， 随着网络硬件的性能提升，<code>redis</code> 的性能瓶颈有时会出现在网络<code>io</code>的处理上，即 <strong>单个主线程处理网络请求的速度跟不上底层网络硬件的速度</strong>，所以在 <code>redis6</code> 中使用多个网络<code>io</code>线程来处理网络请求，提高网络请求处理并行的能力, 需要注意的是 <strong>redis6的多线程模型只是针对网络io部分，redis的数据读写依然是在一个线程中完成的</strong></p>
<h3 id="redis6中主线程和io线程协作流程"><a href="#redis6中主线程和io线程协作流程" class="headerlink" title="redis6中主线程和io线程协作流程"></a>redis6中主线程和io线程协作流程</h3><pre class="mermaid">graph TB
    subgraph A["redis主线程(接收请求)"]
        direction TB
        style A fill:#f9f
        A1["接收建立连接请求，获取socket"]
        A2["将socket放入全局等待队列"]
        A3["以轮询方式将socket连接分配给IO线程, 主线程开始阻塞-----"]
        A1-->A2-->A3
    end
    subgraph B["redis网络IO线程(解析请求)"]
        direction TB
        B1["将socket和线程绑定"]
        B2["读取socket中的请求并解析"]
        B3["请求解析完成"]
        B1-->B2-->B3
    end
    subgraph BB["redis网络IO线程(解析请求)"]
        direction TB
        BB1["将socket和线程绑定"]
        BB2["读取socket中的请求并解析"]
        BB3["请求解析完成"]
        BB1-->BB2-->BB3
    end
    A--"io线程开始执行"-->B & BB
    subgraph C["redis主线程(命令读写)"]
        direction TB
        style C fill:#f9f
        C1["执行请求的命令操作"]
        C2["请求的命令操作执行完成"]
        C3["将结果数据写入缓冲区"]
        C4["等待io线程完成数据回写socket，主线程阻塞---"]
        C1-->C2-->C3-->C4
    end
    B-->C
    BB-->C
    subgraph D["redis网络IO线程(结果响应)"]
        direction TB
        D1["将结果数据回写socket(这一步是并行处理)"]
        D2["socket回写完成"]
        D1-->D2
    end
    subgraph DD["redis网络IO线程(结果响应)"]
        direction TB
        DD1["将结果数据回写socket(这一步是并行处理)"]
        DD2["socket回写完成"]
        DD1-->DD2
    end
    C-->D & DD
    D-->E["主线程清空等待队列，等待后续请求"]
    DD-->E["主线程清空等待队列，等待后续请求"]
    style E fill:#f9f</pre>
<h3 id="阶段1"><a href="#阶段1" class="headerlink" title="阶段1"></a>阶段1</h3><ol>
<li>服务端和客户端连接 <code>socket</code> 连接，并将 <code>socket</code> 放入全局等待队列</li>
<li>主线程通过轮询的方式，将 <code>socket</code> 连接分配给 <code>io</code> 线程</li>
<li>主线程进入阻塞状态</li>
</ol>
<h3 id="阶段2"><a href="#阶段2" class="headerlink" title="阶段2"></a>阶段2</h3><ol>
<li><code>io</code> 线程完成客户端请求读取和解析</li>
<li><code>io</code> 线程有多个，是并发操作的, 所以会很快</li>
</ol>
<h3 id="阶段3"><a href="#阶段3" class="headerlink" title="阶段3"></a>阶段3</h3><ol>
<li>等待 <code>io</code> x线程将命令解析完成后，<strong>主线程会以单线程的方式执行这个命令操作</strong></li>
</ol>
<h3 id="阶段4"><a href="#阶段4" class="headerlink" title="阶段4"></a>阶段4</h3><ol>
<li>主线程执行完请求操作后，将需要返回的结果写入缓冲区，然会，主线程会阻塞等待 <code>io</code> 线程把这些结果写回到 <code>socket</code> 中，并返回给客户端</li>
<li><code>io</code> 线程回写 <code>socket</code> 之后，主线程会清空全局队列，等待客户端的后续请求</li>
</ol>
<h2 id="redis6-多线程模型的启用"><a href="#redis6-多线程模型的启用" class="headerlink" title="redis6 多线程模型的启用"></a>redis6 多线程模型的启用</h2><ol>
<li>在 <code>redis6</code> 中，多线程模块默认是关闭的</li>
<li>可以在 <code>redis.conf</code> 中设置 <code>io-threads-do-reads yes</code> 来开启多线程</li>
<li>可以在 <code>redis.conf</code> 中设置线程个数，比如 <code>io-threads 4</code>, 一般建议线程个数小于 <code>redis</code> 实例所在机器的 <code>cpu</code> 核个数</li>
</ol>
<h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><ol>
<li><code>Redis6.0</code>增加了<code>IO</code>线程来处理网络请求，如果客户端先发送了一个<code>set key1 val1</code>写命令，紧接着发送一个<code>get key1</code>读命令。由于IO线程是多线程处理的，是否会导致<code>get key1</code>读命令 先于 <code>set key1 val1</code>写命令执行呢？结果客户端读到了<code>key1</code>的旧值的情况发生？</li>
</ol>
<blockquote>
<p>如果这两条命令是同一个客户端发送的，有明显的先后顺序，就不会出现这种情况，因为接收请求的还是主线程，主线程接收请求后会将命令入队列，这个是可以保证顺序的，虽然后续是交给多线程来解析请求，但是命令读写的顺序还是会按照队列中命令先后出现的顺序，而且命令读写是通过主线程单线程操作的。</p>
<p>如果这里说的是多个客户端发送的命令，那就需要看哪个客户端发送的请求先到达服务端，先到达的命令会先执行</p>
</blockquote>
]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存雪崩缓存击穿缓存穿透</title>
    <url>/2023/90567821a93b/index.html</url>
    <content><![CDATA[<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>缓存雪崩是指在缓存服务器重启或者大量 <code>key</code> 集中在某一时刻同时失效，而这些缓存在同一时刻被大量的请求所访问，从而引起大量的缓存集中失效，引起请求的性能急剧下降。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>避免缓存设置相近的有效期</li>
<li>对数据进行预热</li>
</ol>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>缓存击穿是指一个热点 <code>key</code>在缓存失效的时候，同时大量的请求都在访问这个<code>key</code>，而这些请求都在同时失效，从而引起大量的请求集中到达数据库，从而引起数据库的压力。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>热点数据永远不过期，即在数据过期之间可以先进行更新</li>
<li>使用分布式锁，只让一个线程去查询 <code>db</code> 并返回结果，不过这种方式在高并发下比较影响性能</li>
</ol>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>缓存和数据库中都没有的数据，还是有源源不断的请求到达，导致每次请求都会到数据库，从而压垮数据库</p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>对于查询数据库也不存在的数据，依然可以存放在 <code>redis</code> 中，并且设置一个较短的过期时间</li>
<li>使用布隆过滤器</li>
</ol>
]]></content>
      <categories>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB存储引擎详解</title>
    <url>/2023/a421bfc0bf81/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h2 id="InnoDB-存储引擎数据操作过程"><a href="#InnoDB-存储引擎数据操作过程" class="headerlink" title="InnoDB 存储引擎数据操作过程"></a>InnoDB 存储引擎数据操作过程</h2><ol>
<li><code>InnoDB</code> 存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理, 页大小默认时 <code>16KB</code></li>
<li>从数据库中读取数据，是会先从磁盘读取到也放入缓冲池中，该过程称为将页 <code>Fix</code> 在缓冲池中</li>
<li>对于数据库中页的修改操作，是先修改缓冲区中的页(如果没有则使用步骤2进行加载)，然后使用一定的频率刷新到磁盘中，刷新数据到磁盘是通过 <code>Checkpoint</code> 机制实现</li>
</ol>
<h2 id="缓冲池内存数据对象"><a href="#缓冲池内存数据对象" class="headerlink" title="缓冲池内存数据对象"></a>缓冲池内存数据对象</h2><pre class="mermaid">flowchart TB
  subgraph A["InnoDB内存结构"]
    B["重做日志缓冲 \n(redo log buffer)"]
    C["额外内存"]
    subgraph D["缓冲池(innodb_buffer_pool)"]
      style D fill:green
      D1["数据页"]
      D2["索引页"]
      D3["插入缓冲"]
      D4["锁信息"]
      D5["自适应hash索引"]
      D6["数据字典信息"]
    end
    subgraph E["缓冲池(innodb_buffer_pool)"]
      style E fill:green
      E1["数据页"]
      E2["索引页"]
      E3["插入缓冲"]
      E4["锁信息"]
      E5["自适应hash索引"]
      E6["数据字典信息"]
    end
  end</pre>
<ol>
<li><code>InnoDB</code> 引擎允许有多个 <code>Buffer Pool</code> 对象， 每个页可以根据哈希值平均分配到不算的缓冲池中，这样可以检测数据库内部的资源竞争，增加数据库的并发能力， 可以通过 <code>innodb_buffer_pool_instances</code> 来进行设置，默认是1</li>
</ol>
<h2 id="LRU-List，Free-List-和-Flush-List"><a href="#LRU-List，Free-List-和-Flush-List" class="headerlink" title="LRU List，Free List 和 Flush List"></a>LRU List，Free List 和 Flush List</h2><h3 id="Free-List-空闲链表"><a href="#Free-List-空闲链表" class="headerlink" title="Free List 空闲链表"></a>Free List 空闲链表</h3><ol>
<li><code>Free List</code> 是 <code>InnoDB</code> 存储引擎中一个重要的数据结构，它用于管理 <code>Buffer Pool</code> 中的空闲页，当需要使用一个新的页的时候，会从空闲链表中获取一个页，在数据库刚运行时，所有的页都是空闲页</li>
</ol>
<h3 id="LRU-List-Latest-Recent-Used-最近最少使用"><a href="#LRU-List-Latest-Recent-Used-最近最少使用" class="headerlink" title="LRU List(Latest Recent Used) 最近最少使用"></a>LRU List(Latest Recent Used) 最近最少使用</h3><ol>
<li>数据库中的缓冲池是通过<code>LRU</code>（<code>Latest Recent Used</code>，最近最少使用）算法来管理缓存页的。即最频繁使用的页在 <code>LRU</code> 列表的前端，而最少使用的页在 <code>LRU</code> 列表的尾端</li>
<li>对于 <code>InnoDB</code> 而言，数据放在磁盘中就是数据页，当数据页加载到缓冲区中后就变成了缓存页，二者大小是相同的</li>
<li><code>InnoDB</code> 中根据 <strong>数据冷热分离思想</strong> 对 <code>LRU</code> 链表进行了优化，从磁盘中加载的数据页默认先放在 <code>LRU</code> 的冷数据区域，满足一定条件后才会将移动到热取数据区域（冷数据区域默认占 3&#x2F;8），可以通过 <code>innodb_old_blocks_pct</code> 参数修改</li>
<li><code>Mysql</code> 的预读机制可能会加载实际不会使用到的数据到缓冲池中，会占用缓冲池的空间</li>
<li>遇到类似 <code>select * from table</code> 这种全表扫描的语句，会加载大量的磁盘中的数据页到缓冲区中，但是这些数据可能只用一次就不用了，如果直接放在 <code>LRU</code> 链表头部可能会将其他常用的数据挤出缓冲区</li>
</ol>
<h3 id="Flush-列表"><a href="#Flush-列表" class="headerlink" title="Flush 列表"></a>Flush 列表</h3><ol>
<li><code>LRU</code> 链表中管理的缓存页被修改之后就会变成 <strong>脏页</strong>， 这些脏页最终是需要将其刷新到磁盘中的，所以需要将所有的脏页放在一起进行管理，于是 <code>Flush List</code> 就诞生了</li>
<li><code>LRU</code> 列表用来管理缓冲池中页的可用性，<code>Flush</code>列表用来管理将页刷新回磁盘，二者互不影响</li>
</ol>
<h2 id="重做日志缓冲"><a href="#重做日志缓冲" class="headerlink" title="重做日志缓冲"></a>重做日志缓冲</h2><blockquote>
<p>InnoDB 存储引擎的内存区域除了有缓冲池外，还有重做日志缓冲（redo log buffer）。InnoDB存储引擎首先将重做日志信息先放入到这个缓冲区，然后按一定频率将其刷新到重做日志文件。重做日志缓冲一般不需要设置得很大，因为一般情况下每一秒钟会将重做日志缓冲刷新到日志文件，因此用户只需要保证每秒产生的事务量在这个缓冲大小之内即可。该值可由配置参数innodb_log_buffer_size控制，默认为8MB</p>
</blockquote>
<h3 id="重做日志缓冲刷盘时机"><a href="#重做日志缓冲刷盘时机" class="headerlink" title="重做日志缓冲刷盘时机"></a>重做日志缓冲刷盘时机</h3><ol>
<li><code>Master Thread</code> 每一秒将重做日志缓冲刷新到重做日志文件；</li>
<li>每个事务提交时会将重做日志缓冲刷新到重做日志文件；</li>
<li>当重做日志缓冲池剩余空间小于1&#x2F;2时，重做日志缓冲刷新到重做日志文件。</li>
</ol>
<h2 id="Checkpoint-技术"><a href="#Checkpoint-技术" class="headerlink" title="Checkpoint 技术"></a>Checkpoint 技术</h2><h3 id="redo-产生背景"><a href="#redo-产生背景" class="headerlink" title="redo 产生背景"></a>redo 产生背景</h3><ol>
<li>数据页加载到缓冲区变成缓存页，缓存页被修改后就变成脏页，脏页最终是要刷回磁盘，如果缓存页有变化就刷盘那么性能很差（磁盘随机读写），如果很久都不刷盘，可能会有数据丢失的情况</li>
<li>为了避免数据丢失，很多系统普遍 <code>Write Ahead Log</code> 策略，即当事务提交时，先写重做日志，再修改页。当由于发生宕机而导致数据丢失时，通过重做日志来完成数据的恢复（日志是磁盘顺序写）</li>
</ol>
<h3 id="checkpoint-作用"><a href="#checkpoint-作用" class="headerlink" title="checkpoint 作用"></a>checkpoint 作用</h3><p>从上面两点可以知道 <code>redo</code> 日志的作用，但是 <code>redo</code> 日志文件也不可能无限大，即使可以无限大，最终数据恢复时间也很漫长，所以才引入 <code>checkpoint</code> 技术，主要解决以下几个问题</p>
<ol>
<li>缩短数据库的恢复时间</li>
<li>缓冲区不够用时，将脏页刷新到磁盘</li>
<li>重做日志不可用时，刷新脏页</li>
<li>因为重做日志不是无限大，而是循环使用，所以当设置的大小都被占用了，就需要将脏页数据刷盘</li>
</ol>
<p>可以认为 <code>checkpoint</code> 就是一个临界点，在 <code>checkpoint</code> 之前的数据都已经存在磁盘上了，在 <code>checkpoint</code> 之后的数据存在 <code>redo</code> 日志和缓存页中</p>
<h3 id="checkpoint-实现"><a href="#checkpoint-实现" class="headerlink" title="checkpoint 实现"></a>checkpoint 实现</h3><ol>
<li>对于 <code>InnoDB</code> 存储引擎而言，其是通过<code>LSN（Log Sequence Number）</code>来标记版本的， <code>LSN</code> 是8字节的数字， 每个数据页都有 <code>LSN</code></li>
<li>重做日志和 <code>Checkpoint</code> 都会 <code>LSN</code>, 可以通过命令 <code>show engine innodb status\G</code> 查看 <code>innodb</code> 引擎信息，其中就包含 <code>LSN</code>， 比如如下所示<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Log</span> <span class="keyword">sequence</span> number <span class="number">92561351052</span> </span><br><span class="line"><span class="keyword">Log</span> flushed up <span class="keyword">to</span> <span class="number">92561351052</span> </span><br><span class="line">Last <span class="keyword">checkpoint</span> at <span class="number">92561351052</span></span><br></pre></td></tr></table></figure></li>
<li>在 <code>InnoDB</code> 存储引擎内部，有两种 <code>Checkpoint</code></li>
<li><strong>Sharp Checkpoint</strong>: 发生在数据库关闭时，需要将所有的脏页都刷新会磁盘，对应的是 <code>innodb_fast_shutdown=1</code>, 也是默认的行为</li>
<li><strong>Fuzzy Checkpoint</strong>： <code>InnoDB</code> 存储引擎内部使用 <code>Fuzzy Checkpoint</code>进行页的刷新，即只刷新一部分脏页，而不是刷新所有的脏页回磁盘</li>
</ol>
<h4 id="Fuzzy-Checkpoint-刷盘时机"><a href="#Fuzzy-Checkpoint-刷盘时机" class="headerlink" title="Fuzzy Checkpoint 刷盘时机"></a>Fuzzy Checkpoint 刷盘时机</h4><ol>
<li>Master Thread Checkpoint</li>
<li>差不多以每秒或每十秒的速度从缓冲池的脏页列表中刷新一定比例的页回磁盘。这个过程是异步的</li>
<li>FLUSH_LRU_LIST Checkpoint</li>
<li><code>InnoDB</code> 存储引擎需要保证 <code>LRU</code> 列表中需要有差不多100个空闲页可供使用, 具体多少个可以通过参数 <code>innodb_lru_scan_depth</code> 控制</li>
<li>当发现 <code>LRU</code> 列表中没有那么多空闲页时，就需要将 <code>LRU</code> 尾端的页移除，如果这些页有脏页，就需要进行 <code>checkpoint</code></li>
<li>Async&#x2F;Sync Flush Checkpoint</li>
<li>当重做日志不可用时，需要从脏页中强制将一些页进行刷盘</li>
<li>Dirty Page too much Checkpoint</li>
<li>当脏页的数量太多时，为了保证缓冲区仍有空间可用，也会强制将一些脏页刷盘， 可以通过参数 <code>innodb_max_dirty_pages_pct</code> 控制脏页占比，默认是 <code>75%</code>， 即当缓冲池中脏页数量占到了 <code>75%</code> 会强制 <code>checkpoint</code></li>
</ol>
<h2 id="Master-线程"><a href="#Master-线程" class="headerlink" title="Master 线程"></a>Master 线程</h2><ol>
<li><p><code>Master Thread</code> 具有最高的线程优先级别。内部由多个循环（<code>loop</code>）组成</p>
</li>
<li><p><code>Master Thread</code> 会根据数据库运行的状态在 <code>loop</code>、<code>background loop</code>、<code>flush loop</code>和<code>suspend loop</code>中进行切换</p>
</li>
</ol>
<p><strong>主循环（loop）</strong></p>
<ul>
<li>每 <code>1s</code> 的操作<ol>
<li>日志缓冲刷新到磁盘，即使这个事务还没有提（总是）</li>
<li>合并插入缓冲（可能）</li>
<li>至多刷新100个 <code>InnoDB</code> 的缓冲池中的脏页磁盘（可能）</li>
<li>如果当前没有用户活动，则切换到<code>background loop</code>（可能）</li>
</ol>
</li>
<li>每 <code>10s</code> 的操作<ol>
<li>刷新100个脏页到磁盘（可能）</li>
<li>合并至多5个插入缓冲（总是）</li>
<li>将日志缓冲刷新到磁盘（总是）</li>
<li>删除无用的 <code>Undo</code> 页（总是）</li>
</ol>
</li>
</ul>
<p><strong>后台循环（backgroup loop）</strong></p>
<p>若当前没有用户活动（数据库空闲时）或者数据库关闭（<code>shutdown</code>），就会切换到这个循环, 会存在以下操作</p>
<ul>
<li>删除无用的 <code>Undo</code> 页（总是）</li>
<li>合并20个插入缓冲（总是）</li>
<li>跳回到主循环（总是）</li>
<li>不断刷新100个页直到符合条件（可能，跳转到<code>flush loop</code>中完成）</li>
</ul>
<p><strong>刷新循环（flush loop）</strong> </p>
<p>主要是将缓冲区脏页数据刷新到磁盘</p>
<p><strong>暂停循环（suspend loop）</strong><br>若 <code>flush loop</code> 中也没有什么事情可以做了，<code>InnoDB</code>存储引擎会切换到<code>suspend loop</code>，将<code>Master Thread</code>挂起，等待事件的发生</p>
<p>在 <code>InnoDB1.2.x</code>版本中从 <code>Master Thread</code> 线程分离到一个单独的<code> Page Cleaner Thread</code>，从而减轻了<code>Master Thread</code>的工作，同时进一步提高了系统的并发性</p>
<h2 id="插入缓冲-Insert-Buffer"><a href="#插入缓冲-Insert-Buffer" class="headerlink" title="插入缓冲 Insert Buffer"></a>插入缓冲 Insert Buffer</h2><h3 id="Insert-Buffer-在哪里"><a href="#Insert-Buffer-在哪里" class="headerlink" title="Insert Buffer 在哪里"></a>Insert Buffer 在哪里</h3><p><code>Insert Buffer</code>和数据页一样，也是物理页的一个组成部分（缓冲区中也有 <code>Insert Buffer</code>, 含义不同）</p>
<h3 id="为什么要有-Insert-Buffer"><a href="#为什么要有-Insert-Buffer" class="headerlink" title="为什么要有 Insert Buffer"></a>为什么要有 Insert Buffer</h3><ol>
<li>每个表都有一个主键，如果是自增的那么数据是按照主键顺序存储的，这种情况下数据新增是很快的，因为是有顺序的</li>
<li>如果主键不是自增的，或者其他非聚集索引（先理解成非主键索引）都可能不是自增的，在这种情况下，数据页的存放还是按主键进行顺序存放的，但是对于非聚集索引叶子节点的插入不再是顺序的了，这时就需要离散地访问非聚集索引页，由于随机读取的存在而导致了插入操作性能下降</li>
<li><code>Insert Buffer</code> 的作用就是对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否在缓冲池中，若在，则直接插入；若不在，则先放入到一个<code>Insert Buffer</code>对象中， 然后再以一定的频率和情况进行<code>Insert Buffer</code>和辅助索引页子节点的<code>merge</code>（合并）操作，这时通常能将多个插入合并到一个操作中（因为在一个索引页中），这就大大提高了对于非聚集索引插入的性能</li>
</ol>
<h3 id="使用-Insert-Buffer-需要满足的条件"><a href="#使用-Insert-Buffer-需要满足的条件" class="headerlink" title="使用 Insert Buffer 需要满足的条件"></a>使用 Insert Buffer 需要满足的条件</h3><ol>
<li>索引是辅助索引</li>
<li>索引不是唯一的： 如果索引唯一，就还需要查找判断操作，此时使用 <code>Insert Buffer</code> 就不能提升性能了</li>
</ol>
<p>所以 <code>Insert Buffer</code> 主要是为了提高索引页数据插入的性能</p>
]]></content>
      <categories>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB存储引擎之MVCC详解</title>
    <url>/2023/7aa9bac70e9b/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>


<h2 id="mysql8-查看事务的隔离级别"><a href="#mysql8-查看事务的隔离级别" class="headerlink" title="mysql8 查看事务的隔离级别"></a>mysql8 查看事务的隔离级别</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前会话的隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="comment">-- 查看全局的隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.transaction_isolation;</span><br></pre></td></tr></table></figure>

<h2 id="undo-log-版本链"><a href="#undo-log-版本链" class="headerlink" title="undo log 版本链"></a>undo log 版本链</h2><ul>
<li>每一条数据都有两个隐藏字段<ul>
<li><code>trx_id</code>: 事务id</li>
<li><code>roll_pointer</code>: 指向了更新这个事务之前的 <code>undo log</code></li>
</ul>
</li>
</ul>
<h3 id="trx-id-的作用"><a href="#trx-id-的作用" class="headerlink" title="trx_id 的作用"></a>trx_id 的作用</h3><p>在 <code>InnoDB</code> 存储引擎中，<code>trx_id</code> 是一个用于<strong>标识事务的唯一标识符</strong>。<code>trx_id</code> 的生成时机是在事务开始时生成的</p>
<p>下面举例说明，比如新增一条数据，事务 id 为10，因为之前没有数据，所以 <code>roll_pointer</code> 指向 <code>null</code></p>
<pre class="mermaid">graph LR
    subgraph A["事务A"]
        direction LR
        A1["值A"]
        A2["trx_id=10"]
        A3["roll_pointer"]
        A1~~~A2~~~A3
    end</pre>

<p>接下来另外一个事务启动，更新同一条数据，将值从 A 改为 B, 此时对应数据状态为</p>
<pre class="mermaid">graph LR
    subgraph A["事务A"]
        direction LR
        A1["值A"]
        A2["trx_id=10"]
        A3["roll_pointer"]
        A1~~~A2~~~A3
    end
    subgraph B["事务B"]
        direction LR
        B1["值B"]
        B2["trx_id=15"]
        B3["roll_pointer"]
        B1~~~B2~~~B3
    end
    B3-.->A3
    style B3 fill:#8ff600
    style A3 fill:#8ff600</pre>

<p>后启动的事务的 <code>roll_pointer</code> 指向了前面的数据</p>
<p>当还有其他事务来修改这条数据时，对应的数据状态为</p>
<pre class="mermaid">graph LR
    subgraph A["事务A"]
        direction LR
        A1["值A"]
        A2["trx_id=10"]
        A3["roll_pointer"]
        A1~~~A2~~~A3
    end
    subgraph B["事务B"]
        direction LR
        B1["值B"]
        B2["trx_id=15"]
        B3["roll_pointer"]
        B1~~~B2~~~B3
    end
    subgraph C["事务C"]
        direction LR
        C1["值C"]
        C2["trx_id=20"]
        C3["roll_pointer"]
        C1~~~C2~~~C3
    end
    C3-.->B3-.->A3
    style B3 fill:#8ff600
    style A3 fill:#8ff600
    style C3 fill:#8ff600</pre>

<p>这就是 <code>undo log</code> 版本链，也是 <code>MVCC</code> 的实现基础， 另外一个实现基础是 <code>ReadView</code> 机制</p>
<h2 id="ReadView-机制"><a href="#ReadView-机制" class="headerlink" title="ReadView 机制"></a>ReadView 机制</h2><p>当执行一个事务的时候，就会生成一个 <code>ReadView</code>， <code>ReadView</code> 中比较重要的有四个字段</p>
<ol>
<li><code>m_ids</code>: 当前事务开始时，还有哪些事务也正在执行（即还提交的事务）</li>
<li><code>min_trx_id</code>: <code>m_ids</code> 中最小的值</li>
<li><code>max_trx_id</code>: <code>Mysql</code> 下一个要生成的事务id</li>
<li><code>creator_trx_id</code>: 当前事务的id</li>
</ol>
<h3 id="ReadView-生成时机"><a href="#ReadView-生成时机" class="headerlink" title="ReadView 生成时机"></a>ReadView 生成时机</h3><p>前面有提到 <code>trx_id</code> 的生成时机是在事务开始时生成的，而 <code>ReadView</code> 并不是在事务开始时生成的，而是在事务中执行读操作操作时才会生成 <code>ReadView</code></p>
<p>这也是为什么在当前事务的 <code>ReadView</code> 中可能会存在事务id 比当前事务id 大的事务存在</p>
<h2 id="RC（Read-Commited）隔离级别实现原理"><a href="#RC（Read-Commited）隔离级别实现原理" class="headerlink" title="RC（Read Commited）隔离级别实现原理"></a>RC（Read Commited）隔离级别实现原理</h2><p><code>RC</code> 隔离级别指的是一个事务中可以读取到其他事务提交的数据，其他事务未提交数据无法读取到</p>
<p>下面举例说明如何基于 <code>undo log</code> 和 <code>ReadView</code> 机制实现 <code>RC</code> 隔离级别</p>
<p>db 中某条数据的初始值 <code>trx_id=10</code><br>在某个时刻有事务 A 和 事务 B 同时操作这条数据，事务A 是查询，事务B是修改，我们的观察角度是事务A</p>
<p><strong>事务B修改了数据但未提交</strong><br>因为事务B 修改了数据，此时 <code>undo log</code> 版本链如下所示</p>
<pre class="mermaid">graph LR
    subgraph A["初始数据"]
        direction LR
        A1["初始值"]
        A2["trx_id=10"]
        A3["roll_pointer"]
        A1~~~A2~~~A3
    end
    subgraph B["事务B"]
        direction LR
        B1["值B"]
        B2["trx_id=15"]
        B3["roll_pointer"]
        B1~~~B2~~~B3
    end
    B3-.->A3
    style B3 fill:#8ff600
    style A3 fill:#8ff600</pre>

<p><strong>事务A读取数据</strong><br>事务A 执行 <code>select</code> 操作时，就会生成 <code>ReadView</code>， 此时 <code>ReadView</code> 涉及到的值如下所示<br>事务A(trx_id&#x3D;15), 事务B(trx_id&#x3D;20)<br><code>m_ids</code>: [15, 20]<br><code>min_trx_id</code>: 15<br><code>max_trx_id</code>: 21<br><code>creator_trx_id</code>: 15</p>
<p>读取到数据B, 这条数据的 <code>trx_id=20</code>, <code>trx_id</code> 比自己的事务id大，但是<strong>在</strong> <code>m_ids</code> 中，说明这条数据是和事务A 差不多同时启动的事务操作的，并且还没有提交，那么事务A 就不能进行读取，需要顺着 <code>undo log</code> 版本链继续寻找，<code>undo log</code> 的下一条数据的 <code>trx_id=10</code>, 比 <code>creator_trx_id=15</code> 小，说明是在事务A 开启之前就已经提交的，可以读取，所以读取到的是 <strong>初始值</strong> 而不是 <strong>数据B</strong></p>
<p><strong>事务B提交数据后事务A再读取</strong><br>对于 <code>RC</code> 隔离级别，是每次读取数据时都会生成 <code>ReadView</code>， 所以事务B 提交数据后，事务A 再读取时，就会生成一个新的 <code>ReadView</code>，此时 <code>ReadView</code> 涉及到的值如下所示<br>事务A(trx_id&#x3D;15)<br><code>m_ids</code>: [15]<br><code>min_trx_id</code>: 15<br><code>max_trx_id</code>: 21<br><code>creator_trx_id</code>: 15</p>
<p>读取到数据B, 这条数据的 <code>trx_id=20</code>, <code>trx_id</code> 比自己的事务id大，但是<strong>不在</strong> <code>m_ids</code> 中，说明这条数据是和事务A 差不多同时启动的事务操作的，并且已经提交，那么事务A 就可以进行读取，读取到的就是 <strong>数据B</strong></p>
<p><strong>总结：RC 隔离级别可以实现读取到其他事务提交的数据的核心是在当前事务中每次执行 <code>select</code> 中都会生成一个新的 <code>ReadView</code></strong></p>
<h2 id="RR（Repeatable-Read）隔离级别实现原理"><a href="#RR（Repeatable-Read）隔离级别实现原理" class="headerlink" title="RR（Repeatable Read）隔离级别实现原理"></a>RR（Repeatable Read）隔离级别实现原理</h2><p>在 <code>Mysql</code> 中 <code>RR</code>  隔离级别可以防止 幻读，不可重复读和幻读</p>
<p><code>RR</code> 和 <code>RC</code> 隔离级别实现上的区别是： <code>RR</code> 隔离级别在一个事务中只会在第一次查询时生成 <code>ReadView</code>，之后的查询只会使用当前事务的 <code>ReadView</code></p>
<p>下面举例说明如何基于 <code>undo log</code> 和 <code>ReadView</code> 机制实现 <code>RR</code> 隔离级别, 依然使用 <code>RC</code> 隔离级别的例子</p>
<p>db 中某条数据的初始值 <code>trx_id=10</code><br>在某个时刻有事务A 和 事务B 同时操作这条数据，事务A 是查询，事务B是修改，我们的观察角度是事务A</p>
<p><strong>事务B修改了数据但未提交</strong><br>因为事务 B 修改了数据，此时 <code>undo log</code> 版本链如下所示</p>
<pre class="mermaid">graph LR
    subgraph A["初始数据"]
        direction LR
        A1["初始值"]
        A2["trx_id=10"]
        A3["roll_pointer"]
        A1~~~A2~~~A3
    end
    subgraph B["事务B"]
        direction LR
        B1["值B"]
        B2["trx_id=15"]
        B3["roll_pointer"]
        B1~~~B2~~~B3
    end
    B3-.->A3
    style B3 fill:#8ff600
    style A3 fill:#8ff600</pre>

<p><strong>事务A读取数据</strong><br>事务 A 执行 <code>select</code> 操作时，就会生成 <code>ReadView</code>， 此时 <code>ReadView</code> 涉及到的值如下所示<br>事务A(trx_id&#x3D;15), 事务B(trx_id&#x3D;20)<br><code>m_ids</code>: [15, 20]<br><code>min_trx_id</code>: 15<br><code>max_trx_id</code>: 21<br><code>creator_trx_id</code>: 15</p>
<p>读取到数据B, 这条数据的 <code>trx_id=20</code>, <code>trx_id</code> 比自己的事务id大，但是<strong>在</strong> <code>m_ids</code> 中，说明这条数据是和事务 A 差不多同时启动的事务操作的，并且还没有提交，那么事务 A 就不能进行读取，需要顺着 <code>undo log</code> 版本链继续寻找，<code>undo log</code> 的下一条数据的 <code>trx_id=10</code>, 比 <code>creator_trx_id=15</code> 小，说明是在事务 A 开启之前就已经提交的，可以读取，所以读取到的是 <strong>初始值</strong> 而不是 <strong>数据B</strong></p>
<p><strong>事务B提交数据后事务A再读取</strong><br>对于 <code>RR</code> 隔离级别，只会在第一次 <code>select</code> 时生成 <code>ReadView</code>， 所以事务 B 提交数据后，事务 A 再读取时，使用的还是之前那个 <code>ReadView</code>，此时 <code>ReadView</code> 涉及到的值如下所示<br>事务A(trx_id&#x3D;15)<br><code>m_ids</code>: [15, 20]<br><code>min_trx_id</code>: 15<br><code>max_trx_id</code>: 21<br><code>creator_trx_id</code>: 15</p>
<p>读取到数据B, 这条数据的 <code>trx_id=20</code>, <code>trx_id</code> 比自己的事务id大，并且在 <code>min_trx_id</code> 和 <code>max_trx_id</code> 之间，同时还在 <code>m_ids</code> 中，说明这条数据是和事务 A 差不多同时启动的事务操作的，事务 A 不可以读取，所以顺着 <code>undo log</code> 版本链继续往前找，找到 <code>trx_id=10</code>, 说明是在事务 A 开启之前就已经提交的，可以读取，所以读取到的是 <strong>初始值</strong></p>
<h3 id="为什么-Mysql-的-RR-隔离级别可以防止幻读"><a href="#为什么-Mysql-的-RR-隔离级别可以防止幻读" class="headerlink" title="为什么 Mysql 的 RR 隔离级别可以防止幻读"></a>为什么 Mysql 的 RR 隔离级别可以防止幻读</h3><p>在 <ol><li><a href="/2023/ba87d5c56893/index.html" title="Mysql事务隔离级别">Mysql事务隔离级别</a></li></ol> 中有提到在 <code>Sql</code> 标准中，<code>RR</code> 隔离级别下不能防止幻读，但是在 <code>Mysql</code> 中，<code>RR</code> 隔离级别下可以访问幻读，下面举例说明</p>
<p>比如下面的 <code>sql</code> 语句可以查询出两条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>数据初始值为</p>
<table>
<thead>
<tr>
<th>trx_id（隐藏字段）</th>
<th>id</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>15</td>
<td>12</td>
</tr>
</tbody></table>
<p>现在有事务 A， B 同时操作，事务 A 是查询，事务 B 是新增数据</p>
<p><strong>事务A 第一次查询</strong><br>此时假设事务 A 的 <code>ReadView</code> 如下<br>事务A(trx_id&#x3D;16), 事务B(trx_id&#x3D;17)<br><code>m_ids</code>: [16, 17]<br><code>min_trx_id</code>: 16<br><code>max_trx_id</code>: 18<br><code>creator_trx_id</code>: 16</p>
<p>因为事务 B 还没有真正插入数据，所以事务 A 查询的就是上面展示的两条数据</p>
<p><strong>事务B 新增数据并提交</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span>(<span class="number">13</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>此时数据库中有三条数据</p>
<table>
<thead>
<tr>
<th>trx_id（隐藏字段）</th>
<th>id</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>15</td>
<td>12</td>
</tr>
<tr>
<td>17</td>
<td>13</td>
</tr>
</tbody></table>
<p><strong>事务A 第二次查询</strong><br>此时事务 A 的 <code>ReadVew</code> 还是和之前一样，并不会改变<br><code>m_ids</code>: [16, 17]<br><code>min_trx_id</code>: 16<br><code>max_trx_id</code>: 18<br><code>creator_trx_id</code>: 16<br>当执行下面的 <code>sql</code> 时可以查询出 3 条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>但是其中有一条数据的 <code>trx_id=17</code>, 17 在当前 <code>ReadView</code> 的 <code>min_trx_id</code> 和 <code>max_trx_id</code> 之间，说明是在事务 A 开启之后才新增的数据，这条数据就不能展示出来</p>
<p><strong>总结：<code>RR</code> 隔离级别在一个事务中只会在第一次查询时生成 <code>ReadView</code>，之后的查询只会使用当前事务的 <code>ReadView</code></strong></p>
]]></content>
      <categories>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql事务隔离级别</title>
    <url>/2023/ba87d5c56893/index.html</url>
    <content><![CDATA[<h2 id="事务的四个特点"><a href="#事务的四个特点" class="headerlink" title="事务的四个特点"></a>事务的四个特点</h2><ol>
<li>原子性（Atomicity）：事务是一个原子操作单元，要么全部执行，要么全部不执行，不会出现部分执行的情况。</li>
<li>一致性（Consistency）：事务执行前后，数据库的完整性约束没有被破坏，即数据库从一个一致性状态转换到另一个一致性状态。</li>
<li>隔离性（Isolation）：多个事务并发执行时，每个事务的操作应该与其他事务的操作相互隔离，不会相互干扰。</li>
<li>持久性（Durability）：一旦事务提交，其所做的修改会永久保存在数据库中，即使系统发生故障也不会丢失。</li>
</ol>
<h2 id="并发读写数据带来的问题"><a href="#并发读写数据带来的问题" class="headerlink" title="并发读写数据带来的问题"></a>并发读写数据带来的问题</h2><ol>
<li>脏写</li>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ol>
<p><strong>脏写</strong></p>
<ol>
<li>事务 A，B 同时开始准备更新一条数据</li>
<li>事务 A 更新</li>
<li>事务 B 更新</li>
<li>事务 A 回滚，将事务 B 更新的数据也回滚了</li>
</ol>
<p>对于事务 B 来说，自己更新了，但是看到的是没有更新的数据，这就是脏写。</p>
<p><strong>脏读</strong></p>
<ol>
<li>事务 A，B 同时开启准备处理数据</li>
<li>事务 B 更新了数据，但是没有提交</li>
<li>事务 A 拿到事务 B 更新的数据</li>
<li>事务 B 回滚</li>
<li>事务 A 再次查询，发现数据变了</li>
</ol>
<p>对于事务 A 来说，因为读取到了事务 B 还没有提交的数据，导致自己先后两次读取的结果不同，这就是脏读。</p>
<p><strong>不可重复读</strong></p>
<ol>
<li>事务 A，B 同时开始准备处理数据</li>
<li>事务 A 读取数据 A（事务 A 一直开启着）</li>
<li>事务 B 将数据 A 更新成数据 B</li>
<li>事务 A 再次读取，结果变成了 数据B, 在同一个事务中，事务 A 两次读取的结果不一致，这就是不可重复读</li>
</ol>
<p>总结：一个事务读取到了另外一个事务中<strong>提交</strong>的 <code>update</code> 的数据</p>
<p><strong>幻读</strong><br>指一个事务读取到了另外一个事务中<strong>提交</strong>的 <code>insert</code> 的数据</p>
<h2 id="Sql-隔离级别"><a href="#Sql-隔离级别" class="headerlink" title="Sql 隔离级别"></a>Sql 隔离级别</h2><p>针对以上在多事务并发时可能出现的问题，在 <code>Sql</code> 标准中规定了几种隔离级别，用来解决这些问题</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（Read uncommitted）</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>读已提交（Read committed）</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>串行化</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody></table>
<p>在 <code>Sql</code> 标准的隔离级别中，<code>RR</code> 隔离级别是用来保证同一个事务中对同一行数据的多次查询，不会读取到不一样的数据，但是针对范围查询来说，如果在查询范围内新增了数据并且还提交了，依然是可以被读取到的，所以 <code>RR</code> 隔离级别还是可能发生 <strong>幻读</strong></p>
<p>在 <code>Mysql</code> 的 <code>RR</code> 隔离级别下不会发生 <strong>幻读</strong>，具体原因可以参考</p>
<ol><li><a href="/2023/7aa9bac70e9b/index.html" title="InnoDB存储引擎之MVCC详解">InnoDB存储引擎之MVCC详解</a></li></ol>

]]></content>
      <categories>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql整体架构</title>
    <url>/2023/fd974035a1b5/index.html</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<pre class="mermaid">flowchart LR
    K1["客户端连接"]
    K2["客户端连接"]
    K1 & K2--1--->A
    subgraph A["Mysql服务器"]
        direction LR
        subgraph A1["连接池"]
            direction TB
            A11[连接]
            A12[连接]
            A13[连接]
            A11~~~A12~~~A13
        end
        subgraph A3["线程"]
        end
        
        A1--"2(获取sql语句)"-->A3

        subgraph A2["sql相关处理"]
            direction TB
            A23["3(sql接口)"]
            A24["4(sql解析器)"]
            A25["5(查询优化器)"]
            A26["6(执行器)"]
            A23-->A24-->A25-->A26
        end

        A3-->A2
        subgraph A4["7(存储引擎)"]
        end
        A2-->A4
    end</pre>
<p>下面按照上图中标的数字的顺序进行梳理</p>
<h2 id="1-连接池"><a href="#1-连接池" class="headerlink" title="1 连接池"></a>1 连接池</h2><ol>
<li>我们平时所说的连接池一般都是指应用端的连接池，比如一个 <code>Java</code> 应用连接数据库时，<code>Java</code> 应用会有一个连接池去连接数据库</li>
<li><code>Mysql</code> 服务器自身也是有一个连接池来和客户端进行连接，这个连接池管理了各种系统跟这台数据库服务器建立的所有连接</li>
</ol>
<h2 id="2-线程处理连接"><a href="#2-线程处理连接" class="headerlink" title="2 线程处理连接"></a>2 线程处理连接</h2><p>对于网络连接一般都是需要单独的线程进行处理，这个线程来监听请求以及获取请求数据</p>
<h2 id="3-sql接口"><a href="#3-sql接口" class="headerlink" title="3 sql接口"></a>3 sql接口</h2><ol>
<li><code>MySQL</code> 的工作线程接收到<code>SQL</code>语句之后，就会转交给<code>SQL</code>接口去执行</li>
<li>这种设计和 <code>java</code> 类似，也是面向接口编程，外部使用只需要和接口打交道，屏蔽了内部复杂的实现逻辑</li>
</ol>
<h2 id="4-sql解析器"><a href="#4-sql解析器" class="headerlink" title="4 sql解析器"></a>4 sql解析器</h2><ol>
<li>查询解析器<code>(Parser)</code>就是负责对<code>SQL</code>语句进行解析, 这里的解析的含义其实就是按照 <code>SQL</code> 语法对 <code>SQL</code> 进行拆解， 比如下面的一个 <code>SQL</code></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>上面这个 <code>SQL</code> 语句只是一个字符串而已，但是通过 <strong>查询解析器</strong> 后，就可以知道 <code>user</code> 对应的是表，<code>id</code> 对应的是表里面的一个字段</p>
<h2 id="5-查询优化器"><a href="#5-查询优化器" class="headerlink" title="5 查询优化器"></a>5 查询优化器</h2><ol>
<li>查询优化器的作用是 <strong>选择最优的查询路径</strong></li>
<li>一条 <code>SQL</code> 语句可以有多个方式达到最终的效果，还是已 <code>select * from user where id = 1;</code> 这个 <code>SQL</code> 语句举例<ol>
<li>第一种方式是可以先获取到所有数据，然后根据 <code>id=1</code> 这个条件去过滤，再将结果返回</li>
<li>第二种方式也可以是先拿到 <code>id=1</code> 这个条件，然后直接定位 <code>id=1</code> 的数据，再将结果返回</li>
</ol>
</li>
</ol>
<h2 id="6-执行器"><a href="#6-执行器" class="headerlink" title="6 执行器"></a>6 执行器</h2><ol>
<li>执行器是根据执行计划调用存储引擎的接口</li>
<li>执行器会根据优化器选择的执行方案，按照一定的顺序去调用存储引擎的接口，把<code>SQL</code>语句的逻辑给执行</li>
</ol>
<h2 id="7-存储引擎"><a href="#7-存储引擎" class="headerlink" title="7 存储引擎"></a>7 存储引擎</h2><p>存储引擎其实就是真正执行<code>SQL</code>语句的，他会按照一定的步骤去查询内存缓存数据，更新磁盘数据，查询磁盘数据等操作</p>
]]></content>
      <categories>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres将毫秒值转换成字符串</title>
    <url>/2023/3a8e444a3e04/index.html</url>
    <content><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>毫秒值类型:  <code>numeric(13)</code></p>
<p>字段名称: <code>check_time</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> to_char(to_timestamp(check_time <span class="operator">/</span> <span class="number">1000</span>) <span class="keyword">AT</span> <span class="type">TIME</span> ZONE <span class="string">&#x27;Asia/Shanghai&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS.MS&#x27;</span>) <span class="keyword">AS</span> check_time <span class="keyword">from</span> table_neme;</span><br></pre></td></tr></table></figure>

<h2 id="使用到的函数"><a href="#使用到的函数" class="headerlink" title="使用到的函数"></a>使用到的函数</h2><p><a href="http://www.postgres.cn/docs/12/functions-formatting.html">postgres12版本的日期函数参考</a></p>
<ol>
<li><code>to_timestamp</code>： 将 <strong>秒</strong> 值转换成 <code>timestamp</code> 类型， 所以如果是毫秒值的话还需要 <code>毫秒值/1000</code><ol>
<li><code>AT TIME ZONE &#39;Asia/Shanghai</code> 代表将返回的时间戳指定时区</li>
</ol>
</li>
<li><code>to_char</code> 将 <code>timestamp</code> 类型转换成字符串， 其中 <code>YYYY-MM-DD HH24:MI:SS.MS</code> 代表格式化的字符串<ol>
<li><code>HH24</code> 代表 24 小时制</li>
<li><code>MI</code> 表示分钟</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>存储</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>WindTerm功能设置</title>
    <url>/2023/0ff9c6825506/index.html</url>
    <content><![CDATA[<h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><p><a href="https://github.com/kingToolbox/WindTerm/issues/267">参考github</a></p>
<h2 id="去除锁屏"><a href="#去除锁屏" class="headerlink" title="去除锁屏"></a>去除锁屏</h2><ol>
<li>找到配置文件，可以在 <strong>会话-&gt;首选项-&gt;配置文件</strong> 中查看配置文件的位置</li>
<li>找到 <code>application.lockScreenTimeout</code>， 将值改成 0</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
        <category>other</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>maven编译跳过test</title>
    <url>/2023/5614a2f5fdca/index.html</url>
    <content><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean install -DskipTests</span><br></pre></td></tr></table></figure>

<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">mvn clean <span class="keyword">install</span> -Dmaven.<span class="keyword">test</span>.skip=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>如果在 <code>window</code> 中使用 <code>powershell</code> 或在 <code>idea</code> 的终端下使用这种方式可能会提示 <code>Unknown lifecycle phase &quot;.test.skip=true&quot;</code>，此时需要增加引号，比如</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">mvn clean <span class="keyword">install</span> &#x27;-Dmaven.<span class="keyword">test</span>.skip=<span class="keyword">true</span>&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>utools自动化脚本插件</title>
    <url>/2023/d899f5ff1973/index.html</url>
    <content><![CDATA[<h2 id="utools-使用自动化脚本打开本地程序"><a href="#utools-使用自动化脚本打开本地程序" class="headerlink" title="utools 使用自动化脚本打开本地程序"></a>utools 使用自动化脚本打开本地程序</h2><ol>
<li>比如 typora 可以打开之前的文件和目录，但是目录只能到文件的上一个层级，如果源目录包含很多子目录，重新打开时可能不是我们想要的结果，那可以在命令行执行 <code>typora folder</code>, eg: <code>typora E:\\blog</code> <span id="more"></span></li>
</ol>
<blockquote>
<p>在命令行执行 typora 命令需要先配置 typora 的环境变量</p>
</blockquote>
<ol>
<li>更简便的方式是直接使用 utools 的自动化脚本这个插件，新增一个自己的插件脚本，内容如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 以下是关键代码，调用 typora 来执行目标文件</span></span><br><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;typora&#x27;</span>, [<span class="string">&#x27;E:/code/learnerguo&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    process.<span class="title function_">exit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后自定义关键字，后续当打开 utools 输入对应关键字就可以打开 typora 的目录</p>
<h2 id="使用自动化脚本获取当天起始时间"><a href="#使用自动化脚本获取当天起始时间" class="headerlink" title="使用自动化脚本获取当天起始时间"></a>使用自动化脚本获取当天起始时间</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 设置当前时间的小时、分钟、秒和毫秒为0，即将时间设置为当天的开始时间</span></span><br><span class="line">now.<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取当天开始时间点的毫秒数</span></span><br><span class="line"><span class="keyword">const</span> startTime = now.<span class="title function_">getTime</span>();</span><br><span class="line">utools.<span class="title function_">copyText</span>(<span class="string">&quot;&quot;</span>+startTime);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;开始时间已复制&#x27;</span> + startTime);</span><br><span class="line">utools.<span class="title function_">hideMainWindow</span>();</span><br><span class="line">process.<span class="title function_">exit</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>utools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>utools</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode相关设置</title>
    <url>/2023/6b613d963af3/index.html</url>
    <content><![CDATA[<h2 id="vscode-中-markdown-的-snippets-的设置"><a href="#vscode-中-markdown-的-snippets-的设置" class="headerlink" title="vscode 中 markdown 的 snippets 的设置"></a>vscode 中 markdown 的 snippets 的设置</h2><h3 id="snippets-的设置"><a href="#snippets-的设置" class="headerlink" title="snippets 的设置"></a>snippets 的设置</h3><ol>
<li>打开 ctrl+shift+p , 搜索 <code>configure user snippets</code> </li>
<li>选择 markdown.json, 会出现如下内容</li>
</ol>
<span id="more"></span>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>可以根据示例文件进行修改，如下图所示：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;markdown code graph&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;codeblock&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;&lt;pre class=&quot;</span>mermaid<span class="string">&quot;&gt;<span class="variable">$0</span>&quot;</span>,</span><br><span class="line">		<span class="string">&quot;```&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;description&quot;</span>: <span class="string">&quot;insert markdown code graph&quot;</span></span><br><span class="line">&#125;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">上面示例的意思是 当输入 codeblock 时就会出现 mermaid 代码块， <span class="variable">$0</span> 是光标出现的地方</span><br><span class="line"></span><br><span class="line"><span class="comment">### markdown snippets 不生效的解决方式</span></span><br><span class="line">使用上面的步骤设置完 snippets 之后，在 markdown 文档中编写关键字，但是并没有生效，还需要在  settings.json 中（可以输入 ctrl+<span class="built_in">shift</span>+p, 搜索 settings， 选择 Open User Settings(JSON)）, 然后填写下面的内容</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="string">&quot;[markdown]&quot;</span>:&#123;</span><br><span class="line">	<span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">	<span class="string">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;other&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">		<span class="string">&quot;comments&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">		<span class="string">&quot;strings&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>添加上述内容后就可以生效了</p>
<h2 id="vscode-设置白天黑夜自动切换主题"><a href="#vscode-设置白天黑夜自动切换主题" class="headerlink" title="vscode 设置白天黑夜自动切换主题"></a>vscode 设置白天黑夜自动切换主题</h2><ol>
<li>vscode 可以根据系统设置的 <code>light</code> 或 <code>dark</code> 主题来进行切换</li>
<li>系统自动切换主题软件可以在 <code>store</code> 中安装 <code>Auto Dark Mode</code> 这个软件并进行设置</li>
<li><code>window</code> 系统设置完成之后可以在 <code>vscode</code> 的 <code>user setting</code> 中添加如下内容, 第一个配置是开启自动切换，后面的配置是设置的 <code>light</code> 和 <code>dark</code> 主题的名称</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;window.autoDetectColorScheme&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.preferredLightColorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Atom One Light&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.preferredDarkColorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default Dark Modern&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode设置markdown图片默认路径</title>
    <url>/2023/5b4d784e18c2/index.html</url>
    <content><![CDATA[<p><code>vscode</code> 在 <code>markdown</code> 文档中直接复制图片时是放在当前目录，如果需要修改可以按照下面方式设置</p>
<span id="more"></span>
<ol>
<li>输入快捷键 <code>ctrl+,</code> 可以快速打开设置</li>
<li>搜索 <code>markdown.copy: Destination</code></li>
</ol>
<p><img src="/2023/5b4d784e18c2/index/1700033681108.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>tools</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>docker中运行nacos</title>
    <url>/2023/f67204379054/index.html</url>
    <content><![CDATA[<p>使用的系统为 <code>ubuntu22.04</code></p>
<ol><li><a href="/2023/71e6b223e45b/index.html" title="ubuntu22.04安装docker-compose">ubuntu22.04安装docker-compose</a></li></ol>

<p>参考 <a href="https://nacos.io/zh-cn/docs/quick-start-docker.html">nacos官方文档之使用docker启动</a></p>
<p>这里使用的是 <code>mysql8</code> 单机版启动</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 克隆项目 --&gt;</span></span><br><span class="line">git clone https://github.com/nacos-group/nacos-docker.git</span><br><span class="line">cd nacos-docker</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以后台模式启动 nacos 服务 --&gt;</span></span><br><span class="line">docker-compose -f example/standalone-mysql-8.yaml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查看启动的docker服务 --&gt;</span></span><br><span class="line">docker container ps</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关闭服务 --&gt;</span></span><br><span class="line">docker-compose -f example/standalone-mysql-8.yaml down</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启动后，访问 nacos  --&gt;</span></span><br><span class="line">http://localhost:8848/nacos/index.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云原生</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置阿里云加速镜像</title>
    <url>/2023/2b35420a425c/index.html</url>
    <content><![CDATA[<ol>
<li>访问<a href="https://cr.console.aliyun.com/">阿里云镜像控制台</a>， 找到镜像加速链接</li>
</ol>
<p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311272213645.webp" alt="加速镜像"></p>
<ol start="2">
<li>在文档的下方就有不同环境配置的代码，下面是 <code>ubuntu</code> 环境的配置（加速路径替换成自己的）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<ol>
<li>修改 Cgroup Driver, 修改 <code>/etc/docker/daemon.json</code> 文件，增加如下内容</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>最终 <code>daemon.json</code> 文件内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启 <code>docker</code> 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>云原生</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu22.04安装docker-compose</title>
    <url>/2023/71e6b223e45b/index.html</url>
    <content><![CDATA[<ol>
<li><a href="https://github.com/docker/compose/releases">docker-compose下载</a>, 选择对应的版本即可，对于 <code>ubuntu</code> 系统选择的是 <code>Linux</code> 版本， 下载完成后，将其移动到 <code>/usr/local/bin/</code> 目录下即可。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> docker-compose-linux-x86_64 docker-compose</span><br><span class="line"><span class="comment"># 移动到执行目录</span></span><br><span class="line">sudo <span class="built_in">mv</span> docker-compose /usr/local/bin/</span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> u+x docker-compose</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>云原生</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker-compose安装mysql和redis基本环境</title>
    <url>/2023/3c61103fd97b/index.html</url>
    <content><![CDATA[<h2 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create service_default</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose-安装mysql-redis"><a href="#docker-compose-安装mysql-redis" class="headerlink" title="docker-compose 安装mysql,redis"></a>docker-compose 安装mysql,redis</h2><p>下面将所有的软件安装在 <code>/opt/docker_soft</code> 目录下</p>
<ol>
<li>在 <code>/opt/docker_soft</code> 目录下创建如下目录结构</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">├── config</span><br><span class="line">│   ├── mysql8</span><br><span class="line">│   │   └── my<span class="selector-class">.cnf</span></span><br><span class="line">│   ├── nginx</span><br><span class="line">│   │   └── nginx<span class="selector-class">.conf</span></span><br><span class="line">│   ├── redis7</span><br><span class="line">│   │   └── redis<span class="selector-class">.conf</span></span><br><span class="line">│   └── zk</span><br><span class="line">│       └── zoo<span class="selector-class">.cfg</span></span><br><span class="line">├── data</span><br><span class="line">│   ├── mysql8</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   ├── redis</span><br><span class="line">├── docker-compose<span class="selector-class">.yml</span></span><br><span class="line">└── log</span><br><span class="line">    ├── mysql8</span><br><span class="line">    └── nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker_soft</span><br><span class="line"><span class="built_in">mkdir</span> -p config data <span class="built_in">log</span></span><br><span class="line"><span class="built_in">cd</span> config/</span><br><span class="line"><span class="built_in">mkdir</span> mysql8</span><br><span class="line"><span class="built_in">mkdir</span> nginx</span><br><span class="line"><span class="built_in">mkdir</span> redis7</span><br><span class="line"><span class="built_in">touch</span> mysql8/my.cnf</span><br><span class="line"><span class="built_in">touch</span> nginx/nginx.conf</span><br><span class="line"><span class="built_in">touch</span> redis7/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> data/mysql8</span><br><span class="line"><span class="built_in">mkdir</span> data/nginx</span><br><span class="line"><span class="built_in">mkdir</span> data/redis</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">log</span>/mysql8</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">log</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给mysql挂载目录赋予所有权限，避免mysql启动报错</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 data/mysql8</span><br></pre></td></tr></table></figure>

<p>通过上面命令创建了三个配置文件，其中 <code>my.cnf</code> 是 mysql 的配置文件，<code>nginx.conf</code> 是 nginx 的配置文件，<code>redis.conf</code> 是 redis 的配置文件， 可以将下面内容拷贝到对应的配置文件中。</p>
<div class="tabs" id="配置文件"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="配置文件-1">mysql的配置文件(my.cnf)</button><button type="button" class="tab " data-href="配置文件-2">nginx的配置文件(nginx.conf)</button><button type="button" class="tab " data-href="配置文件-3">redis的配置文件(redis.conf)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="配置文件-1"><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">###### [mysql]配置模块 ######</span></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置MySQL客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###### [mysqld]配置模块 ######</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="comment"># 注释1</span></span><br><span class="line"><span class="comment">#skip-grant-tables</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL8 的密码认证插件</span></span><br><span class="line"><span class="comment">#default_authentication_plugin=mysql_native_password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用符号链接以防止各种安全风险</span></span><br><span class="line"><span class="comment">#symbolic-links=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表名存储在磁盘是小写的，但是比较的时候是不区分大小写</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">16</span>M </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="attr">default-time_zone</span>=<span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binlog 配置</span></span><br><span class="line"><span class="attr">log-bin</span> = /logs/mysql-bin.log</span><br><span class="line"><span class="attr">expire-logs-days</span> = <span class="number">90</span></span><br><span class="line"><span class="attr">max-binlog-size</span> = <span class="number">500</span>M</span><br><span class="line"></span><br><span class="line"><span class="comment"># server-id 配置</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###### [client]配置模块 ######</span></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="comment">#–initialize --lower-case-table-names=1</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="配置文件-2"><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment"># 如果设置了 auto， 则 work-processes 的数量为 CPU 的核数</span></span><br><span class="line"><span class="comment"># worker_processes  auto;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span>        /var/log/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">#include       mime.types;</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="配置文件-3"><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">protected-mode <span class="keyword">no</span></span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">tcp-backlog <span class="number">511</span></span><br><span class="line">timeout <span class="number">0</span></span><br><span class="line">tcp-keepalive <span class="number">300</span></span><br><span class="line">daemonize <span class="keyword">no</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">loglevel <span class="keyword">notice</span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"><span class="keyword">always</span>-<span class="keyword">show</span>-logo <span class="keyword">no</span></span><br><span class="line"><span class="keyword">set</span>-proc-title yes</span><br><span class="line">proc-title-<span class="keyword">template</span> &quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span><br><span class="line">stop-writes-<span class="keyword">on</span>-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">rdb-del-sync-files <span class="keyword">no</span></span><br><span class="line">dir ./</span><br><span class="line"><span class="keyword">replica</span>-serve-stale-data yes</span><br><span class="line"><span class="keyword">replica</span>-<span class="keyword">read</span>-<span class="keyword">only</span> yes</span><br><span class="line">repl-diskless-sync yes</span><br><span class="line">repl-diskless-sync-max-replicas <span class="number">0</span></span><br><span class="line">repl-diskless-<span class="keyword">load</span> disabled</span><br><span class="line">repl-<span class="keyword">disable</span>-tcp-nodelay <span class="keyword">no</span></span><br><span class="line"><span class="keyword">replica</span>-priority <span class="number">100</span></span><br><span class="line">acllog-max-len <span class="number">128</span></span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction <span class="keyword">no</span></span><br><span class="line">lazyfree-lazy-expire <span class="keyword">no</span></span><br><span class="line">lazyfree-lazy-<span class="keyword">server</span>-del <span class="keyword">no</span></span><br><span class="line"><span class="keyword">replica</span>-lazy-flush <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lazyfree-lazy-<span class="keyword">user</span>-del <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lazyfree-lazy-<span class="keyword">user</span>-flush <span class="keyword">no</span></span><br><span class="line">oom-score-adj <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">oom-score-adj-<span class="keyword">values</span> <span class="number">0</span> <span class="number">200</span> <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">disable</span>-thp yes</span><br><span class="line"></span><br><span class="line">appendonly <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appenddirname &quot;appendonlydir&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="keyword">no</span>-appendfsync-<span class="keyword">on</span>-rewrite <span class="keyword">no</span></span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line"></span><br><span class="line">aof-<span class="keyword">load</span>-truncated yes</span><br><span class="line"></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line">aof-<span class="type">timestamp</span>-enabled <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">slowlog-<span class="keyword">log</span>-slower-than <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">slowlog-max-len <span class="number">128</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">latency-monitor-threshold <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">notify</span>-keyspace-events &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hash-max-listpack-entries <span class="number">512</span></span><br><span class="line">hash-max-listpack-<span class="keyword">value</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line">list-max-listpack-size <span class="number">-2</span></span><br><span class="line"></span><br><span class="line">list-compress-depth <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>-max-intset-entries <span class="number">512</span></span><br><span class="line"></span><br><span class="line">zset-max-listpack-entries <span class="number">128</span></span><br><span class="line">zset-max-listpack-<span class="keyword">value</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line">hll-sparse-max-bytes <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">stream-node-max-bytes <span class="number">4096</span></span><br><span class="line">stream-node-max-entries <span class="number">100</span></span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">client-output-buffer-<span class="keyword">limit</span> normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">client-output-buffer-<span class="keyword">limit</span> <span class="keyword">replica</span> <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></span><br><span class="line">client-output-buffer-<span class="keyword">limit</span> pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></span><br><span class="line">hz <span class="number">10</span></span><br><span class="line"></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line">jemalloc-bg-thread yes</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<ol start="3">
<li>在 <code>/opt/docker_soft</code> 目录下创建 <code>docker-compose.yml</code> 文件，内容如下：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">service_default:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql8:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">service_default</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 数据挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/data/mysql8/:/var/lib/mysql/</span></span><br><span class="line">      <span class="comment"># 配置挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/config/mysql8/:/etc/mysql/conf.d/</span></span><br><span class="line">      <span class="comment"># 日志挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/log/mysql8:/logs</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="comment"># 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)</span></span><br><span class="line">      <span class="string">--authentication_policy=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.25.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">service_default</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/config/nginx:/etc/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/log/nginx:/var/log/nginx</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7-alpine3.18</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">service_default</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/config/redis7/:/usr/local/etc/redis/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_soft/data/redis:/data</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装 <code>docker</code> 镜像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br><span class="line">docker pull redis:7-alpine3.18</span><br><span class="line">docker pull nginx:1.25.0</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>云原生</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>普通用户执行docker命令</title>
    <url>/2023/6987d518f2d5/index.html</url>
    <content><![CDATA[<p>以下操作是在 <code>ubuntu22.04</code> 版本安装 <code>docker</code> 后，普通用户执行 <code>docker</code> 命令时不用添加 <code>sudo</code></p>
<ol>
<li>创建 <code>docker</code> 用户组</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将当前用户加入到 <code>docker</code> 用户组</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>退出当前用户，重新登录，即可使用 <code>docker</code> 命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>云原生</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
