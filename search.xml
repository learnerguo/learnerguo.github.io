<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Next8版本主题优化修改的文件</title>
    <url>/2023/11/16/44b973fe011c/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/252983030">参考文章</a></p>
<span id="more"></span>

<p>首页每篇文章变成圆角，只需要在 <code>styles.styl</code> 中添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加首页每篇文章圆角独立 start ------------</span><br><span class="line">.post-block&#123;</span><br><span class="line">        background-color: rgba(255, 255, 255, 1);</span><br><span class="line">        //margin-top: 24px;</span><br><span class="line">        margin-bottom: 24px;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        border-radius: 30px 50px 30px 50px;</span><br><span class="line">        box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line">&#125;</span><br><span class="line">// 添加首页每篇文章圆角独立 end ------------</span><br></pre></td></tr></table></figure>
<p><code>styles.styl</code> 在博客根目录下的，<code>source/_data</code> 下，若没有则需要自己创建并且在 <code>next</code> 主题的 <code>_config.yml</code> 中打开下面的注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next7主题自定义分类</title>
    <url>/2023/11/13/baf924a75393/</url>
    <content><![CDATA[<p><a href="https://enigmatisms.github.io/2022/02/18/Hexo-NexT%E4%B8%BB%E9%A2%98-%E6%9B%B4%E5%BC%BA%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/">参考文章</a></p>
<h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall hexo-generator-index</span><br><span class="line"><span class="built_in">npm</span> install hexo-generator-indexed</span><br><span class="line"><span class="built_in">npm</span> install hexo-pagination --save</span><br><span class="line"><span class="built_in">npm</span> install timsort --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="添加自定义文件"><a href="#添加自定义文件" class="headerlink" title="添加自定义文件"></a>添加自定义文件</h1><ol>
<li>增加的分类是 阅读：book</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">/book/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span> <span class="comment">#这里是新添加的菜单</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在博客根目录下创建 scripts 目录并创建 <code>customcategory.js</code> 文件，内容如下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; sort &#125; = <span class="built_in">require</span>(<span class="string">&#x27;timsort&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> filteredCategory = <span class="string">&#x27;book&#x27;</span>;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;customcategory&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.<span class="property">posts</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">name</span> == filteredCategory;</span><br><span class="line">  &#125;).<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>);				<span class="comment">// 复制，而非原地操作</span></span><br><span class="line">  <span class="title function_">sort</span>(posts.<span class="property">data</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> (b.<span class="property">sticky</span> || <span class="number">0</span>) - (a.<span class="property">sticky</span> || <span class="number">0</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pagination</span>(<span class="string">&#x27;book&#x27;</span>, posts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;customcategory&#x27;</span>],</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">__index</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在主题的 layout 目录下创建文件 <code>customcategory.njk</code> 文件内容如下</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &#x27;_layout.njk&#x27; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/post-collapse.njk&#x27; <span class="keyword">as</span> post_template with context %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/sidebar.njk&#x27; <span class="keyword">as</span> sidebar_template with context %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-variable">&#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125;</span><span class="language-xml">: </span><span class="template-variable">&#123;&#123; page.category &#125;&#125;</span><span class="language-xml"> | </span><span class="template-variable">&#123;&#123; title &#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> class %&#125;</span><span class="language-xml">index posts-expand</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">include</span></span> &#x27;_partials/pagination.njk&#x27; -%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> sidebar %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; sidebar_template.render(false) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly主题多级分类折叠与展开</title>
    <url>/2023/11/20/acbd53e5de56/</url>
    <content><![CDATA[<ol>
<li>引入 <code>jquery</code> 和 自定义的 js 文件</li>
</ol>
<p>打开 <code>_config.butterfly.yml</code> 文件，添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/cusconfig/css/hidemermaid.css?1&quot;&gt;</span></span><br><span class="line">    <span class="comment"># 引入jquery</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 引入自定义文件，自定义文件放在博客根目录的 /cusconfig/js 目录下，名称是 category.js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/cusconfig/js/category.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>category.js 文件内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">categoryUnfold</span>();</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">categoryUnfold</span>(<span class="params"></span>) &#123;</span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 这里引入了向下展开的图标，可以直接从本站下载放入对应目录即可</span></span><br><span class="line">				$(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;list-style-image&quot;</span>,<span class="string">&quot;url(&#x27;/cusconfig/img/category-unfold-16x16.png&#x27;&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//点击含有子标签category-list-child的category-list-link标签时，不进行跳转</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">		&#125;).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;javascript:void(0)&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//含有子标签category-list-child的category-list-link标签将自动隐藏子标签</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">				$(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">		&#125;);	</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//点击含有子标签category-list-child的category-list-link标签时，将隐藏子标签展开</span></span><br><span class="line">		$(<span class="string">&quot;.category-list-link&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">			$(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;.category-list-child&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo和Next主题修改</title>
    <url>/2023/11/08/52739010ef7c/</url>
    <content><![CDATA[<h1 id="文章目录默认展开"><a href="#文章目录默认展开" class="headerlink" title="文章目录默认展开"></a>文章目录默认展开</h1><p>基于 Next7.x 版本</p>
<ol>
<li>主题配置文件 _config.yml 中搜索 custom_file_path,看到如下内容，打开 style 那一行的注释</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol start="2">
<li>在项目根目录(注意这里不是在主题目录下新建)下的 source 目录下新建 _data 目录，并且创建 style.styl 文件，内容如下</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章目录默认展开</span></span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文章目录字体大小调整</span></span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-tag">ol</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span> : <span class="number">14px</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改主题配置文件 _config.yml, 搜索 toc 修改内容如下</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章目录</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h1><ol>
<li>安装依赖</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在全局配置文件 _config.yml 中添加如下内容</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改主题配置文件 _config.yml，这里使用的是 Next 主题, 搜索 local_search 将 enable: false 改成 true</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重新生成</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>



<h1 id="新建菜单以及添加菜单图标"><a href="#新建菜单以及添加菜单图标" class="headerlink" title="新建菜单以及添加菜单图标"></a>新建菜单以及添加菜单图标</h1><p><a href="http://theme-next.iissnan.com/getting-started.html#menu-settings">next官网</a></p>
<p>在官网中查看主题设定-&gt;菜单那部分，当我们新添加一个菜单是(比如我要添加阅读)，在<code>next</code>的配置文件中(<code>_config.yml</code>)里面找到下面的配置：</p>
<p>Next8.x 版本</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">/book/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span> <span class="comment">#这里是新添加的菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">book（这里是图标）</span></span><br></pre></td></tr></table></figure>

<p>然后在开启的对应的语言文件中，比如我使用的是中文，那么就是在<code>zh-CN.yml</code>文件中找到<code>menu</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">book:</span> <span class="string">阅读</span></span><br></pre></td></tr></table></figure>

<p>后面的book那一栏是后来添加的。需要注意的是在上面的第一个配置文件中所写的<code>book</code>是<a href="http://fontawesome.io/">Font Awesome</a>中<code>icon</code>的名称，这样才可以在我们自己的页面显示出图标。</p>
<p>在 <code>source/</code> 目录下创建目录 <code>book</code>,  然后在 <code>source/book</code> 目录下创建 <code>index.md</code>, 内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">book</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-11-10 21:12:59</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">book</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h1 id="添加社交功能之邮箱"><a href="#添加社交功能之邮箱" class="headerlink" title="添加社交功能之邮箱"></a>添加社交功能之邮箱</h1><p>在next主题配置文件搜索social:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:1744709138@qq.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br></pre></td></tr></table></figure>

<p>这里只是显示了邮箱，这些原来都是注释掉的，自己去掉前面的注释即可，需要注意的是邮箱前面的<code>mailto</code>是必须要保留的，还有最后面的<code>envelope</code>则是图标名字，也是不能修改的。</p>
<h1 id="友情链接的配置"><a href="#友情链接的配置" class="headerlink" title="友情链接的配置"></a>友情链接的配置</h1><p>在<code>next</code>主题配置文件中查找标签<code>links</code>并进行如下配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># title</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">MacTalk:</span> <span class="string">http://macshuo.com/</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">http://example.com/</span></span><br></pre></td></tr></table></figure>

<h1 id="Next8-增加评论功能（valine）"><a href="#Next8-增加评论功能（valine）" class="headerlink" title="Next8 增加评论功能（valine）"></a>Next8 增加评论功能（valine）</h1><p>在 Next8.1.0 中移除了 valine, <a href="https://github.com/next-theme/hexo-theme-next/issues/4">参考网址</a><br>如果还需要继续使用，官方有提供插件，具体操作如下</p>
<ol>
<li>安装插件 <code>npm install hexo-next-valine --save</code></li>
<li>编辑 Next 主题 _config.yml 文件，找到 <code>comments:</code> 标签，在下面添加 valine 相关设置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">valine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">设置apiId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">设置apiKey</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="string">https://leancloud.cn</span> <span class="comment"># When the custom domain name is enabled, fill it in here</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">期待与您的交流</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># Whether to enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> []</span><br></pre></td></tr></table></figure>

<h1 id="添加近期文章展示"><a href="#添加近期文章展示" class="headerlink" title="添加近期文章展示"></a>添加近期文章展示</h1><p><a href="https://blog.csdn.net/wugenqiang/article/details/88581218">查看转载文章</a></p>
<h1 id="显示文章的更新时间"><a href="#显示文章的更新时间" class="headerlink" title="显示文章的更新时间"></a>显示文章的更新时间</h1><p>在主题的配置文件中找到<code>updated_at</code>，然后将其值修改为<code>true</code>即可(这种方式应该是适用于5以后的版本)</p>
<p>对于以前的方式可以看这篇<a href="https://blog.csdn.net/ganzhilin520/article/details/79053399">别人写的文章</a></p>
<h1 id="字数统计与阅读时长"><a href="#字数统计与阅读时长" class="headerlink" title="字数统计与阅读时长"></a>字数统计与阅读时长</h1><p><a href="https://www.cnblogs.com/php-linux/p/8418518.html">查看转载文章</a></p>
<h1 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h1><p>在站点配置文件搜索<code>post_copyright</code>，将<code>enable</code>修改为<code>true</code>，添加<code>author</code>即可。<br><a href="https://zhuanlan.zhihu.com/p/463548944#:~:text=%E4%BA%8C%E3%80%81hexo%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%202.1%20%E5%BC%80%E5%90%AF%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE%20%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6themes%2Fnext%2F_config.yml%EF%BC%8C%E5%B0%86creative_commons%E4%B8%8B%E9%9D%A2%E7%9A%84post%E5%80%BC%E7%94%B1false%E6%94%B9%E4%B8%BAtrue%E3%80%82%20creative_commons%3A%20license%3A%20by-nc-sa,sidebar%3A%20false%20post%3A%20true%20language%3A%202.2%20%E6%9B%B4%E6%96%B0%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E%20%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6themes%2Fnext%2Flayout%2F_partials%2Fpost%2Fpost-copyright.swig%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E%E6%96%87%E5%AD%97%EF%BC%8C%E4%BF%9D%E5%AD%98%E3%80%82">参考文章</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">咖啡杯里的茶</span></span><br></pre></td></tr></table></figure>

<h1 id="修改文章底部的标签"><a href="#修改文章底部的标签" class="headerlink" title="修改文章底部的标签"></a>修改文章底部的标签</h1><p>基于 Next7 修改<br>在主题配置文件 <code>_config.yml</code> 中将下面配置设置为 true 即可（该配置默认值为false）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h1><p><a href="https://www.jianshu.com/p/ea78bdd0551f">显示图片</a></p>
<h1 id="添加搜索功能-1"><a href="#添加搜索功能-1" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h1><p><a href="https://blog.csdn.net/qq_40265501/article/details/80030627">添加搜索</a></p>
<h1 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h1><p>在<code>next</code>主题的配置文件文件中加上下面的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /images/微信支付.jpg</span><br><span class="line">alipay: /images/支付宝支付.jpg</span><br></pre></td></tr></table></figure>

<p>其中<code>wechatpay</code>和<code>alipay</code>对应的是微信支付收款码和支付宝支付收款码的图片地址，我这里是存放在 <code>主题\source\images\</code>下面</p>
<h1 id="生成永久链接"><a href="#生成永久链接" class="headerlink" title="生成永久链接"></a>生成永久链接</h1><p><a href="https://zhuanlan.zhihu.com/p/134492757">Hexo 生成永久文章链接 - 知乎 (zhihu.com)</a><br>对于Heox7 版本可以有更简单的方式，直接使用 hash 即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:hash/</span></span><br></pre></td></tr></table></figure>

<h1 id="文章收录"><a href="#文章收录" class="headerlink" title="文章收录"></a>文章收录</h1><p><a href="https://zhuanlan.zhihu.com/p/651590960">关于Hexo博客收录与SEO那些事 - 知乎 (zhihu.com)</a><br>文章中验证网站的步骤中使用的是下载 html 验证文件，有可能这种方式验证不成功，可以选择第二种方式，在网站首页添加 meta 标签中的内容，将 meta 中的内容复制到<br><code>themes\nextlayout\_partials\head\head.njk</code> 文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里添加的是百度的验证头文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;baidu-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里添加的是bing验证的头文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msvalidate.01&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h1><p><a href="https://guoguocai.github.io/2022/06/05/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7-Hexo-%E7%89%88%E6%9C%AC/">升级hexo</a></p>
<h1 id="Next7-多级目录折叠"><a href="#Next7-多级目录折叠" class="headerlink" title="Next7 多级目录折叠"></a>Next7 多级目录折叠</h1><p><a href="https://alex-mcavoy.github.io/hexo/41b257b8.html">多级目录折叠</a><br>按照上面参考的文档开启 Jquery, 页面依然报错 <code>$ 符号未定义</code>, 此时可以按照如下方式修改,在进入 category.js 之前先引入一次 Jquery</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多级目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/category.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Hexo-Next主题支持-mermaid"><a href="#Hexo-Next主题支持-mermaid" class="headerlink" title="Hexo Next主题支持 mermaid"></a>Hexo Next主题支持 mermaid</h1><ol>
<li>进入博客根目录，执行安装插件命令 <code>npm install hexo-filter-mermaid-diagrams --save</code></li>
<li>打开 Next 主题下的 _config.yml 文件，将 mermaid 的配置改成 true</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在站点配置文件中修改如下(去除图形的高亮)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 增加下面的内容</span></span><br><span class="line">  <span class="attr">exclude_languages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mermaid</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重新生成部署即可</li>
</ol>
<h1 id="增加图片背景和透明度"><a href="#增加图片背景和透明度" class="headerlink" title="增加图片背景和透明度"></a>增加图片背景和透明度</h1><ol>
<li>将背景图片放在主题目录下 <code>themes/next/source/images/</code> 下面</li>
<li>修改 Next 主题配置文件 <code>_config.yml</code>, 将下面的注释打开</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在博客根目录下的 <code>source/</code> 下面创建 <code>_data/styles.styl</code> 文件（默认在 source 目录下没有 _data 目录，若没有也需要创建）</li>
<li>在上面创建的 <code>styles.styl</code> 文件中增加如下内容</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片背景 start------------</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:url(<span class="string">/images/background.jpg</span>);		<span class="comment">//图片路径，默认</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;			<span class="comment">//图片无法铺满时，是否重复及重复方式</span></span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;		<span class="comment">//图片是否跟随滚动</span></span><br><span class="line">    <span class="attribute">background-size</span>:cover;				<span class="comment">//覆盖</span></span><br><span class="line">    <span class="attribute">background-position</span>:center;		<span class="comment">//图片显示起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片背景 end------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透明度start----------------------------</span></span><br><span class="line"><span class="comment">// 文章内容透明度设置</span></span><br><span class="line"><span class="comment">// 7 版本有效</span></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8版本有效</span></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索框的透明度</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 透明度end----------------------------</span></span><br></pre></td></tr></table></figure>

<h1 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h1><p><a href="https://github.com/rozbo/hexo-neat">参考github hexo-neat 插件</a></p>
<ol>
<li>安装插件</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 hexo 配置文件 <code>_config.yml</code> 中添加如下配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态文件压缩 start-----------------</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line"><span class="comment"># 静态文件压缩 end-----------------</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重新生成推送即可</li>
</ol>
<h1 id="引用自己的文章"><a href="#引用自己的文章" class="headerlink" title="引用自己的文章"></a>引用自己的文章</h1><p><code>&#123;% post_path filename %&#125;</code><br>filename 就是引用文章的名称</p>
<h1 id="阻止点击more时跳转到more位置"><a href="#阻止点击more时跳转到more位置" class="headerlink" title="阻止点击more时跳转到more位置"></a>阻止点击more时跳转到more位置</h1><ol>
<li>如果给文章添加了 <code>&lt;!--more--&gt;</code> 点击阅读更多时会跳转到 <code>more</code> 锚点位置，可以通过下面方式修改</li>
<li>找到 <code>themes\next-8.18.2\layout\_macro\post.njk</code> 文件， 搜索 <code>elif post.excerpt</code>，相关部分原来的代码如下</li>
</ol>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#123;% elif post.excerpt %&#125;</span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; <span class="name">post.excerpt</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;%- if theme.read_more_btn %&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">post.path</span>) &#125;&#125;</span><span class="template-variable">&#123;&#123;<span class="name">suffix</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.read_more&#x27;</span>) &#125;&#125;</span><span class="language-xml"> <span class="symbol">&amp;raquo;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;%- endif %&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--/noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;% else %&#125;</span></span><br></pre></td></tr></table></figure>
<p>添加部分内容后变成如下内容</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> post.excerpt %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; post.excerpt &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.read_more_btn %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 此处是添加的内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name">set</span> suffix = &quot;&quot;%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.read_more_anchor %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name">set</span> suffix = &quot;#more&quot;%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 添加结束 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 这里有修改，将 #more 改成了 </span></span><span class="template-variable">&#123;&#123;suffix&#125;&#125;</span><span class="language-xml"><span class="comment"> --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="template-variable">&#123;&#123;suffix&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; __(&#x27;post.read_more&#x27;) &#125;&#125;</span><span class="language-xml"> <span class="symbol">&amp;raquo;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--/noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在 next 的 <code>_config.yml</code> 文件中添加如下内容即可，配置为true时依然跳转到more</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_more_anchor:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用插入本地图片路径问题</title>
    <url>/2023/11/15/563e23df91d3/</url>
    <content><![CDATA[<p>Hexo version: 7.0<br>Next version: 8.18</p>
<span id="more"></span>
<ol>
<li>安装插件</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改 hexo 配置文件 <code>_config.yml</code> (不是next 主题的配置文件)</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这样文章生成的路径会是年/月/日/hash值形式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:hash/</span></span><br><span class="line"><span class="comment"># 开启资源文件夹功能</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="comment"># 这两个值都配置为false，网上很多文章配置成true，可能是不同版本效果不同，在 Next8.18, hexo7 这个版本若配置成true，图片路径会多了日期导致显示失败 </span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 md 文章目录中创建同名的文件夹，比如当前这篇文章的名称是 <code>hexo插入本地图片路径问题</code>， 那就需要在这篇文章的同级目录中创建一个同名的文件夹，然后图片就放在这个文件夹中</li>
<li>在使用 md 语法引入图片的时候，因为图片是放在目录中（和文章同名的那个目录），但是如果在本地 vscode 中将目录也加上，虽然本地可以访问，但是 hexo g 生成之后，访问博客地址是无法访问的，所以本地引入图片的时候只能写图片的文件名，不要路径，这样虽然本地无法预览，但是 hexo s 和 hexo d 之后的结果都可以正常查看</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>比较</title>
    <url>/2023/11/18/2084759b2332/</url>
    <content><![CDATA[<blockquote>
<p>人感到不幸福大多来源于比较，感到满足也源于比较</p>
</blockquote>
<span id="more"></span>
<p>在微信读书看到一位书友写到，作为农村出来的孩子，应该如何改变自己的命运，因为周围的一切在告诉我们，就算你努力了二十几年，才勉强达到了别人的起跑线，但是我们的出身是自己无法决定的，那我们应该如何更进一步呢？</p>
<p>看到另外一位书友的回答很有感触，且记录在此，和有缘人共勉</p>
<blockquote>
<p>回头看，轻舟已过万重山<br>向前看，长路漫漫亦灿灿<br>平常看，人间烟火甚灿烂<br>低头看，万里黄山皆脚下  </p>
</blockquote>
]]></content>
      <categories>
        <category>record</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>宝贵的人生建议</title>
    <url>/2023/11/12/5792ca8e5e27/</url>
    <content><![CDATA[<ul>
<li>书名：《宝贵的人生建议》</li>
<li>作者：凯文凯利</li>
</ul>
<p>看过了，觉得有道理，想要改变都不代表你真的认同并理解，”做出来”就是对”认同”最好的回复</p>
<span id="more"></span>

<blockquote>
<p>把”创造”和”改进”这两个过程分开，你不能边写作边编辑，边雕刻边打磨，边制作边分析。如果你这么做，编辑就会阻遏创造，发明时，不要选择。画草图时，不要检查。写初稿时，不要反思。一开始，创造性思维必须是自由的，不受批判的干扰。</p>
</blockquote>
<p>无论是技术类文章还是其他类型的记录，重点是写，而不是先学习各种各样的套路(套路也很重要，但内容是前提)，后续在写内容之前不要追求完美，先写出来才会有后续的故事</p>
<blockquote>
<p>养成习惯的好处是，在行动时，不必再进行内心的权衡。不再消耗能量去思考是否要做这件事。你只管去做。好习惯很多，从说真话到使用牙线。</p>
</blockquote>
<p>不要使用意志力去坚持做一件事，慢慢养成习惯，让做某件事成为身体的本能</p>
<blockquote>
<p>恐惧是因为缺乏想象力。恐惧的解药不是勇敢，而更可能是想象力</p>
</blockquote>
<ul>
<li>恐惧是因为经历的太少，知道的太少，懂得的太少</li>
</ul>
<blockquote>
<p>你并不需要更多时间，因为你已经拥有了你的所有时间</p>
</blockquote>
<blockquote>
<p>你最近一次改变是在什么年纪，你就是多少岁</p>
</blockquote>
<blockquote>
<p>不要管别人怎么看待你，因为他们根本没看你</p>
</blockquote>
<blockquote>
<p>任何有价值的事都需要无尽的工作。你无法给工作设定上限，所以你必须给工作时间设限。你唯一能管理的是时间，而不是工作</p>
</blockquote>
<blockquote>
<p>如果你想超越你心目中的英雄，那就放下自尊心，像学生一样模仿他们，直到你能超越他们。这是所有大师的成功之道</p>
</blockquote>
]]></content>
      <categories>
        <category>book</category>
        <category>成长</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>微信读书阅读挑战</title>
    <url>/2023/11/19/c4c074b722a1/</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>参与微信阅读挑战</p>
<ol>
<li>365 天不间断</li>
<li>期间最少阅读 300 小时</li>
<li>每月更新进度</li>
</ol>
<pre class="mermaid">pie title 总天数(365)
    "已读" : 4
    "未读" : 361</pre>
]]></content>
      <categories>
        <category>book</category>
        <category>other</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap详解</title>
    <url>/2023/11/21/834224a16039/</url>
    <content><![CDATA[<h1 id="HashMap的底层数据结构是什么？"><a href="#HashMap的底层数据结构是什么？" class="headerlink" title="HashMap的底层数据结构是什么？"></a>HashMap的底层数据结构是什么？</h1><ol>
<li>之前 <code>Jdk1.7</code> 的存储结构是数组+链表，到了 <code>Jdk1.8</code> 变成了数组+链表+红黑树。</li>
</ol>
<h1 id="HashMap-是如何定位索引下标的"><a href="#HashMap-是如何定位索引下标的" class="headerlink" title="HashMap 是如何定位索引下标的"></a>HashMap 是如何定位索引下标的</h1><p>定位 <code>index</code> 分成两步</p>
<ol>
<li><p>根据 hash 函数获取 hash 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可以看到上面代码获取到 hashCode 之后还右移 16 位，具体原因在下面分析</strong></p>
</li>
<li><p>根据第一步计算的 <code>hash</code> 值获取数组位置（一般是对数组长度取模，<code>HashMap</code> 中是对长度 -1 进行 <code>&amp;</code> 运算）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// 获取下标的操作是  i = (n-1) &amp; hash</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>获取下标为什么是对 n-1 进行与操作而不是取模？具体原因下面分析</strong></p>
<h1 id="为什么需要对key的-hash-值右移-16位"><a href="#为什么需要对key的-hash-值右移-16位" class="headerlink" title="为什么需要对key的 hash 值右移 16位"></a>为什么需要对key的 hash 值右移 16位</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HashMap</span> <span class="string">中使用的</span> <span class="string">hash</span> <span class="string">函数是</span> <span class="string">key.hash</span> <span class="string">^</span> <span class="string">(key.hash</span> <span class="string">&gt;&gt;</span> <span class="number">16</span><span class="string">)</span>  <span class="string">而不是直接使用</span> <span class="string">key.hash,</span> <span class="string">这么做的原因是增加了扰动计算，使得</span> <span class="string">hash</span> <span class="string">分布的尽可能的均匀，</span> <span class="string">让元素的高16</span> <span class="string">位和低16</span> <span class="string">位都参与运算</span></span><br><span class="line"><span class="string">示例：</span></span><br><span class="line"><span class="string">比如有一个元素1换成二进制如下</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span>  <span class="string">（右移16位的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="string">另外一个元素2换成二进制如下</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110</span>  <span class="string">（右移16位的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="string">在计算数组位置的时候使用的是</span> <span class="string">hash</span> <span class="string">&amp;</span> <span class="string">(n</span> <span class="number">-1</span><span class="string">),</span>  <span class="string">要知道</span> <span class="string">n-1</span> <span class="string">肯定是一个相对来说比较小的数字（32个bit</span> <span class="string">只会使用比较少的低位），</span> <span class="string">比如长度是</span> <span class="number">32</span><span class="string">，</span> <span class="string">对应的二进制是</span> <span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用没有右移的元素1和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111     </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1010</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用没有右移的元素2和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100     </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1010</span></span><br><span class="line"><span class="string">可以看到元素1和元素2计算出来下标是相同的，这个不同是因为元素1和元素2的低16位是完全相同的，不同之处只在于高16位，但是当我们对</span> <span class="string">（n-1）进行与操作的时候，由于</span> <span class="string">n-1</span> <span class="string">的值比较小，绝大部分情况下，只有低16位会进行运算的</span></span><br><span class="line"></span><br><span class="line"><span class="string">接下来再看一下如果使用右移的hash进行计算会有什么不同</span></span><br><span class="line"><span class="string">使用右移的元素1和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000  </span><span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="string">用右移的元素2和</span> <span class="string">（32</span> <span class="number">-1</span><span class="string">）</span> <span class="string">进行与操作（与操作是都为1才为1，否则为0）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110</span> <span class="string">（没有右移16位的二进制）</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001 </span><span class="number">1111</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000      </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000  </span><span class="number">1110</span></span><br><span class="line"><span class="string">可以看到计算出来的</span> <span class="string">index</span> <span class="string">值是不同的，这就是右移带来的让高16位有参与运算的效果</span></span><br></pre></td></tr></table></figure>

<h1 id="为什么不对长度取模而是使用与运算"><a href="#为什么不对长度取模而是使用与运算" class="headerlink" title="为什么不对长度取模而是使用与运算"></a>为什么不对长度取模而是使用与运算</h1><ol>
<li><code>X % 2^n = X &amp; (2^n – 1)</code>  这两种运算等价，所以这也是 <code>HashMap</code> 长度取 <code>2^n</code> 的原因<br>也可以从数据角度记住，当 <code>n</code> 是 2 的倍数时， <code>X % 2^n = X &amp; (2^n – 1)</code>  等价</li>
</ol>
<p><a href="https://www.cnblogs.com/ysocean/p/9054804.html">公式计算参考链接</a></p>
<h1 id="HashMap是如何实现扩容的"><a href="#HashMap是如何实现扩容的" class="headerlink" title="HashMap是如何实现扩容的"></a>HashMap是如何实现扩容的</h1><p>扩容后索引其实也是使用 <code>hash &amp; （newLength -1）</code>, 这样计算出来的位置要是和原来的元素在相同的位置，要么是 原来的位置+旧数组长度&#x3D;新索引位置</p>
<h1 id="HashMap是如何解决hash冲突的"><a href="#HashMap是如何解决hash冲突的" class="headerlink" title="HashMap是如何解决hash冲突的"></a>HashMap是如何解决hash冲突的</h1><ol>
<li>对 <code>hash</code> 的计算进行优化，不是直接使用 <code>hashcode</code>,  而是右移16位，让高16位也参与运算，减少<code>hash</code> 冲突</li>
<li>如果遇到冲突，使用拉链法解决</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java的io模型</title>
    <url>/2023/11/17/180f5b629f58/</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h1 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h1><ol>
<li><code>bio</code> 是同步阻塞 <code>io</code>，每一个连接都需要一个线程去处理</li>
<li><code>bio</code> 会有资源浪费问题，一个线程只能处理一个连接，如果某个客户端并没有发送数据，对应的服务端线程也只能阻塞</li>
</ol>
<span id="more"></span>
<h2 id="阻塞的含义"><a href="#阻塞的含义" class="headerlink" title="阻塞的含义"></a>阻塞的含义</h2><ol>
<li>服务端 <code>ServerSocket</code> 调用 <code>accept()</code> 方法会阻塞（如果没有客户端进行连接，调用这个方法后不会继续往下执行）</li>
<li>线程从Socket的输入流读入数据时,如果输入流没有足够的数据，就会进入阻塞状态</li>
</ol>
<h2 id="java-bio-代码实现"><a href="#java-bio-代码实现" class="headerlink" title="java bio 代码实现"></a>java bio 代码实现</h2><p><strong>服务端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                <span class="comment">//连接成功后新开一个线程去处理这个连接</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// read() 方法上的注释 If no byte is available because the stream is at the end of the file, the value -1 is returned</span></span><br><span class="line">                            <span class="keyword">while</span> ((length = socket.getInputStream().read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;thredId:&quot;</span> + Thread.currentThread().getName() + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, length));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端关闭, 当前线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>客户端实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusClientSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 外层循环会创建多个 socket，用来模拟多个 socket 客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8080</span>)) &#123;</span><br><span class="line">                <span class="comment">// 内存循环用来模拟一个客户端的多次通信</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    socket.getOutputStream().write((<span class="string">&quot;客户端&quot;</span> + j + <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次通信&quot;</span>).getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thredId:Thread-<span class="number">0</span>客户端<span class="number">0</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">0</span>客户端<span class="number">0</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">0</span></span><br><span class="line">thredId:Thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">1</span></span><br><span class="line">thredId:Thread-<span class="number">2</span>客户端<span class="number">2</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:Thread-<span class="number">2</span>客户端<span class="number">2</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:Thread-<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ol>
<li>执行完成之后，服务端程序并不会关闭，会一直在运行</li>
<li>从上面结果看，一共创建了三个线程来执行</li>
</ol>
<h2 id="使用线程池优化-bio-实现"><a href="#使用线程池优化-bio-实现" class="headerlink" title="使用线程池优化 bio 实现"></a>使用线程池优化 bio 实现</h2><p>客户端代码不需要改动，只需要更改服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                <span class="comment">//连接成功后新开一个线程去处理这个连接</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> <span class="title class_">ClientTask</span>(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ClientTask</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// read() 方法上的注释 If no byte is available because the stream is at the end of the file, the value -1 is returned</span></span><br><span class="line">                <span class="keyword">while</span> ((length = socket.getInputStream().read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;thredId:&quot;</span> + Thread.currentThread().getName() + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, length));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端关闭, 当前线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">0</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">0</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">1</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">2</span>第<span class="number">1</span>次通信</span><br><span class="line">thredId:pool-<span class="number">1</span>-thread-<span class="number">1</span>客户端<span class="number">2</span>第<span class="number">2</span>次通信</span><br><span class="line">客户端关闭, 当前线程:pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>即使使用线程池进行了优化，本地还是阻塞io，只有当一个客户端通信完成（socket关闭了），另外一个 socket 才可以开始进行通信</p>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><ol>
<li>nio 是非阻塞 io（Non-block io）</li>
<li>非阻塞 io 的重点是 <strong>事件</strong> 和 <strong>通知或轮询</strong></li>
<li><code>java.nio.channerls</code> 包提供了支持非阻塞通信的类<ol>
<li><code>ServerSocketChannel</code>: <code>ServerSocket</code> 的替代类，支持阻塞通信与非阻塞通信</li>
<li><code>SocketChannerl</code>： <code>Socket</code> 的替代类，支持阻塞通信与非阻塞通信</li>
<li><code>Selector</code>： 为<code>ServerSocketChannel</code>监控接收连接就绪事件，为<code>SocketChannel</code>监控连接就绪、读就绪和写就绪事件</li>
<li><code>SelectionKey</code>：代表<code>ServerSocketChannel</code>以及<code>SocketChannel</code>向<code>Selector</code>注册事件的句柄。当一个<code>SelectionKey</code>对象位于<code>Selector</code>对象的<code>selected-keys</code>集合中，就表示与这个<code>SelectionKey</code>对象相关的事件发生了</li>
</ol>
</li>
</ol>
<h2 id="NIO-执行流程"><a href="#NIO-执行流程" class="headerlink" title="NIO 执行流程"></a>NIO 执行流程</h2><pre class="mermaid">sequenceDiagram
    participant A as ServerSocketChannel
    participant B as Selector
    participant C as socketChannel
    A->>A: open()
    B-->>B: open()
    A-->>B: register(SelectionKey.OP_ACCEPT)
    C-->>C: open()
    C-->>B: register(SelectionKey.OP_CONNECT)
    B-->>A: selectionKey.isAcceptable()==true
    A-->>A: accept()
    A-->>B: register(SelectionKey.OP_READ)
    C-->>B: write(byte[])
    B-->>A: selectionKey.isReadable()==true
    A-->>A: read()
    A-->>B: register(SelectionKey.OP_WRITE)</pre>


<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>代码执行流程</p>
<ol>
<li>服务端启动</li>
<li>客户端启动连接服务端（注册 <strong>可读</strong>和 <strong>可写</strong>事件）</li>
<li>客户端发生可写事件，开始写数据到服务端并且 <strong>取消可写事件</strong></li>
<li>服务端发生可读事件，读取数据并注册可写事件</li>
<li>服务端写数据到用户端并 <strong>取消可写事件</strong></li>
<li>客户端发生可读事件，读取数据后注册可写事件</li>
<li>重复3-6步骤</li>
</ol>
<p>上面有一个核心的步骤是，不论是管理端还是服务端，在写完数据之后都要取消可写事件，当想要写数据的时候，再进行注册写事件即可</p>
<ol>
<li>如果注册完写事件并且写完数据之后，没有进行取消，那么 <code>selectionKey.isWritable()</code> 会一直返回true， 原因请看第二点</li>
<li><code>SocketChannel</code> 在如下情况下都是可写的状态<ol>
<li>当连接建立后，可以向 <code>SocketChannel</code> 中写入数据</li>
<li>当 <code>SocketChannel</code> 中的输出缓冲区有空间时，可以写入数据, 所处只要缓冲区有空间，就会一直可写</li>
</ol>
</li>
</ol>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusServerSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*缓冲区大小*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">BLOCK</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/*接受数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ByteBuffer</span> <span class="variable">sendBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="comment">/*发送数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ByteBuffer</span> <span class="variable">receiveBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CusServerSocket</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 打开服务器套接字通道</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 服务器配置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">// 注册到selector，等待连接</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务启动----8080:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 选择一组键，并且相应的通道已经打开</span></span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">// 返回此选择器的已选择键集。</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                handleEvent(selectionKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(SelectionKey selectionKey)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        String receiveText;</span><br><span class="line">        String sendText;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 可连接</span></span><br><span class="line">        <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            <span class="comment">// 设置该通道非阻塞</span></span><br><span class="line">            client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 注册可读和可写事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 返回为之创建此键的通道。</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="comment">//将缓冲区清空以备下次读取</span></span><br><span class="line">            receiveBuffer.clear();</span><br><span class="line">            <span class="comment">//读取服务器发送来的数据到缓冲区中</span></span><br><span class="line">            count = client.read(receiveBuffer);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                receiveText = <span class="keyword">new</span> <span class="title class_">String</span>(receiveBuffer.array(), <span class="number">0</span>, count);</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器端接受客户端数据--:&quot;</span> + receiveText);</span><br><span class="line">            &#125;</span><br><span class="line">            client.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isWritable()) &#123;</span><br><span class="line">            sendBuffer.clear();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">            sendText = <span class="string">&quot;服务端--》客户端  &quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond();</span><br><span class="line">            sendBuffer.put(sendText.getBytes());</span><br><span class="line">            <span class="comment">//将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位</span></span><br><span class="line">            sendBuffer.flip();</span><br><span class="line">            <span class="comment">//输出到通道</span></span><br><span class="line">            client.write(sendBuffer);</span><br><span class="line">            selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">CusServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CusServerSocket</span>(port);</span><br><span class="line">        server.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CusClientSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*缓冲区大小*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">BLOCK</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/*接受数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ByteBuffer</span> <span class="variable">sendBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line">    <span class="comment">/*发送数据缓冲区*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ByteBuffer</span> <span class="variable">receiveBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys;</span><br><span class="line">        Iterator&lt;SelectionKey&gt; iterator;</span><br><span class="line">        SelectionKey selectionKey;</span><br><span class="line">        SocketChannel client;</span><br><span class="line">        String receiveText;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">//返回此选择器的已选择键集。</span></span><br><span class="line">            selectionKeys = selector.selectedKeys();</span><br><span class="line">            iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                selectionKey = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isConnectable()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;client connect&quot;</span>);</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 判断此通道上是否正在进行连接操作。</span></span><br><span class="line">                    <span class="comment">// 完成套接字通道的连接过程。</span></span><br><span class="line">                    <span class="keyword">if</span> (client.isConnectionPending()) &#123;</span><br><span class="line">                        client.finishConnect();</span><br><span class="line">                        System.out.println(<span class="string">&quot;完成连接!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 连接成功之后注册可读和可写事件</span></span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">//将缓冲区清空以备下次读取</span></span><br><span class="line">                    receiveBuffer.clear();</span><br><span class="line">                    <span class="comment">//读取服务器发送来的数据到缓冲区中</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> client.read(receiveBuffer);</span><br><span class="line">                    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        receiveText = <span class="keyword">new</span> <span class="title class_">String</span>(receiveBuffer.array(), <span class="number">0</span>, count);</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端接受服务器端数据--:&quot;</span> + receiveText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    client.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isWritable()) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    sendBuffer.clear();</span><br><span class="line">                    client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">sendText</span> <span class="operator">=</span> <span class="string">&quot;客户端发送的数据--&gt;&quot;</span> + localTime.getMinute() + <span class="string">&quot;:&quot;</span> + localTime.getSecond();</span><br><span class="line">                    sendBuffer.put(sendText.getBytes());</span><br><span class="line">                    <span class="comment">//将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位</span></span><br><span class="line">                    sendBuffer.flip();</span><br><span class="line">                    client.write(sendBuffer);</span><br><span class="line">                    <span class="comment">// 写完之后需要注销写事件，否则会一直判断成可写, 这里表是对读事件感兴趣，就是移除写事件的意思</span></span><br><span class="line">                    selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="执行结果"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="执行结果-1">服务端结果</button><button type="button" class="tab " data-href="执行结果-2">用户端结果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="执行结果-1"><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">服务启动</span><span class="literal">----</span><span class="comment">8080:</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:45</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:47</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:49</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:51</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:53</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:55</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:57</span></span><br><span class="line"><span class="comment">服务器端接受客户端数据</span><span class="literal">--</span><span class="comment">:客户端发送的数据</span><span class="literal">--</span>&gt;<span class="comment">59:59</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="执行结果-2"><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">client connect</span></span><br><span class="line"><span class="comment">完成连接!</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:45</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:47</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:49</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:51</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:53</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:55</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:57</span></span><br><span class="line"><span class="comment">客户端接受服务器端数据</span><span class="literal">--</span><span class="comment">:服务端</span><span class="literal">--</span><span class="comment">》客户端  59:59</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>


]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java内存模型</title>
    <url>/2023/11/10/08549388833c/</url>
    <content><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p><code>java</code>内存模型实际上是一个抽象的概念，是一套规范，而不是一个实际的东西，而<code>java</code>内存结构就是根据这一套规范来进行划分的。</p>
<span id="more"></span>

<p>对于<code>java</code>内存模型我们主要需要了解以下几个内容：</p>
<ul>
<li>硬件内存架构</li>
<li>线程和<code>jvm</code></li>
<li><code>java</code>内存模型</li>
<li><code>java</code>内存模型对并发编程的支持</li>
</ul>
<h1 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h1><blockquote>
<p>物理机遇到的并发问题与虚拟机中的情况有很多相似之处，物理机对并发的处理方案对虚拟机的实现也有相当大的参考意义</p>
</blockquote>
<p>在计算机模型中主要是有五个部分来组成的</p>
<ol>
<li>输入</li>
<li>寄存器</li>
<li>cpu<ol>
<li>处理器</li>
<li>控制器</li>
</ol>
</li>
<li>输出</li>
</ol>
<p>其中<strong>处理器</strong>和<strong>控制器</strong>合起来就是我们所示的<code>cpu</code></p>
<p>运算器的运算速度都是很快的，但是我们的数据存储不可能所有数据都存放在寄存器中，所以数据的<code>io</code>操作都是很有必要 的，这样就不能充分利用<code>cpu</code>的运算能力，此时就需要<strong>加上读写速度和处理器运算速度差不多的的高速缓存</strong>来作为<strong>内存和处理器之间</strong>的缓冲。将运算需要使用的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。</p>
<h2 id="缓存一致性问题"><a href="#缓存一致性问题" class="headerlink" title="缓存一致性问题"></a>缓存一致性问题</h2><p>上面加上了缓存可以解决内存的读写速度赶不上处理器的运算速度问题，但是又出现了另外一个问题。<strong>缓存一致性问题</strong></p>
<p>因为 在多处理器中，每一个处理器都有自己的高速缓存，但是内存是只有一个。对于缓存一致性问题在硬件层面主要有两个解决方式</p>
<ul>
<li><p>总线加锁</p>
<ul>
<li>所谓的总线加锁就每一次都会锁定一个<code>cpu</code>，只有这个锁定的<code>cpu</code>才可以执行，其余的<code>cpu</code>是不能执行的。这种方式会降低<code>cpu</code>的吞吐量。</li>
</ul>
</li>
<li><p>使用缓存一致性协议，所谓使用缓存一致性协议也就是在缓存和主内存之间加上一个访问规则，通过这种规则来解决缓存一致性问题。</p>
</li>
</ul>
<pre class="mermaid">graph LR
  A-->B
  subgraph A[处理器]
    direction TB
    A1[处理器1]~~~A2[处理器2]~~~A3[处理器3]
  end
  subgraph B[高速缓存]
    direction TB
    B1[缓存1]~~~B2[缓存2]~~~B3[缓存3]
  end
  B-->C
  C[缓存一致性]-->D[主内存]</pre>
<p>这里的<strong>缓存一致性其实是一个协议</strong>，是处理缓存一致性问题的一个协议(也可以任认为是处理缓存一致性问题的一个理论基础)。</p>
<h1 id="java内存模型-java-memory-mode"><a href="#java内存模型-java-memory-mode" class="headerlink" title="java内存模型(java memory mode)"></a>java内存模型(java memory mode)</h1><h2 id="什么是java内存模型-JMM规范"><a href="#什么是java内存模型-JMM规范" class="headerlink" title="什么是java内存模型(JMM规范)"></a>什么是<code>java</code>内存模型(JMM规范)</h2><p><strong><code>java</code>内存模型其实也是一个理论上的东西，是一个规范，这个规范的主要目的是定义程序中各种变量的访问规则，也就是关注的是虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。</strong>此处的变量和<code>java</code>编程中的变量是不同的，这里的变量包含了实例字段，静态字段和构成数组对象的元素，但是不包括局部变量和方法参数。（上面这段话是《深入理解java虚拟机》这本书中的）</p>
<p><code>jvm</code>将内存组织结构主要划分为两个部分</p>
<ul>
<li>主内存</li>
<li>工作内存</li>
</ul>
<pre class="mermaid">graph LR
  A-->B
  subgraph A[java线程]
    direction TB
    A1[线程1]~~~A2[线程2]~~~A3[线程3]
  end
  subgraph B[工作内存]
    direction TB
    B1[工作内存1]~~~B2[工作内存2]~~~B3[工作内存3]
  end
  B-->C
  C[save和load操作]-->D[主内存]</pre>

<h3 id="主内存"><a href="#主内存" class="headerlink" title="主内存"></a>主内存</h3><ul>
<li>主要包含本地方法区和堆</li>
<li>所有变量都要存储在主内存中，这些变量对于所有线程都是共享的</li>
</ul>
<h3 id="工作内存"><a href="#工作内存" class="headerlink" title="工作内存"></a>工作内存</h3><ul>
<li>每一个线程都有自己独立工作的地方，也就是工作内存</li>
<li>工作内存中保存的是主内存中某些变量的拷贝，线程堆变量的所有操作都必须在工作内存中进行，不能直接操作主内存</li>
<li><strong>如果是基本数据类型，那么直接分配到工作内存，如果是引用类型，引用的地址存在在工作空间中，但是具体的对象是存在在堆中(也就是主内存中)，是可以共享的</strong></li>
</ul>
<pre class="mermaid">graph LR
  subgraph B[java线程]
    direction BT
    B1[线程2]-->B2[工作内存2]
    B2-->B1
  end
  subgraph A[java线程]
    direction BT
    A1[线程1]-->A2[工作内存1]
    A2-->A1
  end
  C[主内存]
  A & B --> C
  C --> A & B</pre>

<p>看上图，之所以存在<code>java</code>内存模型一说是因为<code>java</code>虚拟机的工作机制。当有多个线程的时候，每一个线程可以操作的数据有两种类型</p>
<ul>
<li>线程私有的数据，也就是这个数据就算改变了也不会影响其余线程，比如说局部变量就是线程私有的数据</li>
<li>线程共享的数据，这样的数据多个线程都可以访问，就会出现线程安全的问题</li>
</ul>
<p>因为线程操作的数据有不同类型，所以在<code>java</code>中一个线程去操作数据的时候不是在主内存中直接操作，其实还有一个属于线程自己的内存(工作内存)，当操作线程私有的数据比较好理解，直接在工作内存中完成就可以咯，如果是操作共享的数据，那么就在主内存中拿一份数据到自己工作内存中操作，操作完了再将数据给到主内存中。</p>
<h2 id="内存结构和内存模型的关系"><a href="#内存结构和内存模型的关系" class="headerlink" title="内存结构和内存模型的关系"></a>内存结构和内存模型的关系</h2><p>上面说了什么是<code>java</code>的内存模型，知道<code>java</code>内存模型是一个规范，定义的是程序中变量的访问规则，那么这个内存模型和我们平时所有的内存结构有什么关系呢？先看一下<code>java</code>内存结构</p>
<h3 id="java内存结构"><a href="#java内存结构" class="headerlink" title="java内存结构"></a>java内存结构</h3><p><code>java</code>中内存结构主要是有五个部分</p>
<ul>
<li>程序计数器</li>
<li>堆</li>
<li>虚拟机栈<ul>
<li>存放方法运行时所需的数据，成为栈帧</li>
</ul>
</li>
<li>本地方法栈</li>
<li>方法区<ul>
<li>存储运行时常量池、已被虚拟机加载的类信息、常量、静态变量，即时编译后的代码等</li>
</ul>
</li>
</ul>
<p>上面<code>java</code>的五个部分其实就是根据<code>JMM</code>规范(<code>java</code>内存模型)来划分的一个内存结构。</p>
<h1 id="并发编程的三个特性"><a href="#并发编程的三个特性" class="headerlink" title="并发编程的三个特性"></a>并发编程的三个特性</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>执行的操作不可分割，可以理解为就是一步操作，因为只有一步所以肯定是不能分割的</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>线程都是有自己的工作空间的，每一个线程都只能操作自己工作空间的数据，别的线程是看不到自己线程的工作空间的数据的</p>
<h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><p>程序中代码的顺序不一定就是在<code>cpu</code>中执行的顺序，因为存在两种重排</p>
<ul>
<li>编译重排序(编译期)</li>
<li>指令重排序(运行期)</li>
</ul>
<h1 id="JMM规范是如何保证并发编程的三个特征的呢"><a href="#JMM规范是如何保证并发编程的三个特征的呢" class="headerlink" title="JMM规范是如何保证并发编程的三个特征的呢"></a>JMM规范是如何保证并发编程的三个特征的呢</h1><h2 id="JMM和原子性"><a href="#JMM和原子性" class="headerlink" title="JMM和原子性"></a><code>JMM</code>和原子性</h2><h3 id="原子性案例1"><a href="#原子性案例1" class="headerlink" title="原子性案例1"></a>原子性案例1</h3><p><code>X = 10</code>这样一个操作具有原子性么？</p>
<ul>
<li>如果<code>X</code>是私有数据，是分配到工作空间的，那么就是有原子性的，因为只有一个写的操作</li>
<li>如果<code>X</code>是共享的数据，就是在主内存中，这样就需要先在主内存中读取(复制)到工作空间中，修改完成后再将数据通过到主内存中，这样就是两步，也就是没有原子性</li>
</ul>
<h3 id="原子性案例2"><a href="#原子性案例2" class="headerlink" title="原子性案例2"></a>原子性案例2</h3><p><code>i++</code>这个操作具有原子性么？</p>
<p><code>i++</code>这个操作其实是需要分为下面这几个步骤的</p>
<ul>
<li>读取<code>i</code>的值</li>
<li>将<code>i</code>的值加一</li>
<li>将修改后的值赋值给<code>i</code></li>
</ul>
<p>可以看到每一步都是原子操作，但是这三个原子操作合在一起之后去不是原子操作了</p>
<h3 id="JMM如何保证原子性的"><a href="#JMM如何保证原子性的" class="headerlink" title="JMM如何保证原子性的"></a>JMM如何保证原子性的</h3><ul>
<li>使用<code>Synchronized</code>关键字</li>
<li>使用<code>JUC</code>的<code>lock</code>和<code>unlock</code>关键字</li>
</ul>
<h2 id="JMM和可见性"><a href="#JMM和可见性" class="headerlink" title="JMM和可见性"></a><code>JMM</code>和可见性</h2><p>线程是不能操作主内存中的数据的，只能操作自己的工作空间的数据，所以需要数据时会先去工作空间找，如果找到了就会使用工作空间中的数据，找不到才会从主内存中找，但是如果一个线程在工作空间找到了，不过这个数据在别的线程中已经修改了，并且刷新到主内中了，由于当前线程的工作空间中有这个数据，没有在主内存中拿，这样当前线程拿到的就不是最新的数据。<code>JMM</code>是如何解决这个问题的呢？</p>
<h3 id="JMM如何保证可见性的"><a href="#JMM如何保证可见性的" class="headerlink" title="JMM如何保证可见性的"></a><code>JMM</code>如何保证可见性的</h3><ul>
<li><code>Volatile</code>关键字，使用这个关键字后，当线程需要使用这个关键字修饰的数据时，每一次都会从主内存中去找数据，而不是从工作空间中找。</li>
<li><code>JUC</code>  可以使用<code>JUC</code>的<code>lock</code>和<code>unlock</code></li>
</ul>
<h2 id="JMM和有序性-重排序"><a href="#JMM和有序性-重排序" class="headerlink" title="JMM和有序性(重排序)"></a><code>JMM</code>和有序性(重排序)</h2><p>对于有序性问题可以使用下面两种方式来解决</p>
<ul>
<li>使用<code>Volatile</code>关键字</li>
<li>使用<code>Synchronized</code>来加锁</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture的使用</title>
    <url>/2023/11/17/f31e3a7691d6/</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<p>以下内容参考《Java并发编程深度解析与实战》谭锋（第11章）</p>
<h1 id="为什么要用-CompletableFuture"><a href="#为什么要用-CompletableFuture" class="headerlink" title="为什么要用 CompletableFuture"></a>为什么要用 <code>CompletableFuture</code></h1><p>使用 <code>CompletableFuture</code> 是因为 <code>Future</code> 虽然可以获取线程执行结果，但是无法使用回调函数，只能依靠阻塞方法 <code>get()</code> 来获取线程结果，<code>CompletableFuture</code> 就是对 <code>Future</code> 的优化和增强，具体可以实现以下功能</p>
<ol>
<li>提供了类似 <code>Future</code> 的阻塞式获取结果和状态的方法</li>
<li>提供 <code>CompletionStage</code> 任务执行之后回调</li>
<li>多个异步任务的聚合，串行，并行等功能</li>
</ol>
<h1 id="构造异步方法"><a href="#构造异步方法" class="headerlink" title="构造异步方法"></a>构造异步方法</h1><p><code>CompletableFuture</code> 提供了 4 个静态方法来构造一个异步事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 含有返回值的异步方法（自定义线程池和默认线程池）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span>;</span><br><span class="line"><span class="comment">// 不含有返回值的异步方法（自定义线程池和默认线程池）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,Executor executor)</span></span><br></pre></td></tr></table></figure>
<div class="tabs" id="代码示例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="代码示例-1">supplyAsync</button><button type="button" class="tab " data-href="代码示例-2">runAsync示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="代码示例-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;线程执行结果：&quot;</span> + future.get());</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">线程执行结果：<span class="number">1</span></span><br><span class="line">主线程:main</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;线程执行结果：&quot;</span> + future.get());</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">线程执行结果：<span class="literal">null</span></span><br><span class="line">主线程:main</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h1 id="任务与和或的静态方法"><a href="#任务与和或的静态方法" class="headerlink" title="任务与和或的静态方法"></a>任务与和或的静态方法</h1><p><code>CompletableFuture</code> 中还有另外两个特殊的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收多个CompletableFuture无返回值任务，当所有的CompletableFuture任务执行结束后，返回一个新的CompletableFuture对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br><span class="line"><span class="comment">//接收多个CompletableFuture带有返回值任务，当任何一个CompletableFuture任务执行完成后，返回一个新的CompletableFuture对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title function_">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="allof()和anyof()"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="allof()和anyof()-1">allOf()</button><button type="button" class="tab " data-href="allof()和anyof()-2">anyOf()</button></ul><div class="tab-contents"><div class="tab-item-content active" id="allof()和anyof()-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Void&gt; future2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;before time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">    CompletableFuture.allOf(future1, future2).join();</span><br><span class="line">    now = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;after time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果，用了5s才返回，因为要所有都执行完成才返回，就需要看耗时最长的那个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before time:<span class="number">50</span>:<span class="number">33</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">2</span></span><br><span class="line">after time:<span class="number">50</span>:<span class="number">38</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="allof()和anyof()-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future1 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Void&gt; future2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;before time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">    CompletableFuture.anyOf(future1, future2).join();</span><br><span class="line">    now = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">&quot;after time:&quot;</span> + now.getMinute() + <span class="string">&quot;:&quot;</span> + now.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果，只用了3s就返回了，因为是其中一个执行完成就行，所以看耗时最短的那个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before time:<span class="number">53</span>:<span class="number">43</span></span><br><span class="line">当前线程：ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">after time:<span class="number">53</span>:<span class="number">46</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h1 id="CompletionStage-详解"><a href="#CompletionStage-详解" class="headerlink" title="CompletionStage 详解"></a><code>CompletionStage</code> 详解</h1><ol>
<li><code>CompletionStage</code> 表示任务执行的一个阶段，每个异步任务都会返回一个新的 <code>CompletionStage</code> 对象</li>
<li>可以针对多个 <code>CompletionStage</code> 对象进行串行、并行或者聚合来进行下一阶段的操作</li>
</ol>
<p><code>CompletionStage</code> 类中提供了很多方法来实现多个 <code>CompletionStage</code> 的串行，并行等功能，可以按照如下方式进行分类</p>
<pre class="mermaid">flowchart LR
    A[CompletionStage]
    B["纯消费性方法 \n (上一个异步结果 \n 作为当前方法的参数进行计算 \n 都含有 Accept 关键字)"]
        B1[依赖单个 CompletionStage任务完成]
            B11["thenAccept(Consumer)"]
            B12["thenAcceptAsync(Consumer)"]
            B13["thenAcceptAsync(Consumer,Executor)"]
            B1-->B11 & B12 & B13
        B2[依赖两个 CompletionStage任务完成]
            B21["thenAcceptBoth(CompletionStage,Consumer)"]
            B22["thenAcceptBothAsync(CompletionStage,Consumer)"]
            B23["thenAcceptBothAsync(CompletionStage,Consumer,Executor)"]
            B2-->B21 & B22 & B23
        B3[依赖两个 CompletionStage任务中任何一个完成]
            B31["acceptEither(CompletionStage,Consumer)"]
            B32["acceptEitherAsync(CompletionStage,Consumer)"]
            B33["acceptEitherAsync(CompletionStage,Consumer,Executor)"]
            B3-->B31 & B32 & B33
        B-->B1 & B2 & B3

    C["有返回值类型的方法 \n (上一个异步结果 \n 作为当前方法的参数进行计算 \n 并且会产生新的有返回值\n的CompletionStage对象)"]
        C1[依赖单个 CompletionStage任务完成]
            C11["thenApply(Function)"]
            C12["thenApplyAsync(Function)"]
            C13["thenApplyAsync(Function,Executor)"]
            C1-->C11 & C12 & C13
        C2[依赖两个 CompletionStage任务完成]
            C21["thenCombine(CompletionStage,BiFunction)"]
            C22["thenCombineAsync(CompletionStage,BiFunction)"]
            C23["thenCombineAsync(CompletionStage,BiFunction,Executor)"]
            C2-->C21 & C22 & C23
        C3[依赖两个 CompletionStage任务中任何一个完成]
            C31["acceptToEither(CompletionStage,Function)"]
            C32["acceptToEitherAsync(CompletionStage,Function)"]
            C33["acceptToEitherAsync(CompletionStage,Function,Executor)"]
            C3-->C31 & C32 & C33
        C-->C1 & C2 & C3
    D["不消费也没有返回值类型的方法\n不依赖上个阶段的结果\n上一个阶段完成就执行指定的任务\n这类方法都包含 run 关键字"]
        D1[依赖单个 CompletionStage任务完成]
            D11["thenRun(Runnable)"]
            D12["thenRunAsync(Runnable)"]
            D13["thenRunAsync(FuncRunnabletion,Executor)"]
            D1-->D11 & D12 & D13
        D2[依赖两个 CompletionStage任务完成]
            D21["runAfterBoth(CompletionStage,Runnable)"]
            D22["runAfterBothAsync(CompletionStage,Runnable)"]
            D23["runAfterBothAsync(CompletionStage,Runnable,Executor)"]
            D2-->D21 & D22 & D23
        D3[依赖两个 CompletionStage任务中任何一个完成]
            D31["runAfterEither(CompletionStage,Runnable)"]
            D32["runAfterEitherAsync(CompletionStage,Runnable)"]
            D33["runAfterEitherAsync(CompletionStage,Runnable,Executor)"]
            D3-->D31 & D32 & D33
        D-->D1 & D2 & D3
    E[组合类型的方法]
        E1["thenCompose(Function,CompletionStage)"]
        E2["thenComposeAsync(Function,CompletionStage)"]
        E3["thenComposeAsync(Function,CompletionStage,Executor)"]
        E-->E1 & E2 & E3
    A-->B & C & D & E</pre>

<div class="tabs" id="代码示例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="代码示例-1">纯消费型</button><button type="button" class="tab " data-href="代码示例-2">有返回值类型</button><button type="button" class="tab " data-href="代码示例-3">不消费也没有返回值类型</button><button type="button" class="tab " data-href="代码示例-4">组合类型</button></ul><div class="tab-contents"><div class="tab-item-content active" id="代码示例-1"><figure class="highlight java"><figcaption><span>thenAccept</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thread main:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;first stage:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).thenAccept((Integer v)-&gt; &#123;</span><br><span class="line">        <span class="comment">// v 就是第一步返回的结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;then accept thread:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(v + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>执行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">thread main:main</span><br><span class="line">first stage:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">then accept thread:main</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>上面代码调用 <code>thenAccept()</code> 使用的是 <code>main</code> 线程，如果是使用 <code>thenAcceptAsync()</code>, 调用结果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread main:main</span><br><span class="line">first stage:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line">then accept thread:ForkJoinPool.commonPool-worker-<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thread main:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第一个阶段任务返回的是 int 类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第二个阶段任务返回的是 String 类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;), (Integer i1, String s1) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> i1 + s1;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(completableFuture.get()); <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一个阶段任务等待4s</span></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;第一个阶段:&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 第二个阶段任务等待2s</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;第二个阶段：&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;), () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终:&quot;</span> + LocalDateTime.now().format(formatter));</span><br><span class="line">        System.out.println(<span class="string">&quot;最终执行的任务&quot;</span>);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第二个阶段：<span class="number">2023</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">32</span></span><br><span class="line">最终:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">32</span></span><br><span class="line">最终执行的任务</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="代码示例-4"><ol>
<li><code>thenCompose()</code>是多任务组合方法，它的作用是把两个<code>CompletionStage</code>任务进行组合达到串行执行的目的，也就是把第一个任务的执行结果作为参数传递给第二个任务执行，它有点类似于前面提到的<code>thenCombine()</code>方法，最大的不同在于<code>thenCompose()</code>方法中的任务存在先后关系，而<code>thenCombine()</code>中两个任务是并行执行的</li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p><code>CompletionStage</code> 是链式处理，当前面的任务出现异常的时候，会导致后面的任务无法处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">    &#125;).thenRun(()-&gt;&#123;</span><br><span class="line">        <span class="comment">// 这里并不会打印，因为前面一个任务出现了异常，导致该任务无法执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二个任务&quot;</span>);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以在 <code>CompletionStage</code> 中也提供了异常处理的相关方法，主要有以下三类</p>
<pre class="mermaid">flowchart LR
    A[CompletionStage异常处理]
    B["以whenComplete前缀开头的方法\n不论前置的CompletionStage任务是正常执行结束\n还是出现异常，都能够触发特定的action\n这些方法都接收两个参数，\n一个是正常的结果，一个是异常\n没有异常时第二个就是null"]
        B1["whenComplete(BiConsumer)"]
        B2["whenCompleteAsync(BiConsumer)"]
        B3["whenCompleteAsync(BiConsumer,Executor)"]
        B-->B1 & B2 & B3
    C["以handle前缀开头的方法\n表示前置任务执行完成后，\n不管前置任务执行状态是正常还是异常，\n都会执行其中的函数fn，\n它和whenComplete类方法的\n作用几乎一致，不同点在于，\n这类方法是有返回值类型的方法"]
        C1["handle(BiFunction)"]
        C2["handleAsync(BiFunction)"]
        C3["handleAsync(BiFunction,Executor)"]
        C-->C1 & C2 & C3
    D["exceptionally()"]
        D1["exceptionally()方法接收一个函数fn，\n当上一个CompletionStage出现异常时，\n会把该异常作为参数传递给函数fn。\n该方法有一个CompletionStage的返回值，\n说明当前方法可以在接收到\n上一个阶段的异常时进行进一步处理，\n返回一个新的CompletionStage对象实例"]
        D-->D1
    A-->B & C & D</pre>

<h2 id="whenComplete类型方法"><a href="#whenComplete类型方法" class="headerlink" title="whenComplete类型方法"></a>whenComplete类型方法</h2><div class="tabs" id="whencomplete类型异常"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="whencomplete类型异常-1">没有异常的情况</button><button type="button" class="tab " data-href="whencomplete类型异常-2">有异常的情况</button></ul><div class="tab-contents"><div class="tab-item-content active" id="whencomplete类型异常-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).whenCompleteAsync((result, excep)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="number">1</span></span><br><span class="line">第一个任务的异常:<span class="literal">null</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="whencomplete类型异常-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).whenCompleteAsync((result, excep)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep);</span><br><span class="line">    &#125;).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="literal">null</span></span><br><span class="line">第一个任务的异常:java.util.concurrent.CompletionException: java.lang.RuntimeException: 第一个任务出现异常</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.CompletionException: java.lang.RuntimeException: 第一个任务出现异常</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="handle-类型方法"><a href="#handle-类型方法" class="headerlink" title="handle 类型方法"></a>handle 类型方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).handle((result, excep) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务结果:&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个任务的异常:&quot;</span> + excep.toString().substring(<span class="number">1</span>, <span class="number">70</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;第二个任务的结果&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最终的执行结果</span></span><br><span class="line">    System.out.println(completableFuture.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">任务结果:<span class="literal">null</span></span><br><span class="line">第一个任务的异常:ava.util.concurrent.CompletionException: java.lang.RuntimeException: </span><br><span class="line">第二个任务的结果</span><br></pre></td></tr></table></figure>
<h2 id="exceptionally-方法"><a href="#exceptionally-方法" class="headerlink" title="exceptionally()方法"></a>exceptionally()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;第一个任务出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;).exceptionally(exec -&gt; &#123;</span><br><span class="line">        <span class="comment">// exceptionally 里面的返回值需要和前面的 stage 返回值保持一致</span></span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最终的执行结果</span></span><br><span class="line">    System.out.println(completableFuture.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Future的使用</title>
    <url>/2023/11/17/9f417cc2ea5e/</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>java</code> 中异步执行任务可以让任务类实现 <code>Runnable</code> 接口即可，但是使用 <code>Runnable</code> 接口执行的任务无法获取返回值，所以 <code>java</code> 在 <code>jdk1.5</code> 版本中增加了 <code>Future</code> 接口和 <code>Callable</code></p>
<span id="more"></span>
<h1 id="先给结论"><a href="#先给结论" class="headerlink" title="先给结论"></a>先给结论</h1><ol>
<li><code>Future</code> 可以使用 <code>get()</code> 方法获取线程调用的结果，该方法会阻塞主线程</li>
<li><code>Future</code> 类有提供 <code>isDone()</code> 方法来判断线程是否执行完成，该方法不会阻塞</li>
<li><code>Future</code> 可以拿到线程结果是因为在线程任务类（<code>FutureTask</code>）中执行完任务之后将结果设置到了 <code>Future</code> 中【先有个概念，下文会分析】</li>
</ol>
<h1 id="Future-的使用示例"><a href="#Future-的使用示例" class="headerlink" title="Future 的使用示例"></a>Future 的使用示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="comment">// 这里submit 方法是 &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start execute:&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 非阻塞调用，不断查询结果是否完成</span></span><br><span class="line">        <span class="keyword">while</span> (!future.isDone()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程未执行完成&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若任务未执行完成，get 方法会阻塞主线程</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;after execute Time:&quot;</span> +  DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// 关闭线程池，否则jvm进程会一直在运行</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">线程未执行完成</span><br><span class="line">start execute:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">35</span></span><br><span class="line">线程未执行完成</span><br><span class="line">线程未执行完成</span><br><span class="line">线程未执行完成</span><br><span class="line">after execute Time:<span class="number">2023</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">39</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h1 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h1><p><img src="https://blog-1308475102.cos.ap-guangzhou.myqcloud.com/picture/202311172311584.png" alt="FutureTask核心类"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>从上面类图看到核心类是 <code>FutureTask</code>, 这个类实现了 <code>Future</code> 和 <code>Runnable</code>, 并且在构造函数中需要传入 <code>Callable</code></p>
<ol>
<li><code>FutureTask</code> 和 <code>Runnable</code> 接口的关系是实现，目的是便于向上转型传参，线程池中接收任务的顶层接口就是 <code>Runnable</code></li>
<li><code>FutureTask</code> 类和 <code>Callable</code> 实现类的关系是 <strong>组合</strong>，下面是 <code>FutureTask</code> 的构造方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.callable = callable;</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>描述上面两点是因为先弄清楚 <code>FutureTask</code> 和 <code>Callable</code> 和 <code>Runnable</code> 三者之间的关系，这样才能知道最终的任务类是哪个（任务类的 <code>run()</code> 方法就是重点了）</p>
<pre class="mermaid">sequenceDiagram
    participant A as ExecutorService
    participant B as AbstractExecutorService
    participant C as ThreadPoolExecutor
    A->>B: submit(Callable)
    Note over A,B: 将Callable转换成FutureTask
    B->>B: RunnableFuture = new FutureTask<T>(callable)
    Note over B,C: 将FutureTask转换成RunnableFuture
    B->>C: execute(Runnable command) {
    B->>A: return RunnableFuture</T></pre>
<p>下面再跟着代码看一遍这个过程</p>
<ol>
<li><code>TestThread#main</code> 中创建线程池并调用 <code>submit()</code> 方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 接下来看submit(Callable) 方法</span></span><br><span class="line">Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;start execute:&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><code>submit()</code> 方法最终会调用到 <code>java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable&lt;T&gt;)</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">// 这里就是根据 Callable 生成 FutureTask 类</span></span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">    <span class="comment">// 接下来看 execute 方法，这个就是 ThreadPoolExecutor 中的 execute() 方法</span></span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="title function_">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;T&gt;(callable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>java.util.concurrent.ThreadPoolExecutor#execute(Runnable)</code> 这个就是线程池的执行逻辑，参考</li>
</ol>
<p><code>&#123;% post_path 线程池实现原理 %&#125;</code><br>通过上面的步骤已经知道线程池中使用的 <strong>任务类</strong> 是 <code>FutureTask</code>，那么就一定会调用 <code>FutureTask</code> 类中的 <code>run()</code> 方法</p>
<h1 id="FutureTask-类中重要属性"><a href="#FutureTask-类中重要属性" class="headerlink" title="FutureTask 类中重要属性"></a>FutureTask 类中重要属性</h1><p>但是在看 <code>run()</code> 方法之前先看一下 <code>FutureTask</code> 类中比较重要的两个属性，在后面的方法中会遇到</p>
<ol>
<li>描述任务状态的字段 <code>state</code></li>
<li>结果保存字段 <code>Object outcome</code></li>
<li>等待队列 <code>volatile WaitNode waiters;</code></li>
</ol>
<h2 id="FutureTask-任务状态字段-state"><a href="#FutureTask-任务状态字段-state" class="headerlink" title="FutureTask 任务状态字段 state"></a>FutureTask 任务状态字段 state</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NEW</span>          <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COMPLETING</span>   <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NORMAL</span>       <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXCEPTIONAL</span>  <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span>    <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERRUPTING</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERRUPTED</span>  <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<h3 id="state-状态转换流程"><a href="#state-状态转换流程" class="headerlink" title="state 状态转换流程"></a>state 状态转换流程</h3><pre class="mermaid">graph LR
    A[new]
    B[COMPLETING]
    C[NORMAL]
    D[EXCEPTIONAL]
    E[CANCELLED]
    F[INTERRUPTING]
    G[INTERRUPTED]
    A--"set() or setException()"-->B-->C & D
    A--"cancel(false)"-->E
    A--"cancel(true)"-->F-->G</pre>
<h2 id="Object-outcome"><a href="#Object-outcome" class="headerlink" title="Object outcome"></a><code>Object outcome</code></h2><p><code>outcome</code> 字段就是用来保存线程执行的结果的</p>
<h2 id="等待队列-WaitNode-waiters"><a href="#等待队列-WaitNode-waiters" class="headerlink" title="等待队列 WaitNode waiters"></a>等待队列 <code>WaitNode waiters</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WaitNode</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    <span class="keyword">volatile</span> WaitNode next;</span><br><span class="line">    WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>waiters 是一个链表，waiters 字段就是这个链表的头部</li>
<li>因为可以有多个线程去调用 <code>Future.get()</code> 方法，当没有获取到结果时，所有调用 <code>get()</code> 方法的线程都是需要阻塞的</li>
</ol>
<h1 id="FutureTask-的-run-方法"><a href="#FutureTask-的-run-方法" class="headerlink" title="FutureTask 的 run() 方法"></a>FutureTask 的 run() 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. state 记录的是当前任务的状态</span></span><br><span class="line">    <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">        !RUNNER.compareAndSet(<span class="built_in">this</span>, <span class="literal">null</span>, Thread.currentThread()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="literal">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="type">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2. 构造 FutureTask 时将 Callable 传递进来了，在这里进行调用</span></span><br><span class="line">                result = c.call();</span><br><span class="line">                <span class="comment">// 设置调用完成的标识</span></span><br><span class="line">                ran = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="literal">null</span>;</span><br><span class="line">                ran = <span class="literal">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                <span class="comment">// 3. 调用完成之后设置结果</span></span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        runner = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来看看注释中的第 <code>3</code> 步， 调用完成之后设置结果</p>
<h2 id="set-V-v-方法"><a href="#set-V-v-方法" class="headerlink" title="set(V v) 方法"></a>set(V v) 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(V v)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (STATE.compareAndSet(<span class="built_in">this</span>, NEW, COMPLETING)) &#123;</span><br><span class="line">        <span class="comment">// 1. 将执行的结果赋值给 outcome</span></span><br><span class="line">        outcome = v;</span><br><span class="line">        STATE.setRelease(<span class="built_in">this</span>, NORMAL); <span class="comment">// final state</span></span><br><span class="line">        <span class="comment">// 2. 通知阻塞的线程（唤醒）</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将结果赋值给 <code>outcome</code> 属性之后，还调用了 <code>finishCompletion()</code> 方法，这个方法的作用是什么呢？这个其实就是 <strong>生产者消费者</strong> 模型的应用</p>
<h1 id="Future-中生产者消费者模型"><a href="#Future-中生产者消费者模型" class="headerlink" title="Future 中生产者消费者模型"></a>Future 中生产者消费者模型</h1><ol>
<li>调用 <code>Future.get()</code> 方法若线程还没有执行完成，主线程会 <strong>阻塞</strong>，当任务完成后会任务类中会 <strong>唤醒</strong> 阻塞的线程</li>
<li>阻塞是阻塞在 <code>get()</code> 方法，那唤醒呢？ 其实就是上面的 <code>finishCompletion()</code> 知道了方法的作用之后，我们再看看看 <code>get()</code> 方法和 <code>finishCompletion()</code> 方法</li>
</ol>
<h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">    <span class="comment">// 先获取任务状态，任务没有完成，就进行阻塞等待</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING)</span><br><span class="line">        s = awaitDone(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">return</span> report(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>阻塞等待是调用的 <code>awaitDone()</code> 方法, 还是先总结一下这个方法的作用再看源码</p>
<ol>
<li>任务未完成时，将当前线程封装成一个 <code>WaitNode</code> 对象，添加到 <code>WaitNode waiters</code> 数属性的后面</li>
<li>保存到等待链表之后，就使用 <code>LockSupport.park(this)</code> 来阻塞当前线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">awaitDone</span><span class="params">(<span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="number">0L</span>;    <span class="comment">// Special value 0L means not yet parked</span></span><br><span class="line">    <span class="type">WaitNode</span> <span class="variable">q</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">queued</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="literal">null</span>)</span><br><span class="line">                q.thread = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING)</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            removeWaiter(q);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>)</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            <span class="comment">// 由当前线程构成一个 WaitNode 对象</span></span><br><span class="line">            q = <span class="keyword">new</span> <span class="title class_">WaitNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!queued)</span><br><span class="line">            <span class="comment">// 将构造的 waitNode 对象添加到 waiters 链表中【可能有人有点疑惑，这两个逻辑处在不同 else if 条件中，为什么会同时执行到，其实这里不是同时执行到，而是串行的，因为这整块代码在一个for循环中，前面进行一个else分支后，下一次循环条件就改变了，导致进入到了不同的else分支中】</span></span><br><span class="line">            queued = WAITERS.weakCompareAndSet(<span class="built_in">this</span>, q.next = waiters, q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> parkNanos;</span><br><span class="line">            <span class="keyword">if</span> (startTime == <span class="number">0L</span>) &#123; <span class="comment">// first time</span></span><br><span class="line">                startTime = System.nanoTime();</span><br><span class="line">                <span class="keyword">if</span> (startTime == <span class="number">0L</span>)</span><br><span class="line">                    startTime = <span class="number">1L</span>;</span><br><span class="line">                parkNanos = nanos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">elapsed</span> <span class="operator">=</span> System.nanoTime() - startTime;</span><br><span class="line">                <span class="keyword">if</span> (elapsed &gt;= nanos) &#123;</span><br><span class="line">                    removeWaiter(q);</span><br><span class="line">                    <span class="keyword">return</span> state;</span><br><span class="line">                &#125;</span><br><span class="line">                parkNanos = nanos - elapsed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state &lt; COMPLETING)</span><br><span class="line">                LockSupport.parkNanos(<span class="built_in">this</span>, parkNanos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 阻塞当前线程</span></span><br><span class="line">            LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="finishCompletion-方法"><a href="#finishCompletion-方法" class="headerlink" title="finishCompletion() 方法"></a><code>finishCompletion()</code> 方法</h2><p>看完了 <code>get()</code> 阻塞方法，就可以来看看唤醒阻塞的线程方法 <code>finishCompletion()</code> 了, 同样的先简单总结一下该方法做的事情</p>
<ol>
<li>遍历 <code>waiters</code> 从里面获取阻塞的线程</li>
<li>获取到阻塞的线程之后，调用 <code>LockSupport.unpark(thread)</code> 来唤醒对应的线程<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishCompletion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="literal">null</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (WAITERS.weakCompareAndSet(<span class="built_in">this</span>, q, <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> q.thread;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                    q.thread = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 唤醒线程</span></span><br><span class="line">                    LockSupport.unpark(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">WaitNode</span> <span class="variable">next</span> <span class="operator">=</span> q.next;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.next = <span class="literal">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                q = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">    callable = <span class="literal">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized的作用和实现原理</title>
    <url>/2023/11/11/138a9fb1d57d/</url>
    <content><![CDATA[<p>[参考链接](<a href="https://www.yuque.com/guoweiblog/nxz7iv/xikre6?singleDoc#">https://www.yuque.com/guoweiblog/nxz7iv/xikre6?singleDoc#</a> 《synchronized 的作用和实现原理》)</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池实现原理</title>
    <url>/2023/11/13/63b6d22fbd8f/</url>
    <content><![CDATA[<span class="hide_first_mermaid">
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A
  </pre></div>
</span>

<h1 id="1-为什么要使用线程池"><a href="#1-为什么要使用线程池" class="headerlink" title="1. 为什么要使用线程池"></a>1. 为什么要使用线程池</h1><ol>
<li>线程的创建和销毁都需要消耗资源（cpu，内存）</li>
<li>使用线程池可以预先创建好线程，开始使用时速度更快<span id="more"></span></li>
</ol>
<h1 id="2-线程池的设计思想"><a href="#2-线程池的设计思想" class="headerlink" title="2. 线程池的设计思想"></a>2. 线程池的设计思想</h1><h2 id="2-1-如何做到线程在执行完任务后不回收"><a href="#2-1-如何做到线程在执行完任务后不回收" class="headerlink" title="2.1. 如何做到线程在执行完任务后不回收"></a>2.1. 如何做到线程在执行完任务后不回收</h2><p>线程池就是要缓存线程，当一个任务执行完成之后，执行任务的线程可以不用回收，当有新的任务来到时复用当前线程来执行，平时线程执行的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程的创建和销毁实际是底层的操作系统来实现的，当启动一个线程执行任务时，<code>run()</code> 方法就会执行，当 <code>run()</code> 执行完成之后当前的线程会自动销毁<br>那么如何做到线程不被销毁呢？其实只要让 <code>run()</code> 方法一直在执行就好了，比如加个 <code>while</code> 循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-线程空闲时也消耗资源怎么处理"><a href="#2-2-线程空闲时也消耗资源怎么处理" class="headerlink" title="2.2. 线程空闲时也消耗资源怎么处理"></a>2.2. 线程空闲时也消耗资源怎么处理</h2><ol>
<li>为了做到将线程不回收，一直执行，所以使用将任务代码放在 <code>while(true)</code> 里面，但是这样做会出现即使没有任务时，这个线程也会一直消耗 cpu 资源，所以需要进一步优化</li>
<li>优化方式也很简单，就是没有任务时就阻塞当前线程就好了，当有任务来到时再唤起当前线程进行执行</li>
<li>所以线程池可以认为是一个 <code>生产者--消费者</code> 模型，提交任务的线程就是生产者，线程池自身就是消费者，线程池从阻塞队列中不断获取任务，有任务就执行，没有任务就阻塞自己</li>
</ol>
<h1 id="3-线程池创建方式"><a href="#3-线程池创建方式" class="headerlink" title="3. 线程池创建方式"></a>3. 线程池创建方式</h1><h2 id="3-1-Executors-类"><a href="#3-1-Executors-类" class="headerlink" title="3.1. Executors 类"></a>3.1. Executors 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Executors</span> &#123;</span><br><span class="line">    <span class="comment">// 创建固定数量线程的线程池</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建单个线程的线程池 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                    threadFactory));</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-ThreadPoolExecutor"><a href="#3-2-ThreadPoolExecutor" class="headerlink" title="3.2. ThreadPoolExecutor"></a>3.2. ThreadPoolExecutor</h2><p>通过上面 <code>Executors</code> 类创建的线程池可以看到最终还是 <code>new ThreadPoolExecutor</code>, 但是直接使用 <code>Executors</code> 创建的线程池存在的问题时，要么线程数量没有限制，要么是队列的大小没有限制，所以一般情况下都不推荐使用 <code>Executors</code> 来直接创建线程池，而是手动通过 <code>ThreadPoolExecutor</code> 来创建， 比如下面这种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">5</span>,  <span class="comment">// 线程池核心线程数</span></span><br><span class="line">        <span class="number">10</span>,  <span class="comment">// 线程池最大线程数</span></span><br><span class="line">        <span class="number">1000</span>,  <span class="comment">// 线程池中超过corePoolSize数目的空闲线程最大存活时间</span></span><br><span class="line">        TimeUnit.MILLISECONDS,  <span class="comment">// 时间单位，毫秒</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">50</span>),  <span class="comment">// 工作线程等待队列</span></span><br><span class="line">        Executors.defaultThreadFactory(),  <span class="comment">// 自定义线程工厂</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());  <span class="comment">// 线程池满时的拒绝策略</span></span><br></pre></td></tr></table></figure>

<h1 id="线程池的生命周期"><a href="#线程池的生命周期" class="headerlink" title="线程池的生命周期"></a>线程池的生命周期</h1><pre class="mermaid">flowchart LR
    A[running]-- "执行shutdown()方法"--> B[Shutdown]
    A-- "执行shutdonwNow() 方法"--> C[Stop]
    B--"任务列表为空，所有任务都执行完成"-->D[TIDYING]
    B--"shutdownNow()"-->C
    C--所有任务都执行完成-->D
    D--"执行 terminated() 方法"-->E[TERMINATED]</pre>
<ul>
<li>RUNNING：能接受新任务，并处理阻塞队列中的任务</li>
<li>SHUTDOWN：不接受新任务，但是可以处理阻塞队列中的任务</li>
<li>STOP：所有任务都不处理（正在运行的线程准备中断，阻塞队列中的任务不再处理，新的任务不会再接收）</li>
<li>TIDYING：所有任务都终止，并且工作线程也为0，处于关闭之前的状态</li>
<li>TERMINATED：已关闭。</li>
</ul>
<h1 id="线程池的处理流程"><a href="#线程池的处理流程" class="headerlink" title="线程池的处理流程"></a>线程池的处理流程</h1><pre class="mermaid">flowchart LR
    A[提交任务] --> B{核心线程池是否已满}
    B --否--> C[创建线程执行任务]
    B --是--> D{队列是否已满}
    D --否--> E[将任务存储在队列中]
    D --是--> F{是否达到最大线程池}
    F --否--> G[创建线程执行]
    F --是--> J[执行拒绝策略]</pre>

<h1 id="线程池相关核心变量"><a href="#线程池相关核心变量" class="headerlink" title="线程池相关核心变量"></a>线程池相关核心变量</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="comment">// ctl 变量保存了两个信息，线程池的状态（高3位）和线程数量（低29位）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 统计线程数量的位数，这里表示使用32-3 = 29 位来表示线程的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池的几种状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面重点看一下 ctl 变量是如何通过一个变量存储两种信息的</p>
<h2 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>其中 <code>Integer.SIZE</code> &#x3D; 32, 所以 <code>COUNT_BITS</code> 就是29，也就是使用 29 位来表示线程的数量<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span> &lt;&lt; COUNT_BITS</span><br><span class="line">      ​</span><br><span class="line">      <span class="number">1</span>的<span class="number">32</span>位<span class="number">2</span>进制是</span><br><span class="line">      <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line">      ​</span><br><span class="line">      左移<span class="number">29</span>位</span><br><span class="line">      <span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">      ​</span><br><span class="line">      再进行减一</span><br><span class="line">      <span class="number">000</span> <span class="number">11111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span></span><br><span class="line">      ​</span><br><span class="line">      所以线程池最大数目就是</span><br><span class="line">      <span class="number">000</span> <span class="number">11111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span></span><br></pre></td></tr></table></figure></li>
<li>那怎么通过这 29 位来获取线程的数量呢，通过 <code>workderCountOf(int c)</code> 方法可以看到实际是通过位运算中的 <code>与</code> 操作来去除最高位来进行获取的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; </span><br><span class="line">    <span class="keyword">return</span> c &amp; COUNT_MASK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h2><p>获取线程池状态的方法是 <code>runStateOf()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123;</span><br><span class="line">     <span class="keyword">return</span> c &amp; ~COUNT_MASK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到分成了两步</p>
<ol>
<li>对 <code>COUNT_MASK</code> 取反，前面已经知道 <code>COUNT_MASK</code> 前面三位是0，最后29位是1， 取反则是前面三位是1，最后29位是0</li>
<li><code>与</code> 操作和计算线程数量时是一样的，是为了去除后面29位数，只需要计算前面三位的数即可</li>
</ol>
<h1 id="线程池核心问题"><a href="#线程池核心问题" class="headerlink" title="线程池核心问题"></a>线程池核心问题</h1><h2 id="线程池核心线程什么时候创建"><a href="#线程池核心线程什么时候创建" class="headerlink" title="线程池核心线程什么时候创建"></a>线程池核心线程什么时候创建</h2><ol>
<li>默认情况下不会预先创建线程，所以核心线程也是在有任务来的时候才会创建</li>
<li>在 <code>ThreadPoolExecutor</code> 类中提供了两个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="comment">// 预先启动一个核心线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">prestartCoreThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workerCountOf(ctl.get()) &lt; corePoolSize &amp;&amp;</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预先启动所有核心线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">prestartAllCoreThreads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (addWorker(<span class="literal">null</span>, <span class="literal">true</span>))</span><br><span class="line">            ++n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面两个方法可知，在创建线程池之后（提交任务之前，也就是调用 execute 之前）是可以调用这两个方法来预先创建核心线程的</p>
<h2 id="线程池的核心线程是否会被回收"><a href="#线程池的核心线程是否会被回收" class="headerlink" title="线程池的核心线程是否会被回收"></a>线程池的核心线程是否会被回收</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allowCoreThreadTimeOut</span><span class="params">(<span class="type">boolean</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &amp;&amp; keepAliveTime &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Core threads must have nonzero keep alive times&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value != allowCoreThreadTimeOut) &#123;</span><br><span class="line">            allowCoreThreadTimeOut = value;</span><br><span class="line">            <span class="keyword">if</span> (value)</span><br><span class="line">                interruptIdleWorkers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ThreadPoolExecutor</code> 类中有提供 <code>allowCoreThreadTimeOut(boolean)</code> 方法来设置当达到超时时间时，核心线程也可以被回收掉</p>
<h2 id="核心线程数量和最大先吃数量动态修改"><a href="#核心线程数量和最大先吃数量动态修改" class="headerlink" title="核心线程数量和最大先吃数量动态修改"></a>核心线程数量和最大先吃数量动态修改</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态修改核心线程数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCorePoolSize</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态修改最大线程数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumPoolSize</span><span class="params">(<span class="type">int</span> maximumPoolSize)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面有写到可以动态修改线程池的核心线程和最大线程数量，那么这么设计的原因是什么呢？说到这个问题就牵扯到另外一个问题，如何合理设置线程池的线程数量大小？对于线程池数量大小的设置问题有多种建议，比如</p>
<ol>
<li>CPU密集型，线程池大小设置为N+1， IO密集型，线程池大小设置为2N+1（N指的是cpu核心数）</li>
<li>线程数&#x3D;CPU核数 *（1+线程等待时间 &#x2F; 线程时间运行时间）</li>
</ol>
<p>对于方式2是结合了实际的业务，但是线程等待时间，线程运行时间都是需要 <code>监控</code> 线程环境才可以得知的，既然涉及到 <code>监控</code> 就说明这个值是需要动态去修改的，所以才会需要提供这样两个修改线程数量的方法</p>
<h2 id="相同的任务如何舍弃"><a href="#相同的任务如何舍弃" class="headerlink" title="相同的任务如何舍弃"></a>相同的任务如何舍弃</h2><ol>
<li>在某些场景下会有任务不断的往线程池中添加，但是对于添加的相同的任务如果之前还没有执行完成，后续添加的任务可以直接舍弃，这里涉及到的知识点是 <code>队列</code> 和 <code>对象相等的判断</code></li>
<li>如果每次添加新任务之前旧的任务已经执行完成，就不存在相同的任务舍弃这个问题，所以这里的场景是提交的任务太多，线程没有执行完成的任务保留在队列中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写 equals 方法，这个就是判断任务相同的关键</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MyTask</span> <span class="variable">that</span> <span class="operator">=</span> (MyTask) o;</span><br><span class="line">        <span class="comment">// 这里是用账号来判断任务是否相同</span></span><br><span class="line">        <span class="keyword">return</span> account.equals(that.account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>提交任务之前先获取队列中的任务，看是否有正在排队的相同账号的任务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取队列中的任务</span></span><br><span class="line">BlockingQueue&lt;Runnable&gt; queue = threadPoolExecutor.getQueue();</span><br><span class="line"><span class="comment">// 构建当前任务</span></span><br><span class="line"><span class="type">MyTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTask</span>(<span class="string">&quot;currentTaskAccount&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (queue.size() &gt; <span class="number">0</span> &amp;&amp; queue.contains(authSymbolTask)) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;队列中含有:&#123;&#125;的任务,当前任务被丢弃&quot;</span>, task.getAccount());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 队列中不包含当前账号的任务就提交当前任务</span></span><br><span class="line">    threadPoolExecutor.execute(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="线程池提交任务流程"><a href="#线程池提交任务流程" class="headerlink" title="线程池提交任务流程"></a>线程池提交任务流程</h2><p>下面代码是 <code>ThreadPoolExecutor</code> 类</p>
<figure class="highlight java"><figcaption><span>execute方法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="comment">// 线程数量小于核心线程数</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="comment">// 1. 创建线程的核心方法</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程数量大于核心数量，则将任务添加到队列中</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="comment">// 再次检查如果线程池不是运行状态，则将添加到队列的任务移除掉，并且执行拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到添加线程进行执行主要是在 <code>addWorker()</code> 方法中，所以继续看 <code>addWorkder()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();;) &#123;</span><br><span class="line">        <span class="comment">// 线程池正在关闭或已经关闭时就不运行添加新任务</span></span><br><span class="line">        <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN)</span><br><span class="line">            &amp;&amp; (runStateAtLeast(c, STOP)</span><br><span class="line">                || firstTask != <span class="literal">null</span></span><br><span class="line">                || workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c)</span><br><span class="line">                &gt;= ((core ? corePoolSize : maximumPoolSize) &amp; COUNT_MASK))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN))</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// worker类包含Thread 和 Runnable Task</span></span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">                <span class="comment">// 线程池还在运行状态</span></span><br><span class="line">                <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                    (runStateLessThan(c, STOP) &amp;&amp; firstTask == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.getState() != Thread.State.NEW)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    workerAdded = <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                <span class="comment">// 添加成功就启动线程开始执行</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Worker 类代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Worker(Runnable firstTask) &#123;</span><br><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">    <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">    <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    runWorker(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">    w.firstTask = <span class="literal">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如何保证线程不会被回收呢？就是通过一个 while 循环，不让线程退出 run 方法</span></span><br><span class="line">        <span class="comment">// 如何保证线程在空闲时不占用cpu呢，实现逻辑就是在 getTask() 方法里面，如果没有获取到任务就阻塞当前线程</span></span><br><span class="line">        <span class="comment">// 如何实现线程的回收呢？这个关键点就是 while 条件的判断，当条件不满足时就会退出 while 循环，当前线程执行完了，线程就会被jvm回收掉</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                    afterExecute(task, <span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    afterExecute(task, ex);</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="literal">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 线程池中线程被回收的逻辑</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程池中的线程是如何被回收的"><a href="#线程池中的线程是如何被回收的" class="headerlink" title="线程池中的线程是如何被回收的"></a>线程池中的线程是如何被回收的</h2><pre class="mermaid">sequenceDiagram
    participant A as ThreadPoolExecutor[A]
    participant B as ThreadPoolExecutor[B]
    participant C as Worker[C]
    participant D as Worker[D]
    participant E as Worker[E]
    A->>B: execute()
    B->>C: addWorker(Runnable firstTask, boolean core)
    Note over B,C: Worker类包含Thread和Task
    C->>D: runWorker(Worker)
    Note over C,D: runWorker()中有while，保证线程的复用
    D->>E: getTask()
    Note over D,E: 获取不到任务会阻塞</pre>
<p>在上面时序图中可以看到，在 <code>Worker.runWorker()</code>  方法中会不断的循环，保证线程可以复用，同时在 <code>getTask()</code> 中做是否要退出循环的条件的判断</p>
<ol>
<li>阻塞队列中没有任务了</li>
<li>已经超过了设置的空闲时间</li>
</ol>
<p>这样就可以退出让 Thread 的run 方法流程走完，退出 run 方法之后相当于这个线程就被回收了</p>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程上下文切换包含哪些内容</title>
    <url>/2023/11/18/c51368ba5d47/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>cpu</code> 不知道什么是进程和线程，<code>cpu</code> 只知道两件事情</p>
<ol>
<li>从内存中取出指令</li>
<li>执行指令</li>
<li>一直重复上面两个步骤，所以 <strong>取指令</strong>-&gt; <strong>执行指令</strong> 就是 <code>cpu</code> 所能做的所有事情</li>
</ol>
<h1 id="cpu-获取指令执行的流程"><a href="#cpu-获取指令执行的流程" class="headerlink" title="cpu 获取指令执行的流程"></a>cpu 获取指令执行的流程</h1><ol>
<li>编写源代码，源代码中都会有 main 函数，这个 main 函数就是执行入口</li>
<li>程序启动后，会将 main 函数的第一条机器指令放入 pc 寄存器中（程序计数器）</li>
<li>pc 寄存器的地址默认是自动 +1， 初始地址就是 main 函数的指令地址</li>
<li>当遇到 if else 等语句时程序会根据计算结果或者指令中指定的跳转地址来动态改变 pc 寄存器中的值</li>
</ol>
<h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><ol>
<li>进程是操作系统分配资源的最小单位</li>
<li>线程是调用的基本单位，线程之间共享进程资源<ol>
<li>线程之间共享了哪些资源<ol>
<li>堆区</li>
<li>代码区</li>
<li>数据区：存放的就是全局变量</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="什么是线程上下文"><a href="#什么是线程上下文" class="headerlink" title="什么是线程上下文"></a>什么是线程上下文</h1><ol>
<li>线程上下文就是指线程在某个时刻的状态，或者说某个时刻的数据，这个数据是线程私有的才能称为是线程的上下文</li>
<li>要看线程上下文包含哪些信息，就需要看哪些数据都是线程私有的，这些线程私有的数据整体就是线程上下文</li>
</ol>
<h2 id="线程的私有数据有哪些"><a href="#线程的私有数据有哪些" class="headerlink" title="线程的私有数据有哪些"></a>线程的私有数据有哪些</h2><p>线程本质就是函数的执行，函数执行的信息都是放在栈帧中，栈帧主要包含如下内容</p>
<ol>
<li>当前函数的返回值</li>
<li>调用其他函数的参数（寄存器不够时参数是会放在栈帧中的）</li>
<li>函数使用的局部变量</li>
<li>函数使用的寄存器信息</li>
<li>程序计数器是线程私有的</li>
<li>栈指针（该线程栈区的栈顶位置）</li>
<li>执行函数时所使用的寄存器也是线程私有的</li>
</ol>
<p>所有上面这些信息包含在一起就是线程上下文</p>
<h1 id="常用的几种寄存器"><a href="#常用的几种寄存器" class="headerlink" title="常用的几种寄存器"></a>常用的几种寄存器</h1><ol>
<li>栈寄存器<ol>
<li>函数运行时都有一个栈帧，对于栈来说重要的信息之一就是栈顶，栈寄存器就是保存栈顶信息的</li>
</ol>
</li>
<li>指令寄存器（pc寄存器）</li>
<li>状态寄存器，线程是运行在内核态还是用户态的信息保存在状态寄存器中</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>redis底层数据结构</title>
    <url>/2023/11/15/19e21a188fd0/</url>
    <content><![CDATA[<h1 id="redis-对象"><a href="#redis-对象" class="headerlink" title="redis 对象"></a>redis 对象</h1><p><code>redis</code> 中所有数据类型都是使用 <code>RedisObject</code> 对象形式来表示，<code>RedisObject</code> 主要包含三个字段</p>
<span id="more"></span>

<pre class="mermaid">graph LR
    A[RedisObject]
    A-->B["type (记录对象的类型) \n 常用5种基本类型，实际还有BitMap（2.2 版新增）\n、HyperLogLog（2.8 版新增）、\n GEO（3.2 版新增）、Stream（5.0 版新增）"]

    B1[String 字符串对象]
    B2[List 列表集合]
    B3[Hash 哈希对象]
    B4[Set 集合对象]
    B5[Zset 有序集合对象]
    B--> B1 & B2 & B3 & B4 & B5

    A-->C["encoding (记录对象的编码)"]
    C1[Intset 整数集合]
    C2[embstr embstr编码的简单动态字符串]
    C3[raw 简单动态字符串]
    C4[HT 字典]
    C5[Linkedlist 双端列表]
    C6[ziplist 压缩列表]
    C7[skiplist 跳跃表和字典]
    C8[quicklist 快速列表]
    C-->C1 & C2 & C3 & C4 & C5 & C6 & C7 & C8

    A-->D["*ptr (指向具体的类型)"]</pre>

<h2 id="为什么一个对象需要包含-type-和-encoding"><a href="#为什么一个对象需要包含-type-和-encoding" class="headerlink" title="为什么一个对象需要包含 type 和 encoding"></a>为什么一个对象需要包含 <code>type</code> 和 <code>encoding</code></h2><ol>
<li>因为 <code>type</code> 只是记录对象的类型</li>
<li>每一个 <code>type</code> 可以使用不同的底层数据结构来实现，所以还需要具体的 <code>encoding</code> 来指明这个 <code>type</code> 的实现是什么， 下图就列出每一个 <code>type</code> 有哪几种底层数据结构</li>
</ol>
<h1 id="5-种基本数据类型对应的底层实现"><a href="#5-种基本数据类型对应的底层实现" class="headerlink" title="5 种基本数据类型对应的底层实现"></a>5 种基本数据类型对应的底层实现</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol>
<li><code>String</code> 类型的底层的数据结构实现主要是 <code>int</code> 和 <code>SDS</code>（简单动态字符串）<ol>
<li>如果存储的是数字，则编码使用 <code>int</code> 类型</li>
</ol>
</li>
<li><code>sds</code> 的实际编码又包含 <code>raw</code> 和 <code>embstr</code><ol>
<li>字符串长度小于 32位时使用 <code>embstr</code>(<code>embstr</code> 的空间挨着 <code>RedisObject，RedisObject</code> 和 <code>embstr</code> 的内存是一次性分配的)</li>
<li>字符串长度大于 32位时使用 <code>raw</code> 编码(<code>RedisObject</code> 的内存分区和 <code>raw</code> 编码类型的空间分配是分开的，也就是需要两次内存分配)</li>
</ol>
</li>
</ol>
<h3 id="SDS-和-C-原生字符串的区别"><a href="#SDS-和-C-原生字符串的区别" class="headerlink" title="SDS 和 C 原生字符串的区别"></a>SDS 和 C 原生字符串的区别</h3><ol>
<li><code>sds</code> 可以保存文本和二进制数据，因为 <code>sds</code> 有 <code>length</code> 字段来判断字符串是否结束，c 使用 ‘\0’ 作为结束符</li>
<li><code>sds</code> 的 <code>api</code> 安全，不会出现缓冲区溢出，因为 <code>sds</code> 拼接字符串前有做容量检查</li>
</ol>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol>
<li><code>List</code> 类型的底层数据结构是由双向链表或压缩列表实现的<ol>
<li>元素个数小于 512 个（默认值，可由 <code>list-max-ziplist-entries</code> 配置），列表每个元素的值都小于 64 字节（默认值，可由 <code>list-max-ziplist-value</code> <code>配置），Redis</code> 会使用压缩列表作为 <code>List</code> 类型的底层数据结构；</li>
</ol>
</li>
<li>在 <code>Redis3.2</code> 版本之后，<code>List</code> 类型底层数据结构只有 <code>quicklist</code> 一种</li>
</ol>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><ol>
<li><code>Hash</code> 类型的底层数据结构是由压缩列表或哈希表实现的<ol>
<li>元素个数小于 512 个（可通过 <code>hash-max-ziplist-entries</code> 修改），所有值小于 64 字节（可通过 <code>hash-max-ziplist-value</code> 修改）时，<code>Redis</code> 会使用压缩列表作为 <code>Hash</code> 类型的底层数据结构</li>
</ol>
</li>
<li>在 <code>Redis7.0</code> 中，压缩列表数据结构被废弃，由 <code>listpack</code> 数据结构来实现</li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol>
<li><code>Set</code> 类型的底层数据结构是由哈希表或整数集合实现的<ol>
<li>如果集合中的元素都是整数且元素个数小于 512 （可通过 <code>set-maxintset-entries</code> 修改）个，<code>Redis</code> 会使用整数集合作为 Set 类型的底层数据结构</li>
</ol>
</li>
</ol>
<h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><ol>
<li><p>Zset 类型底层数据结构是由压缩列表或跳表实现</p>
<ol>
<li>若有序集合的元素个数小于 128 个且每个元素的值小于 64 字节，<code>Redis</code> 会使用压缩列表作为 <code>Zset</code> 类型的底层数据结构</li>
</ol>
</li>
<li><p><code>Redis 7.0</code> 中，压缩列表数据结构被废弃，交由 <code>listpack</code> 数据结构来实现</p>
</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis线程模型</title>
    <url>/2023/11/16/e4db3f95ceb5/</url>
    <content><![CDATA[<p>总结：<code>redis</code> 整体是多线程的，至于平时所说的 <code>redis</code> 单线程是指 <strong>redis的网络io 和 键值对读写</strong> 是在同一个线程中完成</p>
<span id="more"></span>
<h1 id="一次-redis-请求过程"><a href="#一次-redis-请求过程" class="headerlink" title="一次 redis 请求过程"></a>一次 redis 请求过程</h1><ol>
<li>监听客户端请求（<code>bind/listen</code>）</li>
<li>等待客户端的连接（<code>accept</code>）</li>
<li>从 <code>socket</code> 中读取数据（<code>recv</code>）</li>
<li>解析客户端发送的内容（<code>parse</code>）</li>
<li>根据解析出来的内容进行内存操作（<code>get/set</code>）</li>
<li>执行完成命令之后给客户端响应结果，即向 <code>socket</code> 中写数据（<code>send</code>）</li>
</ol>
<pre class="mermaid">graph TB
    subgraph A[redis线程]
        subgraph B[网络IO处理]
            B1[bind/listen]
            B2[accept]
            B3[recv]
            B4[parse]
        end
        subgraph C[键值对读写]
            C1[get/set]
        end
        subgraph D[网络IO处理]
            D1[send]
        end
    end
    B-->C-->D</pre>
<ul>
<li>网络 io 处理过程中， <code>listen</code> 和 <code>recv</code> 这两个步骤是可能阻塞的，即当没有链接或客户端没有发送命令时，服务器处理这两个环节时会阻塞，<strong>但是socket网络模型自身就支持非阻塞的形式</strong></li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>WindTerm功能设置</title>
    <url>/2023/11/21/0ff9c6825506/</url>
    <content><![CDATA[<h1 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h1><p><a href="https://github.com/kingToolbox/WindTerm/issues/267">参考github</a></p>
<h1 id="去除锁屏"><a href="#去除锁屏" class="headerlink" title="去除锁屏"></a>去除锁屏</h1><ol>
<li>找到配置文件，可以在 <strong>会话-&gt;首选项-&gt;配置文件</strong> 中查看配置文件的位置</li>
<li>找到 <code>application.lockScreenTimeout</code>， 将值改成 0</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
        <category>other</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>utools自动化脚本插件</title>
    <url>/2023/11/11/d899f5ff1973/</url>
    <content><![CDATA[<h1 id="utools-使用自动化脚本打开本地程序"><a href="#utools-使用自动化脚本打开本地程序" class="headerlink" title="utools 使用自动化脚本打开本地程序"></a>utools 使用自动化脚本打开本地程序</h1><ol>
<li>比如 typora 可以打开之前的文件和目录，但是目录只能到文件的上一个层级，如果源目录包含很多子目录，重新打开时可能不是我们想要的结果，那可以在命令行执行 <code>typora folder</code>, eg: <code>typora E:\\blog</code> <span id="more"></span></li>
</ol>
<blockquote>
<p>在命令行执行 typora 命令需要先配置 typora 的环境变量</p>
</blockquote>
<ol>
<li>更简便的方式是直接使用 utools 的自动化脚本这个插件，新增一个自己的插件脚本，内容如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 以下是关键代码，调用 typora 来执行目标文件</span></span><br><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;typora&#x27;</span>, [<span class="string">&#x27;E:/code/learnerguo&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    process.<span class="title function_">exit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后自定义关键字，后续当打开 utools 输入对应关键字就可以打开 typora 的目录</p>
<h1 id="使用自动化脚本获取当天起始时间"><a href="#使用自动化脚本获取当天起始时间" class="headerlink" title="使用自动化脚本获取当天起始时间"></a>使用自动化脚本获取当天起始时间</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 设置当前时间的小时、分钟、秒和毫秒为0，即将时间设置为当天的开始时间</span></span><br><span class="line">now.<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取当天开始时间点的毫秒数</span></span><br><span class="line"><span class="keyword">const</span> startTime = now.<span class="title function_">getTime</span>();</span><br><span class="line">utools.<span class="title function_">copyText</span>(<span class="string">&quot;&quot;</span>+startTime);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;开始时间已复制&#x27;</span> + startTime);</span><br><span class="line">utools.<span class="title function_">hideMainWindow</span>();</span><br><span class="line">process.<span class="title function_">exit</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>utools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>utools</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode相关设置</title>
    <url>/2023/11/12/6b613d963af3/</url>
    <content><![CDATA[<h1 id="vscode-中-markdown-的-snippets-的设置"><a href="#vscode-中-markdown-的-snippets-的设置" class="headerlink" title="vscode 中 markdown 的 snippets 的设置"></a>vscode 中 markdown 的 snippets 的设置</h1><h2 id="snippets-的设置"><a href="#snippets-的设置" class="headerlink" title="snippets 的设置"></a>snippets 的设置</h2><ol>
<li>打开 ctrl+shift+p , 搜索 <code>configure user snippets</code> </li>
<li>选择 markdown.json, 会出现如下内容</li>
</ol>
<span id="more"></span>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">	<span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">	<span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">	<span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>可以根据示例文件进行修改，如下图所示：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;markdown code graph&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;codeblock&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;&lt;pre class=&quot;</span>mermaid<span class="string">&quot;&gt;<span class="variable">$0</span>&quot;</span>,</span><br><span class="line">		<span class="string">&quot;```&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;description&quot;</span>: <span class="string">&quot;insert markdown code graph&quot;</span></span><br><span class="line">&#125;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">上面示例的意思是 当输入 codeblock 时就会出现 mermaid 代码块， <span class="variable">$0</span> 是光标出现的地方</span><br><span class="line"></span><br><span class="line"><span class="comment">## markdown snippets 不生效的解决方式</span></span><br><span class="line">使用上面的步骤设置完 snippets 之后，在 markdown 文档中编写关键字，但是并没有生效，还需要在  settings.json 中（可以输入 ctrl+<span class="built_in">shift</span>+p, 搜索 settings， 选择 Open User Settings(JSON)）, 然后填写下面的内容</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="string">&quot;[markdown]&quot;</span>:&#123;</span><br><span class="line">	<span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">	<span class="string">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;other&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">		<span class="string">&quot;comments&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">		<span class="string">&quot;strings&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>添加上述内容后就可以生效了</p>
<h1 id="vscode-设置白天黑夜自动切换主题"><a href="#vscode-设置白天黑夜自动切换主题" class="headerlink" title="vscode 设置白天黑夜自动切换主题"></a>vscode 设置白天黑夜自动切换主题</h1><ol>
<li>vscode 可以根据系统设置的 <code>light</code> 或 <code>dark</code> 主题来进行切换</li>
<li>系统自动切换主题软件可以在 <code>store</code> 中安装 <code>Auto Dark Mode</code> 这个软件并进行设置</li>
<li><code>window</code> 系统设置完成之后可以在 <code>vscode</code> 的 <code>user setting</code> 中添加如下内容, 第一个配置是开启自动切换，后面的配置是设置的 <code>light</code> 和 <code>dark</code> 主题的名称</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;window.autoDetectColorScheme&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.preferredLightColorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Atom One Light&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.preferredDarkColorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default Dark Modern&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode设置markdown图片默认路径</title>
    <url>/2023/11/15/5b4d784e18c2/</url>
    <content><![CDATA[<p><code>vscode</code> 在 <code>markdown</code> 文档中直接复制图片时是放在当前目录，如果需要修改可以按照下面方式设置</p>
<span id="more"></span>
<ol>
<li>输入快捷键 <code>ctrl+,</code> 可以快速打开设置</li>
<li>搜索 <code>markdown.copy: Destination</code></li>
</ol>
<p><img src="/2023/11/15/5b4d784e18c2/1700033681108.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>tools</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
